<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ROS2 CLI Tools</title>
      <link href="/2020/ROS2-CLI-Tools.html"/>
      <url>/2020/ROS2-CLI-Tools.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统版本：MacOS 10.15.6（官方写的是支持 10.14）</p><p>ROS版本：Foxy</p><p>shell：zsh</p><p>Mac：<code>MacBook Pro (13-inch, 2016, Four Thunderbolt 3 Ports)</code></p></blockquote><p>该文章总结了 ROS2 官网的 <a href="https://index.ros.org/doc/ros2/Tutorials/#beginner-cli-tools">CLI Tools</a> 介绍，如果需要更为详细的介绍请移步官网。且 Windows 不在文本讨论范围内。</p><p>本文主要介绍如下：</p><ol><li><a href="https://index.ros.org/doc/ros2/Tutorials/Configuring-ROS2-Environment/">配置 ROS2 环境</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Understanding-ROS2-Nodes/">ROS 2 nodes</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Topics/Understanding-ROS2-Topics/">ROS 2 topics</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Services/Understanding-ROS2-Services/">ROS 2 services</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Understanding-ROS2-Actions/">ROS 2 actions</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Parameters/Understanding-ROS2-Parameters/">ROS 2 parameters</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Launch-Files/Creating-Launch-Files/">创建 launch 文件</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Ros2bag/Recording-And-Playing-Back-Data/">记录和回放数据</a></li><li>ROS1 和 ROS2 命令行工具的差异</li></ol><p>全文篇幅可能较长，尽可能使用更精简的方式描述。</p><a id="more"></a><h2 id="配置-ROS2-环境"><a href="#配置-ROS2-环境" class="headerlink" title="配置 ROS2 环境"></a>配置 ROS2 环境</h2><h3 id="1-加载核心-ROS-配置文件"><a href="#1-加载核心-ROS-配置文件" class="headerlink" title="1.加载核心 ROS 配置文件"></a>1.加载核心 ROS 配置文件</h3><p>与 ROS1 一样，使用 ROS2 也需要加载 setup 配置文件</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. ~/ros2_foxy/ros2-osx/setup.zsh</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：我的 <code>shell</code> 是 <code>zsh</code>，请使用你对应的 <code>shell</code> 的 <code>setup</code>，且路径请以你安装路径为准。</p><h3 id="2-添加核心配置文件到-shell-的启动脚本中"><a href="#2-添加核心配置文件到-shell-的启动脚本中" class="headerlink" title="2. 添加核心配置文件到 shell 的启动脚本中"></a>2. 添加核心配置文件到 <code>shell</code> 的启动脚本中</h3><p>官网的做法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;. ~/ros2_foxy/ros2-osx/setup.zsh&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>我不太建议这种做法，如果是完全学习 ROS2，可以采取这种方式。这种方式的好处是你全局都可以使用 ROS2 的命令，坏处就是你也不知道何时你的其他程序会加载到 ROS2 环境中的库，然而实际情况这个库不是我想要的。所以我更建议下面这种方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;alias ros2_source=&#x27;. ~/ros2_foxy/ros2-osx/setup.zsh&#x27;&quot; &gt;&gt; ~/.zshrc    </span><br></pre></td></tr></table></figure><p>当我需要加载 ROS2 环境的时候，手动使用 <code>ros2_source</code> 命令即可。</p><h3 id="3-检查环境变量"><a href="#3-检查环境变量" class="headerlink" title="3. 检查环境变量"></a>3. 检查环境变量</h3><p>使用 <code>printenv | grep -i ROS</code> 命令查看当前的所有环境变量，如果设置正确至少应该会打印如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ROS_DISTRO=foxy</span><br><span class="line">ROS_PYTHON_VERSION=3</span><br><span class="line">ROS_VERSION=2</span><br></pre></td></tr></table></figure><p>设置 <code>ROS_DOMAIN_ID</code> 确保局域网不同域的 ROS 数据不会误访问，我使用的 id 为 2。官网要求该数字必须是 0-232 之间的整数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;export ROS_DOMAIN_ID=2&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="ROS-Node"><a href="#ROS-Node" class="headerlink" title="ROS Node"></a>ROS Node</h2><p><code>ROS Node</code> 包含的命令如下：  </p><ol><li>list</li><li>info</li></ol><blockquote><p>前提条件运行了如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. ~/ros2_foxy/ros2-osx/setup.zsh</span><br><span class="line">ros2 run turtlesim turtlesim_node</span><br></pre></td></tr></table></figure></blockquote><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>ros2 node list</code> 显示所有正在运行的节点。</p><p>当前运行 <code>ros2 node list</code> 显示如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/turtlesim</span><br></pre></td></tr></table></figure><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><p>用法：<code>ros2 node info &lt;node_name&gt;</code></p><p>例如当前有一个 <code>/turtlesim</code> 节点，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 node info /turtlesim</span><br></pre></td></tr></table></figure><p>显示的结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/turtlesim</span><br><span class="line">  Subscribers:</span><br><span class="line">    /parameter_events: rcl_interfaces/msg/ParameterEvent</span><br><span class="line">    /turtle1/cmd_vel: geometry_msgs/msg/Twist</span><br><span class="line">  Publishers:</span><br><span class="line">    /parameter_events: rcl_interfaces/msg/ParameterEvent</span><br><span class="line">    /rosout: rcl_interfaces/msg/Log</span><br><span class="line">    /turtle1/color_sensor: turtlesim/msg/Color</span><br><span class="line">    /turtle1/pose: turtlesim/msg/Pose</span><br><span class="line">  Service Servers:</span><br><span class="line">    /clear: std_srvs/srv/Empty</span><br><span class="line">    /kill: turtlesim/srv/Kill</span><br><span class="line">    /reset: std_srvs/srv/Empty</span><br><span class="line">    /spawn: turtlesim/srv/Spawn</span><br><span class="line">    /turtle1/set_pen: turtlesim/srv/SetPen</span><br><span class="line">    /turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute</span><br><span class="line">    /turtle1/teleport_relative: turtlesim/srv/TeleportRelative</span><br><span class="line">    /turtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters</span><br><span class="line">    /turtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes</span><br><span class="line">    /turtlesim/get_parameters: rcl_interfaces/srv/GetParameters</span><br><span class="line">    /turtlesim/list_parameters: rcl_interfaces/srv/ListParameters</span><br><span class="line">    /turtlesim/set_parameters: rcl_interfaces/srv/SetParameters</span><br><span class="line">    /turtlesim/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically</span><br><span class="line">  Service Clients:</span><br><span class="line"></span><br><span class="line">  Action Servers:</span><br><span class="line">    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute</span><br><span class="line">  Action Clients:</span><br></pre></td></tr></table></figure><p><strong>注：</strong><code>Subscribers</code>、<code>Publishers</code>、<code>Service Servers</code>、<code>Service Clients</code>、<code>Action Servers</code> 和 <code>Action Clients</code> 的含义后面再进行介绍。</p><h3 id="与-ROS1-的比较"><a href="#与-ROS1-的比较" class="headerlink" title="与 ROS1 的比较"></a>与 ROS1 的比较</h3><table><thead><tr><th>命令</th><th>ROS1</th><th>ROS2</th></tr></thead><tbody><tr><td>show</td><td><code>rosnode list</code></td><td><code>ros2 node list</code></td></tr><tr><td>list</td><td><code>rosnode show &lt;node_name&gt;</code></td><td><code>ros2 node show &lt;node_name&gt;</code></td></tr></tbody></table><p>使用起来几乎一致，但是有一些 ROS1 的命令 ROS2 没有，比如 <code>kill</code>、<code>ping</code>，在实际开发中这些命令也较少用到，不做讨论。</p><h2 id="ROS-Topic"><a href="#ROS-Topic" class="headerlink" title="ROS Topic"></a>ROS Topic</h2><table><thead><tr><th>命令</th><th>ROS1</th><th>ROS2</th><th>含义</th></tr></thead><tbody><tr><td><code>echo</code></td><td><code>rostopic echo /topic</code></td><td><code>ros2 topic echo /topic</code></td><td>打印某个 topic 的内容</td></tr><tr><td><code>find</code></td><td><code>rostopic find /topic</code></td><td><code>ros2 topic find /topic</code></td><td>查找使用某个 topic 的节点</td></tr><tr><td><code>info</code></td><td><code>rostopic info /topic</code></td><td><code>ros2 topic info /topic</code></td><td>显示某个 topic 的发布者和订阅者的数量</td></tr><tr><td><code>list</code></td><td><code>rostopic list</code></td><td><code>ros2 topic list</code></td><td>显示当前 topic 的清单</td></tr><tr><td><code>pub</code></td><td><code>rostopic pub /topic &quot;msg&quot;</code></td><td><code>ros2 topic pub /topic &quot;msg&quot;</code></td><td>发送消息到一个指定的 topic 中</td></tr></tbody></table><h2 id="ROS-Service"><a href="#ROS-Service" class="headerlink" title="ROS Service"></a>ROS Service</h2><table><thead><tr><th>命令</th><th>ROS1</th><th>ROS2</th><th>含义</th></tr></thead><tbody><tr><td><code>call</code></td><td><code>rosservice call /service_name /service_type [values]</code></td><td><code>ros2 service call /service_name /service_type [values]</code></td><td>给指定的服务端发送特定消息</td></tr><tr><td><code>find</code></td><td><code>rosservice find /service_type</code></td><td><code>ros2 service find /service_type</code></td><td>查找使用某个 Service 的节点</td></tr><tr><td><code>list</code></td><td><code>rosservice list</code></td><td><code>ros2 service list</code></td><td>显示当前 Service 的清单</td></tr></tbody></table><h2 id="ROS-Action"><a href="#ROS-Action" class="headerlink" title="ROS Action"></a>ROS Action</h2><p>在 ROS1 中 ros action 的 cli 不存在。故不作对比，使用方式与前面两者非常相似。</p><table><thead><tr><th>命令</th><th>ROS Foxy</th><th>含义</th></tr></thead><tbody><tr><td><code>info</code></td><td><code>ros2 action info /action_name</code></td><td>显示某个 action 中 client 和 server 的数量</td></tr><tr><td><code>list</code></td><td><code>ros2 action list</code></td><td>显示当前所有 action 的清单</td></tr><tr><td><code>send_goal</code></td><td><code>ros2 action send_goal /action_name /action_type [goal]</code></td><td>发送一个 goal 到指定 action 中</td></tr></tbody></table><h2 id="ROS-parameters"><a href="#ROS-parameters" class="headerlink" title="ROS parameters"></a>ROS parameters</h2><p><code>param</code> 参数是节点所需的配置设置，可以是整数，浮点数，布尔值，字符串或列表。在 ros2 中参数是基于 service 构建的。依旧用表格的方式描述 ROS1 和 ROS2 中参数设计的差异。<strong>注：</strong>ROS2 的参数是存储在节点中的，ROS1 的参数是存储在 ROS Master 中的，所有在使用的时候一般会有一个节点名称的差距。</p><table><thead><tr><th>命令</th><th>ROS1</th><th>ROS2</th><th>含义</th></tr></thead><tbody><tr><td><code>delete</code></td><td><code>rosparam delete /parameter_name</code></td><td><code>ros2 param delete /node_name /parameter_name</code></td><td>删除参数</td></tr><tr><td><code>dump</code></td><td><code>rosparam dump file [namespace]</code></td><td><code>ros2 param dump /node_name</code></td><td>保存参数</td></tr><tr><td><code>get</code></td><td><code>rosparam get /parameter_name</code></td><td><code>ros2 param get /node_name /parameter_name</code></td><td>获取参数</td></tr><tr><td><code>list</code></td><td><code>rosparam list</code></td><td><code>ros2 param list [node_name]</code></td><td>查看参数列表</td></tr><tr><td><code>set</code></td><td><code>rosparam set /parameter_name value</code></td><td><code>ros2 param set /node_name /parameter_name value</code></td><td>设置参数</td></tr></tbody></table><h2 id="ROS-Interface"><a href="#ROS-Interface" class="headerlink" title="ROS Interface"></a>ROS Interface</h2><p><code>interface</code> 是 ROS2 中将 ROS1 中的 <code>rosmsg</code> 和 <code>rossrv</code> 命令合并以后的命令，使用起来更为统一且简洁。先看看 <code>rosmsg</code> 和 <code>rossrv</code></p><ol><li>执行 <code>rosmsg -v</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rosmsg is a command-line tool for displaying information about ROS Message types.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">    rosmsg show    Show message description</span><br><span class="line">    rosmsg info    Alias for rosmsg show</span><br><span class="line">    rosmsg list    List all messages</span><br><span class="line">    rosmsg md5    Display message md5sum</span><br><span class="line">    rosmsg package    List messages in a package</span><br><span class="line">    rosmsg packages    List packages that contain messages</span><br><span class="line"></span><br><span class="line">Type rosmsg &lt;command&gt; -h for more detailed usage</span><br></pre></td></tr></table></figure><ol start="2"><li>执行 <code>rossrv -h</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rossrv is a command-line tool for displaying information about ROS Service types.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">    rossrv show    Show service description</span><br><span class="line">    rossrv info    Alias for rossrv show</span><br><span class="line">    rossrv list    List all services</span><br><span class="line">    rossrv md5    Display service md5sum</span><br><span class="line">    rossrv package    List services in a package</span><br><span class="line">    rossrv packages    List packages that contain services</span><br><span class="line"></span><br><span class="line">Type rossrv &lt;command&gt; -h for more detailed usage</span><br></pre></td></tr></table></figure><p>通过 <code>-h</code> 命令可以发现，这两个命令使用方式非常相似 ，结果相似也非常相似。我们在来看看<code>ros2 interface -h</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">usage: ros2 interface [-h] Call `ros2 interface &lt;command&gt; -h` for more detailed usage. ...</span><br><span class="line"></span><br><span class="line">Show information about ROS interfaces</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  list      List all interface types available</span><br><span class="line">  package   Output a list of available interface types within one package</span><br><span class="line">  packages  Output a list of packages that provide interfaces</span><br><span class="line">  proto     Output an interface prototype</span><br><span class="line">  show      Output the interface definition</span><br><span class="line"></span><br><span class="line">  Call `ros2 interface &lt;command&gt; -h` for more detailed usage.</span><br></pre></td></tr></table></figure><p><code>help</code> 中已经将用法讲的很清楚了，这里就不对比了。记录不同类型的打印结果。</p><ol><li><code>ros2 interface show std_msgs/msg/Int8</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> This was originally provided as an example message.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It is deprecated as of Foxy</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It is recommended to create your own semantically meaningful message.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> However <span class="keyword">if</span> you would like to <span class="built_in">continue</span> using this please use the equivalent <span class="keyword">in</span> example_msgs.</span></span><br><span class="line"></span><br><span class="line">int8 data</span><br></pre></td></tr></table></figure><ol start="2"><li><code>ros2 interface show std_srvs/srv/Empty</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><ol start="3"><li><code>ros2 interface show turtlesim/action/RotateAbsolute</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> The desired heading <span class="keyword">in</span> radians</span></span><br><span class="line">float32 theta</span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> The angular displacement <span class="keyword">in</span> radians to the starting position</span></span><br><span class="line">float32 delta</span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> The remaining rotation <span class="keyword">in</span> radians</span></span><br><span class="line">float32 remaining</span><br></pre></td></tr></table></figure><p><strong>注：</strong>msg、srv 和 action 消息的具体写法后面会在进行详细的介绍。 </p><h2 id="ROS-Launch"><a href="#ROS-Launch" class="headerlink" title="ROS Launch"></a>ROS Launch</h2><p>在 ROS1 中 lauch 使用 xml 格式定义，使用的内容相对比较有限。然而在 ROS2 中 launch 重新设计，采用 Python 脚本的形式进行启动，大致模板可以使用如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> launch <span class="keyword">import</span> LaunchDescription</span><br><span class="line"><span class="keyword">from</span> launch_ros.actions <span class="keyword">import</span> Node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_launch_description</span>():</span></span><br><span class="line">    <span class="keyword">return</span> LaunchDescription([</span><br><span class="line">        Node(</span><br><span class="line">            package=<span class="string">&quot;turtlesim&quot;</span>,</span><br><span class="line">            executable=<span class="string">&quot;turtlesim_node&quot;</span>,</span><br><span class="line">            name=<span class="string">&quot;sim&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p><code>LaunchDescription</code> 中传入了一个 <code>Node</code> 的数组，<code>Node</code>代表了所有的节点信息。参数的含义和使用列举如下：</p><table><thead><tr><th>参数名称</th><th>含义</th><th>类型</th><th>举例</th></tr></thead><tbody><tr><td><code>package</code></td><td>包名</td><td><code>str</code></td><td><code>turtlesim</code></td></tr><tr><td><code>executable</code></td><td>可执行文件的名称</td><td><code>str</code></td><td><code>turtlesim_node</code></td></tr><tr><td><code>name</code></td><td>节点名称</td><td><code>str</code></td><td><code>sim</code></td></tr><tr><td><code>namespace</code></td><td>工作空间名称</td><td><code>str</code></td><td><code>turtlesim1</code></td></tr><tr><td><code>parameters</code></td><td>参数列表</td><td><code>[path 或 Map(key, value)]</code></td><td><code>[&#123;&quot;background_r&quot;: 0&#125;]</code> 或 <code>[&quot;./sim.yaml&quot;]</code></td></tr><tr><td><code>remappings</code></td><td>映射名称</td><td><code>[tuple]</code></td><td><code>[(&#39;/turtlesim1/turtle1/pose&#39;, &#39;/turtlesim1/turtle1/pose_remap&#39;)]</code></td></tr></tbody></table><p>假设我们将之前的模板内容写入到 <code>turtlesim_start.launch.py</code> 中，在加载 ros 环境后，只需执行如下命令即可运行 <code>launch</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch turtlesim_start.launch.py</span><br></pre></td></tr></table></figure><p>终端大致打印内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [launch]: All log files can be found below /Users/askeynil/.ros/log/2020-09-02-19-33-18-140633-AskeyNildeMacBook-Pro.local-22416</span><br><span class="line">[INFO] [launch]: Default logging verbosity is set to INFO</span><br><span class="line">[INFO] [turtlesim_node-1]: process started with pid [22418]</span><br><span class="line">[turtlesim_node-1] [INFO] [1599046399.308158593] [sim]: Starting turtlesim with node name /_ros2cli_daemon_1</span><br><span class="line">[turtlesim_node-1] [INFO] [1599046399.342564206] [sim]: Spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000]</span><br></pre></td></tr></table></figure><h2 id="ROS-Bag"><a href="#ROS-Bag" class="headerlink" title="ROS Bag"></a>ROS Bag</h2><p>该命令可以指定录制一段时间内发送的 topic 数据，以便后面在查询问题的时候进行复现。</p><table><thead><tr><th>命令</th><th>ROS1</th><th>ROS2</th><th>含义</th></tr></thead><tbody><tr><td><code>info</code></td><td><code>rosbag info &lt;bag_file_name&gt;</code></td><td><code>ros2 bag info &lt;bag_file_name&gt;</code></td><td>查看 bag 中的详细内容</td></tr><tr><td><code>play</code></td><td><code>rosbag play &lt;bag_file_name&gt;</code></td><td><code>ros2 bag play &lt;bag_file_name&gt;</code></td><td>播放 bag 中的操作</td></tr><tr><td><code>record</code></td><td><code>rosbag record -O &lt;output_name&gt; [topics [topics ...]]</code></td><td><code>ros2 bag record -o &lt;output_name&gt; [topics [topics ...]]</code></td><td>录制指定 topic 操作</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Foxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> CLI Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS2 Foxy 安装（基于 Mac OS 二进制）</title>
      <link href="/2020/ROS2-Foxy-macOS-Install-Binary.html"/>
      <url>/2020/ROS2-Foxy-macOS-Install-Binary.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统版本：MacOS 10.15.6（官方写的是支持 10.14）</p><p>ROS版本：Foxy</p><p>shell：zsh</p><p>Mac：<code>MacBook Pro (13-inch, 2016, Four Thunderbolt 3 Ports)</code></p></blockquote><p>安装方式基本与官方的安装方式一致：</p><p><a href="https://index.ros.org/doc/ros2/Installation/Foxy/macOS-Install-Binary/">https://index.ros.org/doc/ros2/Installation/Foxy/macOS-Install-Binary/</a></p><a id="more"></a><p>安装之前建议先将 brew 换用国内镜像源，当然即使更换了源也会出现少数地方比较慢需要科学上网的情况，比如 opencv 的安装。也可以不科学上网，仅仅只是慢，应该能下载成功。</p><h2 id="安装必要依赖"><a href="#安装必要依赖" class="headerlink" title="安装必要依赖"></a>安装必要依赖</h2><ol><li><code>Python3.8</code>：ROS2 Foxy 开始默认支持 Python 3.8</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install python@3.8</span><br><span class="line">brew unlink python</span><br><span class="line">brew link --force python@3.8</span><br></pre></td></tr></table></figure><ol start="2"><li><code>asio</code>、<code>tinyxml2</code>：Fast-RTPS 依赖，用来订阅发布消息的组件。以后会详细介绍 <code>DDS</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install asio tinyxml2</span><br></pre></td></tr></table></figure><ol start="3"><li><code>tinyxml</code>、<code>eigen</code>、<code>pcre</code>、<code>poco</code>：机器人状态发布者的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tinyxml eigen pcre poco</span><br></pre></td></tr></table></figure><ol start="4"><li><code>opencv</code>：非必须，但是视觉常常需要用到。安装它可能需要科学上网。如果没有会比较慢，耐心等待试试。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install opencv</span><br></pre></td></tr></table></figure><ol start="5"><li><code>openssl</code>：用来加密，<code>zshrc</code> 根据你的 <code>shell</code> 进行调整</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl</span><br><span class="line">echo &quot;export OPENSSL_ROOT_DIR=$(brew --prefix openssl)&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><ol start="6"><li>Rviz的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install qt freetype assimp</span><br></pre></td></tr></table></figure><ol start="7"><li><code>rosbag2</code> 需要的组件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install console_bridge</span><br></pre></td></tr></table></figure><ol start="8"><li><code>rcl_logging_log4cxx</code> 的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install log4cxx spdlog</span><br></pre></td></tr></table></figure><ol start="9"><li><code>Cyclone DDS</code> 需要的组件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cunit</span><br></pre></td></tr></table></figure><ol start="10"><li>rqt 的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install sip pyqt5</span><br><span class="line">ln -s /usr/local/share/sip/Qt5 /usr/local/share/sip/PyQt5</span><br><span class="line">brew install graphviz</span><br><span class="line">python3 -m pip install pygraphviz pydot</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 pygraphviz 可能会遇到问题：error: Error locating graphviz。尝试使用下面命令解决</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> python3 -m pip install --install-option=<span class="string">&quot;--include-path=/usr/local/include/&quot;</span> --install-option=<span class="string">&quot;--library-path=/usr/local/lib/&quot;</span> pygraphviz</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="11"><li>SROS2的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install lxml</span><br></pre></td></tr></table></figure><ol start="12"><li>命令行工具的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install -U argcomplete catkin_pkg colcon-common-extensions coverage cryptography empy flake8 flake8-blind-except flake8-builtins flake8-class-newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-import-order flake8-quotes ifcfg lark-parser lxml mock mypy netifaces nose pep8 pydocstyle pydot pygraphviz pyparsing pytest-mock rosdep setuptools vcstool</span><br></pre></td></tr></table></figure><h2 id="禁用系统完整性保护（sip）"><a href="#禁用系统完整性保护（sip）" class="headerlink" title="禁用系统完整性保护（sip）"></a>禁用系统完整性保护（sip）</h2><ol><li>终端输入  <code>csrutil status</code></li></ol><p>如果显示的是 <code>System Integrity Protection status: disabled.</code>  则表示是禁用的，后面无需进行了。如果是 <code>enabled</code> 则继续往下进行。</p><ol start="2"><li>重启电脑开机的同时按住 <code>command + r</code> 不要松手，直到出现白苹果</li><li>在实用工具中找到终端</li><li>输入命令：<code>csrutil disable</code></li><li>如果得到结果为： <code>Successfully disabled System Integrity Protection. Please restart the machine for the changes to take effect.</code>  则说明禁用成功</li></ol><h2 id="安装-ROS-2"><a href="#安装-ROS-2" class="headerlink" title="安装 ROS 2"></a>安装 ROS 2</h2><ol><li><p>打开下载界面：<a href="https://github.com/ros2/ros2/releases">https://github.com/ros2/ros2/releases</a></p></li><li><p>找到 ros2-foxy-xxx-macos-amd64.tar.bz2，我当前使用的下载链接为 <a href="https://github.com/ros2/ros2/releases/download/release-foxy-20200807/ros2-foxy-20200807-macos-amd64.tar.bz2">ros2-foxy-20200807-macos-amd64.tar.bz2</a></p></li><li><p>下载后解压会有一个 <code>ros2-osx</code> 的文件夹，该文件就是 ros2 的源文件了</p></li><li><p>将其放在任何你想放在的文件夹内，官方将其放在了 <code>~/ros2_foxy</code> 中。</p></li></ol><h2 id="使用简单的例子测试-ros2"><a href="#使用简单的例子测试-ros2" class="headerlink" title="使用简单的例子测试 ros2"></a>使用简单的例子测试 ros2</h2><ol><li>加载环境</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. ~/ros2_foxy/ros2-osx/setup.zsh</span><br></pre></td></tr></table></figure><ol start="2"><li>打开 talker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_nodes_cpp talker</span><br></pre></td></tr></table></figure><ol start="3"><li>打开另一个终端，打开 listener（别忘了加载 ros 环境）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_nodes_py listener</span><br></pre></td></tr></table></figure><blockquote><p>talker 打印如下</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [1598014476.967367729] [talker]: Publishing: &quot;Hello World: 0&quot;</span><br><span class="line">[INFO] [1598014476.967367729] [talker]: Publishing: &quot;Hello World: 1&quot;</span><br></pre></td></tr></table></figure></blockquote><p>linstener 打印如下</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [1598014543.990184042] [listener]: I heard: [Hello World: 67]</span><br><span class="line">[INFO] [1598014543.990184042] [listener]: I heard: [Hello World: 68]</span><br></pre></td></tr></table></figure></blockquote></blockquote><h2 id="安装后出现的问题"><a href="#安装后出现的问题" class="headerlink" title="安装后出现的问题"></a>安装后出现的问题</h2><ol><li><code>. ~/ros2_foxy/ros2-osx/setup.zsh</code> 之后出现如下内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[connext_cmake_module] Warning: The location at which Connext was found when the workspace was built [[&#x2F;Applications&#x2F;rti_connext_dds-5.3.1]] does not point to a valid directory, and the NDDSHOME environment variable has not been set. Support for Connext will not be available.</span><br></pre></td></tr></table></figure><p>暂时将其忽略，没发现影响。</p><ol start="2"><li>运行 <code>rqt_graph</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The &#39;tango_icons_vendor&#39; package was not found - icons will not work</span><br></pre></td></tr></table></figure><p>该报错导致 <code>rqt</code> 工具的图片都无法显示，解决办法暂时没有找到。</p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Foxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git submodule 基本使用</title>
      <link href="/2020/use-of-git-submoudle.html"/>
      <url>/2020/use-of-git-submoudle.html</url>
      
        <content type="html"><![CDATA[<p>整理比较常用的与 <code>submodule</code> 有关的命令</p><ol><li>添加子仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;repository&gt; [&lt;path&gt;]</span><br></pre></td></tr></table></figure><ol start="2"><li>每个仓库执行指定命令。<code>--recursive</code> 递归查找子仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach [--recursive] &lt;commands&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>删除 submodule 仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule deinit (--all | [--] &lt;path&gt;...)</span><br></pre></td></tr></table></figure><ol start="4"><li>clone 仓库的时候同时下载子仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. --recurse-submodules[=&lt;pathspec&gt;]     可以指定特定的仓库</span></span><br><span class="line"><span class="comment"># 2. --recursive                           递归所有仓库</span></span><br><span class="line">git <span class="built_in">clone</span> [--recurse-submodules[=&lt;pathspec&gt;] | --recursive] &lt;repository&gt; [&lt;directory&gt;]</span><br><span class="line"><span class="comment"># 如果是所有仓库，等同于</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;repository&gt; [&lt;directory&gt;]</span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>因时机械爪驱动</title>
      <link href="/2019/32569ea8.html"/>
      <url>/2019/32569ea8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目代码已托管到<code>github</code>上</p><p><a href="https://github.com/AskeyNil/inspire_EG2_4B1">https://github.com/AskeyNil/inspire_EG2_4B1</a></p></blockquote><p>共两个版本</p><ol><li>C++</li><li>Python</li></ol><a id="more"></a><h2 id="C-使用方法"><a href="#C-使用方法" class="headerlink" title="C++ 使用方法"></a>C++ 使用方法</h2><ol><li>将 cpp 文件夹复制到工程下 <code>3rdparty</code> 目录下，并改名为<code>talon</code>（注意，大小写敏感）</li><li>在项目的 <code>CMakeLists.txt</code> 中添加如下代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(CMAKE_MODULE_PATH $&#123;CMAKE_MODULE_PATH&#125; $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;3rdparty&#x2F;talon)</span><br></pre></td></tr></table></figure><ol><li>上一步也可以将<code>cpp</code>中的<code>cmake</code>文件拷贝到你的<code>CMAKE_MODULE_PATH</code>中</li><li>使用<code>find_package(Talon)</code>导入package</li><li>在<code>target_link_libraries</code>中添加<code>Talon</code>，以此来使用代码。</li><li>以上…</li></ol><h2 id="Python-使用方法"><a href="#Python-使用方法" class="headerlink" title="Python 使用方法"></a>Python 使用方法</h2><blockquote><p>直接拖入项目中即可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> 驱动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 C++ 实现复杂枚举</title>
      <link href="/2019/cc-complex-enum.html"/>
      <url>/2019/cc-complex-enum.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在实际使用 C++ 的过程中，经常需要使用到枚举，然而在 C++ 中并不能给枚举添加方法，属性等特性，如果要使用这些特性，需要通过一些特殊的办法来做到，对枚举进行一个封装。</p><p>以当前用到的封装移动方式为例</p></blockquote><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URMoveState</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">enum</span> StateEnum &#123;</span><br><span class="line">    MOVEC = <span class="number">0</span>,</span><br><span class="line">    MOVEJ = <span class="number">1</span>,</span><br><span class="line">    MOVEL = <span class="number">2</span>,</span><br><span class="line">    MOVEP = <span class="number">3</span></span><br><span class="line">  &#125;;</span><br><span class="line">  StateEnum _state;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">URMoveState</span><span class="params">(<span class="keyword">const</span> StateEnum &amp;state)</span> : _<span class="title">state</span><span class="params">(state)</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重载等于</span></span><br><span class="line">  <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> URMoveState &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> _state == rhs._state;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> StateEnum &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> _state == rhs;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重载不等于</span></span><br><span class="line">  <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> URMoveState &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> _state != rhs._state;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> StateEnum &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> _state != rhs;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (_state) &#123;</span><br><span class="line">    <span class="keyword">case</span> MOVEC:<span class="keyword">return</span> <span class="string">&quot;movec&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> MOVEJ:<span class="keyword">return</span> <span class="string">&quot;movej&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> MOVEL:<span class="keyword">return</span> <span class="string">&quot;movel&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> MOVEP:<span class="keyword">return</span> <span class="string">&quot;movep&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// and so on ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Enum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xacro 语法总结</title>
      <link href="/2019/3f08735f.html"/>
      <url>/2019/3f08735f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>xacro</code>是为了解决在编写<code>urdf</code>文件过程中，出现的标签内容重复，但又不得不去写。一些值的计算有依赖的问题。为了和<code>urdf</code>文件区分，我们定义的模型文件名后缀为<code>.xacro</code>。</p><p>从功能的角度来说，<code>xacro</code>提供了属性定义，数学运算，条件判断和宏定义等功能。</p><p><strong>注意</strong>：必须在robot标签中加入<code>xmlns:xacro=&quot;http://www.ros.org/wiki/xacro&quot;</code>属性！！</p><p>该文件中注释不能用中文！！！</p><blockquote><p><a href="http://wiki.ros.org/xacro">http://wiki.ros.org/xacro</a></p></blockquote></blockquote><a id="more"></a><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote><p>属性的定义使用<code>&lt;xacro:property&gt;</code>标签完成，使用的时候用<code>$&#123;属性名称&#125;</code>来调用该参数。</p></blockquote><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- define --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;the_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2.1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;the_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4.5&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- use --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">geometry</span> <span class="attr">type</span>=<span class="string">&quot;cylinder&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;the_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;the_length&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><blockquote><p>在变量的大括号中可以使用基本的数学运算，可以使用Python数学模块中的函数和常量</p><p>包括，但不限于以下：</p><ol><li><code>pi</code>：π</li><li><code>sin</code>：正弦函数</li><li><code>cos</code>：余弦函数</li><li><code>tan</code>：正切函数</li><li><code>radians</code>：角度值转弧度制</li></ol></blockquote><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;R&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;alpha&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;30/180*pi&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">circumference</span>=<span class="string">&quot;$&#123;2 * pi * R&#125;&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;$&#123;sin(alpha)&#125; $&#123;cos(alpha)&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">limit</span> <span class="attr">lower</span>=<span class="string">&quot;$&#123;radians(-90)&#125;&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;$&#123;radians(90)&#125;&quot;</span> <span class="attr">effort</span>=<span class="string">&quot;0&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;$&#123;radians(75)&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;&lt;expression&gt;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">...</span> <span class="attr">some</span> <span class="attr">xml</span> <span class="attr">code</span> <span class="attr">here</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:unless</span> <span class="attr">value</span>=<span class="string">&quot;&lt;expression&gt;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">...</span> <span class="attr">some</span> <span class="attr">xml</span> <span class="attr">code</span> <span class="attr">here</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:unless</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>表达式中的结果必须是0、1、true或false，否则将会出现错误。</p><p>在<code>&lt;expression&gt;</code>中任何结果为布尔值的Python表达式都是可以的。</p></blockquote><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;var&quot;</span> <span class="attr">value</span>=<span class="string">&quot;useit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;var == &#x27;useit&#x27;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;var.startswith(&#x27;use&#x27;) and var.endswith(&#x27;it&#x27;)&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;allowed&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;[1,2,3]&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;1 in allowed&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><blockquote><p>宏定义使用<code>xacro:macro</code>来定义一个宏，参数用空格分割，参数可以用<code>:=</code>来添加默认值</p></blockquote><p>语法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- define --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;&lt;name&gt;&quot;</span> <span class="attr">params</span>=<span class="string">&quot;&lt;params&gt;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">...</span> <span class="attr">some</span> <span class="attr">xml</span> <span class="attr">code</span> <span class="attr">here</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- use --&gt;</span></span><br><span class="line">&lt;xacro:&lt;name&gt; &lt;params&gt;=&quot;&quot; /&gt;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;ak_axis_x&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 0 0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;ak_link&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name type:=box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;type == &#x27;box&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 2 3&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xacro:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;type == &#x27;cylinder&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">&quot;1&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xacro:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;type == &#x27;sphere&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xacro:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:ak_axis_x</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:ak_link</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:ak_link</span> <span class="attr">name</span>=<span class="string">&quot;my_cylinder&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cylinder&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>标签</th><th>解释</th><th>属性</th></tr></thead><tbody><tr><td><code>&lt;xacro:property&gt;</code></td><td>属性</td><td><code>name</code>、<code>value</code></td></tr><tr><td><code>&lt;xacro:if&gt;</code></td><td>如果</td><td><code>value</code></td></tr><tr><td><code>&lt;xacro:unless&gt;</code></td><td>如果不</td><td><code>value</code></td></tr><tr><td><code>&lt;xacro:macro&gt;</code></td><td>宏定义</td><td><code>name</code>、<code>params</code></td></tr></tbody></table><ol><li>数学运算的时候可以使用Python中Math里面的函数</li><li>if判断的时候可以使用Python中所有能得到bool值的判断，比如<code>in</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> URDF </tag>
            
            <tag> xacro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URDF 中 link、joint 属性总结</title>
      <link href="/2019/bcc307b4.html"/>
      <url>/2019/bcc307b4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>此文用于记录URDF模型中最重要和最常用的两个标签，文章的内容大部分都来自官方</p><p><a href="http://wiki.ros.org/urdf/XML/link">http://wiki.ros.org/urdf/XML/link</a></p><p><a href="http://wiki.ros.org/urdf/XML/joint">http://wiki.ros.org/urdf/XML/joint</a></p><p>对于各个标签的理解和使用，不定时更新。</p></blockquote><a id="more"></a><h2 id="link"><a href="#link" class="headerlink" title="link"></a><a href="http://wiki.ros.org/urdf/XML/link">link</a></h2><h3 id="各标签"><a href="#各标签" class="headerlink" title="各标签"></a>各标签</h3><table><thead><tr><th>子标签或属性<br />（带&lt;&gt;为标签，不带为属性）</th><th>子标签和属性</th><th>描述</th><th>是否理解</th></tr></thead><tbody><tr><td><code>name</code>（必填）</td><td></td><td>用于描述 <code>link</code> 的名称</td><td>√</td></tr><tr><td><code>&lt;inertial&gt;</code>（可选）</td><td></td><td>物理惯性</td><td></td></tr><tr><td></td><td><code>&lt;origin&gt;</code> （可选）</td><td>位置和姿态</td><td></td></tr><tr><td></td><td><code>&lt;mass&gt;</code></td><td>质量</td><td></td></tr><tr><td></td><td><code>&lt;inertia&gt;</code></td><td>3x3的旋转惯性矩阵</td><td></td></tr><tr><td><code>&lt;visual&gt;</code>（可选）</td><td></td><td>连杆的外观，可存在多个</td><td>√</td></tr><tr><td></td><td><code>name</code>（可选）</td><td>名称</td><td>√</td></tr><tr><td></td><td><code>&lt;origin&gt;</code> （可选）</td><td>位置和姿态</td><td>√</td></tr><tr><td></td><td><code>&lt;geometry&gt;</code>（必填）</td><td>形状</td><td>√</td></tr><tr><td></td><td><code>&lt;material&gt;</code>（可选）</td><td>纹理外观</td><td>√</td></tr><tr><td><code>&lt;collision&gt;</code>（可选）</td><td></td><td>碰撞，可存在多个</td><td></td></tr><tr><td></td><td><code>name</code>（可选）</td><td>名称</td><td></td></tr><tr><td></td><td><code>&lt;origin&gt;</code> （可选）</td><td>位置和姿态</td><td></td></tr><tr><td></td><td><code>&lt;geometry&gt;</code>（必填）</td><td>形状</td><td></td></tr></tbody></table><blockquote><p>针对上面的第二列中的子标签描述，同名的意义相同，只描述一次</p></blockquote><table><thead><tr><th>子标签或属性<br />（带&lt;&gt;为标签，不带为属性）</th><th>子标签和属性</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;origin&gt;</code>（可选）</td><td></td><td>位置和姿态</td></tr><tr><td></td><td><code>xyz</code>（可选）</td><td>x、y、z的偏移，以米为单位。</td></tr><tr><td></td><td><code>rpy</code>（可选）</td><td>x、y、z的旋转，以弧度为单位</td></tr><tr><td><code>&lt;mass&gt;</code></td><td><code>value</code></td><td>质量</td></tr><tr><td><code>&lt;inertia&gt;</code></td><td><code>ixx</code></td><td></td></tr><tr><td></td><td><code>ixy</code></td><td></td></tr><tr><td></td><td><code>ixz</code></td><td></td></tr><tr><td></td><td><code>iyy</code></td><td></td></tr><tr><td></td><td><code>iyz</code></td><td></td></tr><tr><td></td><td><code>izz</code></td><td></td></tr><tr><td><code>&lt;geometry&gt;</code>（必填）</td><td></td><td></td></tr><tr><td></td><td><code>&lt;box&gt;</code></td><td>长方体<br /><code>size</code>属性对应长宽高</td></tr><tr><td></td><td><code>&lt;cylinder&gt;</code></td><td>圆柱体<br /><code>radius</code>对应半径<br /><code>length</code>对应高度</td></tr><tr><td></td><td><code>&lt;sphere&gt;</code></td><td>球体<br /><code>radius</code>对应半径</td></tr><tr><td></td><td><code>&lt;mesh&gt;</code></td><td>外部文件引入<br /><code>filename</code>设置外部文件<br /><code>scale</code>设置缩放比例</td></tr><tr><td><code>&lt;material&gt;</code>（可选）</td><td></td><td>纹理外观</td></tr><tr><td></td><td><code>name</code></td><td>名称</td></tr><tr><td></td><td><code>&lt;color&gt;</code></td><td>颜色<br /><code>rgba</code>设置颜色值，取值[0, 1]</td></tr><tr><td></td><td><code>&lt;texture&gt;</code></td><td>外部文件引入<br /><code>filename</code>设置外部文件</td></tr></tbody></table><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="长方体"><a href="#长方体" class="headerlink" title="长方体"></a>长方体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 2 3&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建了一个简单的长方体，长宽高分别为1、2、3。</p></blockquote><h4 id="圆柱"><a href="#圆柱" class="headerlink" title="圆柱"></a>圆柱</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_cylinder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">&quot;1&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建了一个简单的圆柱，长度为<code>1</code>，半径为<code>0.5</code></p></blockquote><h4 id="球体"><a href="#球体" class="headerlink" title="球体"></a>球体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_cylinder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建一个简单的球体，半径为<code>0.5</code>。</p></blockquote><h4 id="Mesh-加载自定义的文件"><a href="#Mesh-加载自定义的文件" class="headerlink" title="Mesh 加载自定义的文件"></a>Mesh 加载自定义的文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_mesh&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">&quot;package://demo_urdf/meshes/bowl.dae&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>从文件中读取形状，使用<code>package</code>开头，一般将对应的纹理文件<code>dae</code>放在文件夹<code>meshes</code>中。</p></blockquote><h4 id="位置和姿势"><a href="#位置和姿势" class="headerlink" title="位置和姿势"></a>位置和姿势</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.1 0.2 0.3&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.57 1.57 1.57&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">origin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 2 3&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>origin</code>的<code>xyz</code>控制位置，<code>rpy</code>控制姿态，旋转遵循<code>右手螺旋法则</code></p></blockquote><h4 id="设置视觉纹理"><a href="#设置视觉纹理" class="headerlink" title="设置视觉纹理"></a>设置视觉纹理</h4><ol><li>内部设置的方式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 2 3&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 0 0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>外部设置的方式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 0 0 1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 2 3&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>建议使用第二种方式，因为一个颜色很有可能在多个地方需要使用。</p></blockquote><h2 id="joint"><a href="#joint" class="headerlink" title="joint"></a><a href="http://wiki.ros.org/urdf/XML/joint">joint</a></h2><h3 id="各标签-1"><a href="#各标签-1" class="headerlink" title="各标签"></a>各标签</h3><table><thead><tr><th>子标签或属性<br />（带&lt;&gt;为标签，不带为属性）</th><th>子标签和属性</th><th>描述</th><th>是否理解</th></tr></thead><tbody><tr><td><code>name</code>（必填）</td><td></td><td>用于描述<code>joint</code>的名称</td><td>√</td></tr><tr><td><code>type</code>（必填）</td><td></td><td>用于描述<code>joint</code>的类型：<br />1. <code>fixed</code>：固定关节<br />2. <code>revolute</code>：限制旋转关节<br />3. <code>continuous</code>：无限旋转关节<br />4. <code>prismatic</code>：滑动关节<br />5. <code>floating</code>：悬浮关节<br />6. <code>planar</code>：2T1R</td><td>√</td></tr><tr><td><code>&lt;origin&gt;</code>（可选）</td><td></td><td>位置和姿态</td><td>√</td></tr><tr><td></td><td><code>xyz</code>（可选）</td><td>x、y、z的偏移，以米为单位。</td><td>√</td></tr><tr><td></td><td><code>rpy</code>（可选）</td><td>x、y、z的旋转，以弧度为单位</td><td>√</td></tr><tr><td><code>&lt;parent&gt;</code>（必填）</td><td></td><td>被连接的那个<code>link</code></td><td>√</td></tr><tr><td></td><td><code>link</code></td><td><code>link</code>的名称</td><td>√</td></tr><tr><td><code>&lt;child&gt;</code>（必填）</td><td></td><td>连接的<code>link</code></td><td>√</td></tr><tr><td></td><td><code>link</code></td><td><code>link</code>的名称</td><td>√</td></tr><tr><td><code>&lt;axis&gt;</code>（可选）</td><td></td><td>指定的关节轴</td><td>√</td></tr><tr><td></td><td><code>xyz</code>（必填）</td><td>x、y、z 偏移或旋转</td><td>√</td></tr><tr><td><code>&lt;calibration&gt;</code>（可选）</td><td></td><td>校准位置</td><td></td></tr><tr><td></td><td><code>rising</code>（可选）</td><td>上升沿</td><td></td></tr><tr><td></td><td><code>falling</code>（可选）</td><td>下降沿</td><td></td></tr><tr><td><code>&lt;dynamics&gt;</code>（可选）</td><td></td><td>动力</td><td></td></tr><tr><td></td><td><code>damping</code>（可选）</td><td>物理阻尼</td><td></td></tr><tr><td></td><td><code>friction</code>（可选）</td><td>物理静摩擦力</td><td></td></tr><tr><td><code>&lt;limit&gt;</code><br />(可选，<code>revolute</code>和<code>prismatic</code>必填)</td><td></td><td>限制约束</td><td>√</td></tr><tr><td></td><td><code>lower</code>（可选）</td><td>下限</td><td>√</td></tr><tr><td></td><td><code>upper</code>（可选）</td><td>上限</td><td>√</td></tr><tr><td></td><td><code>effort</code>（必填）</td><td>最大承受力</td><td>√</td></tr><tr><td></td><td><code>velocity</code>（必填）</td><td>最大速度</td><td>√</td></tr><tr><td><code>&lt;mimic&gt;</code>（可选）</td><td></td><td>模拟现有一个关节<br /><code>value = multi * joint + offset</code></td><td></td></tr><tr><td></td><td><code>joint</code>（必填）</td><td>要模拟的关节</td><td></td></tr><tr><td></td><td><code>multiplier</code><br />（可选）</td><td>乘法因子</td><td></td></tr><tr><td></td><td><code>offset</code>（可选）</td><td>偏移量</td><td></td></tr><tr><td><code>&lt;safety_controller&gt;</code>（可选）</td><td></td><td>安全控制器</td><td></td></tr><tr><td></td><td><code>soft_lower_limit</code><br />（可选）</td><td>限制关节位置的下关节边界</td><td></td></tr><tr><td></td><td><code>soft_upper_limit</code><br />（可选）</td><td>限制关节位置的上关节边界</td><td></td></tr><tr><td></td><td><code>k_position</code><br />（可选）</td><td></td><td></td></tr><tr><td></td><td><code>k_velocity</code><br />（必填）</td><td></td><td></td></tr></tbody></table><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><blockquote><p>在上面的表格中共有六种类型，实际使用中只有4中能使用，<code>fixed</code>、<code>revolute</code>、<code>continuous</code>、<code>prismatic</code>。</p><p>以下都定义了两个link，从而展示例子，只写关节部分代码</p><p>以下为公共区域代码，<code>...</code>表示加入后面的关节代码</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 0 0 1.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;green&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0 1.0 0 1.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.1 0.2 1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;link1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.1 0.2 1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;green&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>关节1的名字为<code>base_link</code>，颜色为红色</li><li>关节2的名字为<code>link1</code>，颜色为绿色</li></ol><h4 id="fixed关节"><a href="#fixed关节" class="headerlink" title="fixed关节"></a>fixed关节</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint0&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 1&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;link1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>该关节仅仅起到连接作用</p></blockquote><h4 id="revolute-关节"><a href="#revolute-关节" class="headerlink" title="revolute 关节"></a>revolute 关节</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint0&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 1&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;link1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;30&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;-3.14&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;3.14&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>旋转关节，必须要加上限制约束，因为该关节有限制条件。</p></blockquote><h4 id="continuous-关节"><a href="#continuous-关节" class="headerlink" title="continuous 关节"></a>continuous 关节</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint0&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 1&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;link1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>旋转关节，没有限制约束，无限旋转</p></blockquote><h4 id="prismatic-关节"><a href="#prismatic-关节" class="headerlink" title="prismatic 关节"></a>prismatic 关节</h4><joint name="joint0" type="prismatic">    <origin xyz="0 0 1" rpy="0 0 0"/>    <axis xyz="1 0 0"/>    <parent link="base_link"/>    <child link="link1"/><p>​    <limit effort="30" velocity="1.0" lower="-10" upper="10" /><br></joint>-</p><blockquote><p>平移关节，必须加限制约束。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>如果需要多自由度，可以加入多关节，必须说6自由度，可以加3个旋转和3个平移，分别对应x、y、z三个不同的方向即可。</p><h2 id="launch-启动文件"><a href="#launch-启动文件" class="headerlink" title="launch 启动文件"></a>launch 启动文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> <span class="attr">default</span>=<span class="string">&quot;geometry_box.urdf&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;rvizconfig&quot;</span> <span class="attr">default</span>=<span class="string">&quot;$(find demo_urdf)/rviz/urdf.rviz&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro --inorder $(find demo_urdf)/urdf/$(arg model)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;use_gui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg gui)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(arg rvizconfig)&quot;</span> <span class="attr">required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>arg</code>：大致相当于设置变量</li><li><code> find</code>：查找package</li></ol>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> roslaunch </tag>
            
            <tag> URDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV 和 ROS 一起使用的一些坑</title>
      <link href="/2019/e4bbffed.html"/>
      <url>/2019/e4bbffed.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>单独使用OpenCV的时候遇到了之前因为安装 ROS 而导致的一些坑点。</p><p>故记录下来。</p></blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p> 使用了 <code>Anaconda</code> 的虚拟环境，并且确认已经安装过 OpenCV</p><p>运行 Python，直接 xxx（不可描述）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;home&#x2F;askeynil&#x2F;Desktop&#x2F;cv&#x2F;class&#x2F;1. demo.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    import cv2 as cv</span><br><span class="line">ImportError: &#x2F;opt&#x2F;ros&#x2F;kinetic&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;cv2.so: undefined symbol: PyCObject_Type</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>若只想看解决办法，请直接<a href="#%E6%80%BB%E7%BB%93">点我</a></p></blockquote><h2 id="问题研究"><a href="#问题研究" class="headerlink" title="问题研究"></a>问题研究</h2><ol><li>查看问题</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　错误信息</span></span><br><span class="line">ImportError: /opt/ros/kinetic/lib/python2.7/dist-packages/cv2.so: undefined symbol: PyCObject_Type</span><br></pre></td></tr></table></figure><ol start="2"><li><p>很明显，ROS 在干坏事。</p></li><li><p>可是明明用了 Anaconda 的虚拟环境，为何会引用ROS的库，而且使用的是Python3为何会使用Python2.7里面的库。</p></li><li><p>回想ROS干过啥</p></li><li><p>在 <code>~/.zshrc</code> 中添加了一句话 <code>source /opt/ros/kinetic/setup.zsh</code> （我使用的是 <code>zsh</code> ，如果使用<code>bash</code>，应该是在 <code>~/.bashrc</code> 中添加了 <code>source /opt/ros/kinetic/setup.bash</code> ，一个道理）</p></li><li><p>然后又是 <code>Python</code> 找库找的不对，这时候应该想到 <code>PYTHONPATH</code> 环境变量</p></li></ol><blockquote><p>解释一下， <code>PYTHONPATH</code> 环境变量就是 <code>Python</code> 去 import 的时候的搜索路径。</p></blockquote><ol start="7"><li>首先打印一下当前的 <code>PYTHONPATH</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PYTHONPATH</span></span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line"><span class="comment"># /opt/ros/kinetic/lib/python2.7/dist-packages</span></span><br></pre></td></tr></table></figure><ol start="8"><li>果然，ROS就没干好事。。</li><li>解决方法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 在 ~/.zshrc 或 ~/.bashrc 中将 PYTHONPATH 置为空</span></span><br><span class="line">PYTHONPATH=</span><br><span class="line"><span class="comment"># 2. 或者果断点，将 source /opt/ros/kinetic/setup.zsh 或 source /opt/ros/kinetic/setup.bash 删掉</span></span><br></pre></td></tr></table></figure><blockquote><p>因为我还想着使用 ROS，所以我采用了方式1，因为用了方式2，ROS肯定就用不了啦。</p></blockquote><h2 id="问题再现"><a href="#问题再现" class="headerlink" title="问题再现"></a>问题再现</h2><blockquote><p>使用 <code>roscore</code> ，出现了问题。</p><p>提示如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/opt/ros/kinetic/bin/roscore&quot;</span>, line 36, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from rosmaster.master_api import NUM_WORKERS</span><br><span class="line">ImportError: No module named rosmaster.master_api</span><br></pre></td></tr></table></figure><h2 id="问题再探"><a href="#问题再探" class="headerlink" title="问题再探"></a>问题再探</h2><ol><li>好吧，这会轮到找不到 ROS 的依赖库了。</li><li>这可咋办，我作为一个懒人代表，不想每次使用都去注释一下。</li><li>ROS 需要自己的依赖库，也就是 <code>/opt/ros/kinetic/lib/python2.7/dist-packages</code> 这里面的东西。</li><li>解决办法很简单，只要在 <code>roscore</code> 之前将它加上就行。</li><li>起初想法是写一个脚本，然后取添加 <code>source</code> ，感觉过于麻烦。</li><li>然后想到大名鼎鼎的 <code>alias</code> 命令。</li><li>然后便有了以下的解决办法。</li><li>在 <code>~/.zshrc</code> 或 <code>~/.bashrc</code> 中添加如下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> roscore=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;roscore&#x27;</span></span><br></pre></td></tr></table></figure><ol start="9"><li>此后，<code>roscore</code> 的使用毫无问题了。</li><li>但是，新建一个终端的时候，我不可能再一次 <code>roscore</code> 吧，我要使用 <code>rosrun</code> 或者 <code>catkin_make</code> 怎么办？</li><li>那就都加上就好了，所以命令变成了如下的三句话：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> roscore=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;roscore&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> catkin_make=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;catkin_make&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rosrun=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;rosrun&#x27;</span></span><br></pre></td></tr></table></figure><ol start="12"><li><p>大功告成。</p></li><li><p>最后，突然想到，在日常使用的时候，经常需要在 <code>catkin_make</code> 之后使用 <code>source devel/setup.zsh</code></p></li><li><p>懒人做到底。。然后就又改成了如下三句话：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> roscore=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;roscore&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> catkin_make=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;catkin_make;source devel/setup.zsh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rosrun=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;rosrun&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="问题又现"><a href="#问题又现" class="headerlink" title="问题又现"></a>问题又现</h2><h3 id="catkin-make-help异常"><a href="#catkin-make-help异常" class="headerlink" title="catkin_make --help异常"></a><code>catkin_make --help</code>异常</h3><ol><li><p>解决办法：</p><p>删掉 <code>alias catkin_make=&#39;source /opt/ros/kinetic/setup.zsh;catkin_make;source devel/setup.zsh&#39;</code> 中的 <code>;source devel/setup.zsh</code></p></li><li><p>总结：</p><p>还是不能太偷懒啊。。。</p></li></ol><h3 id="rosrun-一直出现找不到-package"><a href="#rosrun-一直出现找不到-package" class="headerlink" title="rosrun 一直出现找不到 package"></a>rosrun 一直出现找不到 package</h3><ol><li>查看 <code>PYTHONPATH</code> 发现 <code>rosrun</code> 之后只有一个 <code>PYTHONPATH</code></li><li>发现 <code>source /opt/ros/kinetic/setup.zsh</code> 会将当前工作工作空间的 <code>PYTHONPATH</code> 环境给删除掉，ROS很傻吊</li></ol><p>解决办法：</p><p>删掉原本的 <code>alias rosrun</code></p><p>更改命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> rosrun=<span class="string">&#x27;echo $PYTHONPATH | grep -q &quot;ros&quot; || source /opt/ros/kinetic/setup.bash;rosrun&#x27;</span></span><br><span class="line"><span class="comment"># 为了以防万一，添加下面这句话</span></span><br><span class="line"><span class="built_in">alias</span> rossource=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ROS 和 OpenCV 的坑使用以下方式就可以完美解决</p><ol><li><p>删掉原本在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 中的 <code>source /opt/ros/kinetic/setup.bash</code> 或 <code>source /opt/ros/kinetic/setup.zsh</code></p></li><li><p>在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 中添加如下代码：(<strong>注意选择对应版本</strong>)</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zsh 版本</span></span><br><span class="line"><span class="built_in">alias</span> roscore=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;roscore&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> catkin_make=<span class="string">&#x27;echo $PYTHONPATH | grep -q &quot;ros&quot; || source /opt/ros/kinetic/setup.zsh;catkin_make&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rosrun=<span class="string">&#x27;echo $PYTHONPATH | grep -q &quot;ros&quot; || source /opt/ros/kinetic/setup.zsh;rosrun&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rossource=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bash 版本</span></span><br><span class="line"><span class="built_in">alias</span> roscore=<span class="string">&#x27;source /opt/ros/kinetic/setup.bash;roscore&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> catkin_make=<span class="string">&#x27;echo $PYTHONPATH | grep -q &quot;ros&quot; || source /opt/ros/kinetic/setup.bash;catkin_make&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rosrun=<span class="string">&#x27;echo $PYTHONPATH | grep -q &quot;ros&quot; || source /opt/ros/kinetic/setup.bash;rosrun&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rossource=<span class="string">&#x27;source /opt/ros/kinetic/setup.bash&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>万事大吉，重启终端！</li></ol>]]></content>
      
      
      <categories>
          
          <category> BugFix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> OpenCV </tag>
            
            <tag> Python </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV 之特征匹配</title>
      <link href="/2019/b1861ead.html"/>
      <url>/2019/b1861ead.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所有代码，只使用<code>C++</code>实现，Python类似，甚至更加简单，暂不做实现。</p></blockquote><h2 id="特征检测"><a href="#特征检测" class="headerlink" title="特征检测"></a>特征检测</h2><p>特征检测常用的算法有:</p><ol><li>SIFT（尺度不变特征变换）</li><li>SURF（加速鲁棒特征）</li><li>ORB</li></ol><blockquote><p><code>SIFT</code>和<code>SURF</code>已经申请了专利，在OpenCV中使用需要付费，所以不做讨论。</p></blockquote><a id="more"></a><p>以下为ORB的基本用法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Mat src = imread(<span class="string">&quot;./img/blox.jpg&quot;</span>), gray;</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line"><span class="comment">// 创建 orb 检测器</span></span><br><span class="line"><span class="keyword">auto</span> orb = ORB::create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orb 查找特征点</span></span><br><span class="line"><span class="built_in">vector</span>&lt;KeyPoint&gt; keyPoints;</span><br><span class="line">orb-&gt;detect(gray, keyPoints);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orb 计算描述符</span></span><br><span class="line">Mat desc;</span><br><span class="line">orb-&gt;compute(gray, keyPoints, desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找特征点和计算描述符也可以归为一步</span></span><br><span class="line"><span class="comment">// orb-&gt;detectAndCompute(src, Mat(), keyPoints, desc);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制特征点</span></span><br><span class="line">drawKeypoints(src, keyPoints, src);</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line">waitKey();</span><br><span class="line">destroyAllWindows();</span><br></pre></td></tr></table></figure><p><img src="/img/OpenCV/orb.jpg" alt="orb"></p><blockquote><p>以上几乎为固定写法，如果是多图，<code>detect</code>和<code>compute</code>可以传多个数据进行匹配。得到多个<code>keyPoints</code>和<code>desc</code></p></blockquote><h2 id="特征匹配之BFMatcher"><a href="#特征匹配之BFMatcher" class="headerlink" title="特征匹配之BFMatcher"></a>特征匹配之BFMatcher</h2><blockquote><p>Brute-Force Matcher（BF Matcher）可以翻译成野蛮匹配器，它的步骤是先选取第一个图片特征集合的一个特征描述符，然后匹配另一个集合的所有特征，通过一些距离算法得到一个最近的距离distance。</p></blockquote><h3 id="查找特征点和描述符"><a href="#查找特征点和描述符" class="headerlink" title="查找特征点和描述符"></a>查找特征点和描述符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mat img1 = imread(<span class="string">&quot;./img/box.png&quot;</span>), gray1;</span><br><span class="line">Mat img2 = imread(<span class="string">&quot;./img/box_in_scene.png&quot;</span>), gray2;</span><br><span class="line">cvtColor(img1, gray1, COLOR_BGR2GRAY);</span><br><span class="line">cvtColor(img2, gray2, COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 orb 检测器</span></span><br><span class="line"><span class="keyword">auto</span> orb = ORB::create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orb 查找特征点和计算描述符</span></span><br><span class="line"><span class="built_in">vector</span>&lt;KeyPoint&gt; keyPoints1, keyPoints2;</span><br><span class="line">Mat desc1, desc2;</span><br><span class="line">orb-&gt;detectAndCompute(img1, Mat(), keyPoints1, desc1);</span><br><span class="line">orb-&gt;detectAndCompute(img2, Mat(), keyPoints2, desc2);</span><br></pre></td></tr></table></figure><h3 id="创建并使用BFMatcher"><a href="#创建并使用BFMatcher" class="headerlink" title="创建并使用BFMatcher"></a>创建并使用BFMatcher</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建 BFMatcher，开启crossCheck获取更精确的结果</span></span><br><span class="line"><span class="keyword">auto</span> matcher = BFMatcher::create(NORM_HAMMING, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// BFMatcher::create 函数需要两个参数，第一个是normType，第二个为crossCheck</span></span><br><span class="line"><span class="comment">// 1. normType</span></span><br><span class="line"><span class="comment">// 指定距离测量的规则，默认值是NORM_L2，该值一般与NORM_L1用在SIFT和SURF检测中。</span></span><br><span class="line"><span class="comment">// 如果我们使用ORB检测，我们需要将该值设置为 NORM_HAMMING2。</span></span><br><span class="line"><span class="comment">// 2. crossCheck</span></span><br><span class="line"><span class="comment">// 交叉检查，默认为 false，设置该值为 true 来获取更精确的结果。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比两张图的特征，进行匹配</span></span><br><span class="line"><span class="built_in">vector</span>&lt;DMatch&gt; matches;</span><br><span class="line">matcher-&gt;match(desc1, desc2, matches);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据评分排序，从小到大，因为越小越精确</span></span><br><span class="line">sort(matches.<span class="built_in">begin</span>(), matches.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除较差的匹配结果，只保留前百分之15的结果</span></span><br><span class="line"><span class="keyword">double</span> percent = <span class="number">0.15</span>;</span><br><span class="line"><span class="keyword">int</span> num = matches.<span class="built_in">size</span>() * percent;</span><br><span class="line"><span class="comment">// 至少保留十个结果</span></span><br><span class="line">num = <span class="built_in">max</span>(num, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 matches 进行裁剪</span></span><br><span class="line">matches.assign(matches.<span class="built_in">begin</span>(), matches.<span class="built_in">begin</span>() + num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制图形</span></span><br><span class="line">Mat dst;</span><br><span class="line">drawMatches(img1, keyPoints1, img2, keyPoints2, matches, dst);</span><br><span class="line"><span class="comment">// 绘制图形的时候，可以将最后一个参数，flags</span></span><br><span class="line"><span class="comment">// 设置为 DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS 从而只显示匹配成功的点。</span></span><br></pre></td></tr></table></figure><blockquote><p><code>DMatch</code>类的一些参数</p><ol><li><code>distance</code>：描述符之间的距离，值越小越好</li><li><code>trainIdx</code>：描述符在<code>train</code>图片中的索引</li><li><code>queryIdx</code>：描述符在<code>query</code>图片中的索引</li><li><code>imgIdx</code>：<code>train</code>图片的索引</li></ol></blockquote><p><img src="/img/OpenCV/bf.jpg" alt="bf"></p><h2 id="特征匹配之FLANN"><a href="#特征匹配之FLANN" class="headerlink" title="特征匹配之FLANN"></a>特征匹配之FLANN</h2><blockquote><p>FLANN是Fast Library for Approximate Nearest Neighbors.的缩写。快速近似最近邻搜索库。 它包含一组算法，这些算法针对大型数据集中的快速最近邻搜索和高维特征进行了优化。对于大型数据集，它的运行速度比BFMatcher更快。</p></blockquote><h3 id="查找特征点和描述符-1"><a href="#查找特征点和描述符-1" class="headerlink" title="查找特征点和描述符"></a>查找特征点和描述符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mat img1 = imread(<span class="string">&quot;./img/box.png&quot;</span>), gray1;</span><br><span class="line">Mat img2 = imread(<span class="string">&quot;./img/box_in_scene.png&quot;</span>), gray2;</span><br><span class="line">cvtColor(img1, gray1, COLOR_BGR2GRAY);</span><br><span class="line">cvtColor(img2, gray2, COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 orb 检测器</span></span><br><span class="line"><span class="keyword">auto</span> orb = ORB::create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orb 查找特征点和计算描述符</span></span><br><span class="line"><span class="built_in">vector</span>&lt;KeyPoint&gt; keyPoints1, keyPoints2;</span><br><span class="line">Mat desc1, desc2;</span><br><span class="line">orb-&gt;detectAndCompute(img1, Mat(), keyPoints1, desc1);</span><br><span class="line">orb-&gt;detectAndCompute(img2, Mat(), keyPoints2, desc2);</span><br></pre></td></tr></table></figure><h3 id="创建并使用FLANN"><a href="#创建并使用FLANN" class="headerlink" title="创建并使用FLANN"></a>创建并使用FLANN</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 indexPar 和 searchPar</span></span><br><span class="line"><span class="comment">// 当前使用 ORB 检测器，indexPar 使用LshIndexParams 参数默认给6,12，1</span></span><br><span class="line"><span class="keyword">auto</span> indexPar = makePtr&lt;flann::LshIndexParams&gt;(<span class="number">6</span>, <span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 检索参数，数值越大越准确，但是也越耗时</span></span><br><span class="line"><span class="keyword">auto</span> searchPar = makePtr&lt;flann::SearchParams&gt;(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 使用 indexpar 和 searchPar 创建 flannMatcher</span></span><br><span class="line"><span class="function">FlannBasedMatcher <span class="title">flannMatcher</span><span class="params">(indexPar, searchPar)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;DMatch&gt;&gt; matches;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; matchesMask;</span><br><span class="line"><span class="comment">// 本例子使用 knnMatch， k 设置为 2</span></span><br><span class="line">flannMatcher.knnMatch(desc1, desc2, matches, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matches.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    DMatch first = matches[i][<span class="number">0</span>], last = matches[i][<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 第一个小于第二个的百分之80，舍去该值。这个比例根据不同的图片要进行一些微调。</span></span><br><span class="line">    <span class="keyword">if</span> (first.distance &lt; <span class="number">0.8</span> * last.distance) &#123;</span><br><span class="line">        matchesMask.push_back(&#123;<span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        matchesMask.push_back(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mat dst;</span><br><span class="line"><span class="comment">// 使用 Mask 掩码来输出图像</span></span><br><span class="line">drawMatches(img1, keyPoints1, img2, keyPoints2, matches, dst,</span><br><span class="line">            Scalar::all(<span class="number">-1</span>), Scalar::all(<span class="number">-1</span>), matchesMask,</span><br><span class="line">            DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS);</span><br></pre></td></tr></table></figure><p><img src="/img/OpenCV/flann.jpg" alt="flann"></p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV 之角点检测</title>
      <link href="/2019/b202f100.html"/>
      <url>/2019/b202f100.html</url>
      
        <content type="html"><![CDATA[<h2 id="哈里斯角点检测"><a href="#哈里斯角点检测" class="headerlink" title="哈里斯角点检测"></a>哈里斯角点检测</h2><blockquote><p>克里斯·哈里斯（Chris Harris）和迈克·史蒂芬斯（Mike Stephens）在1988年的论文《组合式拐角和边缘检测器》（《A Combined Corner and Edge Detector》）中做了一次找到这些拐角的尝试，所以现在将其称为哈里斯拐角检测器。这篇论文把这个简单的想法变成了数学形式。它基本上找到了在所有方向上位移的强度差异。</p></blockquote><p><a href="https://docs.opencv.org/3.4.2/dd/d1a/group__imgproc__feature.html#gac1fc3598018010880e370e2f709b4345">官方api解释直达</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cornerHarris(src, dst, blockSize, ksize, k)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：必须是单通道灰度图</li><li><code>dst</code>：返回类型是<code>CV_32FC1</code>，大小与 <code>src</code> 相同。</li><li><code>blockSize</code>：角点检测考虑的领域大小，<code>int类型</code></li><li><code>kszie</code>：Sobel算子的大小，<code>int类型</code></li><li><code>k</code>：自由度参数，值越小检测出的结果越多。<code>double类型</code></li></ol><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mat gray, points;</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">cornerHarris(gray, points, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0.04</span>);</span><br><span class="line"><span class="keyword">double</span> points_max;</span><br><span class="line">src.copyTo(dst);</span><br><span class="line">minMaxLoc(points, <span class="literal">nullptr</span>, &amp;points_max);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dst.<span class="built_in">size</span>().<span class="built_in">height</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dst.<span class="built_in">size</span>().<span class="built_in">width</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (points.at&lt;<span class="keyword">float</span>&gt;(i, j) &gt; <span class="number">0.01</span> * points_max) &#123;</span><br><span class="line">            dst.at&lt;Vec3b&gt;(i, j) = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/OpenCV/harris.jpg" alt="harris"></p><h3 id="史-托马斯角点检测"><a href="#史-托马斯角点检测" class="headerlink" title="史-托马斯角点检测"></a>史-托马斯角点检测</h3><blockquote><p>J. Shi 和 C. Tomasi 在其论文 <strong>《Good Features to Track》</strong> 中对其进行了小的修改，与Harris Corner Detector相比，该方法表现出出更好的结果。</p></blockquote><p><a href="https://docs.opencv.org/3.4.2/dd/d1a/group__imgproc__feature.html#ga1d6bb77486c8f92d79c8793ad995d541">官方api解释直达</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goodFeaturesToTrack(src, corners, maxCorners, qualityLevel, minDistance)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：8位单通道或者32位浮点单通道图像</li><li><code>corners</code>：检测到的角的点集，类型为<code>vector&lt;Point&gt;</code></li><li><code>maxCorners</code>：最大角数</li><li><code>qualityLevel</code>：最低接收的质量百分比</li><li><code>minDistance</code>：点之间的最小距离</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Mat gray;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; points;</span><br><span class="line">src.copyTo(dst);</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">goodFeaturesToTrack(gray, points, <span class="number">25</span>, <span class="number">0.01</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    <span class="built_in">circle</span>(dst, points[i], <span class="number">3</span>, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>&#125;, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/OpenCV/shiTomasi.jpg" alt="shiTomasi"></p><blockquote><p>完整代码：<a href="https://github.com/AskeyNil/BlogCode/blob/master/OpenCV/cc/CornerDetector.cc">https://github.com/AskeyNil/BlogCode/blob/master/OpenCV/cc/CornerDetector.cc</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 命令之查找</title>
      <link href="/2019/fafe7b6d.html"/>
      <url>/2019/fafe7b6d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下所有命令仅仅只做常见用法的介绍，不做详细的参数介绍</p><p>如需详细介绍，可到 <a href="https://man.linuxde.net/">https://man.linuxde.net</a> 查阅</p><p>以下的显示结果均为使用 <code>oh-my-zsh</code> 的显示结果，如果是使用 <code>bash</code> 可能略有差异</p><blockquote><p><strong>注意</strong>：zsh 默认情况下不支持<code>*</code>通配符匹配，需要在<code>~/.zshrc</code>中添加<code>setopt nonomatch</code>即可。</p></blockquote></blockquote><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><blockquote><p><strong>which命令</strong>用于查找并显示给定命令的绝对路径，环境变量PATH中保存了查找命令时需要遍历的目录。</p></blockquote><p>一般使用过程中直接使用<code>which 命令</code>即可：</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> python</span><br><span class="line"><span class="comment"># /usr/bin/python</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><blockquote><p><strong>whereis命令</strong>用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径</p><p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p></blockquote><p>一般用来查找都在哪些目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">where</span> bash</span><br><span class="line"><span class="comment"># bash: /bin/bash /etc/bash.bashrc /usr/share/man/man1/bash.1.gz</span></span><br></pre></td></tr></table></figure><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><blockquote><p><strong>grep</strong>是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p></blockquote><ol><li>在文件中查找一个字符串（在 <code>main.cc</code> 中查找 <code>binary</code>）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;binary&quot;</span> main.cc</span><br><span class="line"><span class="comment">#    Mat binary; （注意：此时的binary会标红显示）</span></span><br><span class="line"><span class="comment"># 如果是多个文件，后面添加文件名即可，在查找的位置前方会显示文件查找到文件的名称</span></span><br><span class="line"><span class="comment"># 比如说</span></span><br><span class="line">grep <span class="string">&quot;binary&quot;</span> main.cc demo.cc</span><br><span class="line"><span class="comment"># 类似这样：（在我的 shell 中，前面的 main.cc 标为紫色，binary 标为红色）</span></span><br><span class="line"><span class="comment"># main.cc:    Mat binary;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然 shell 中的 * 语法在这里也是适用的，例如匹配所有以 cc 为后缀的文件</span></span><br><span class="line">grep <span class="string">&quot;binary&quot;</span> *.cc</span><br></pre></td></tr></table></figure><ol start="2"><li>正则匹配（在<code>main.cc</code>中查找<code>&quot;&quot;</code>包裹起来的内容）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正则匹配适用 -E 关键字</span></span><br><span class="line">grep -E <span class="string">&quot;\&quot;.*\&quot;&quot;</span> main.cc</span><br><span class="line"><span class="comment"># #include &quot;opencv2/opencv.hpp&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>只显示匹配到的部分</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -o</span></span><br><span class="line">grep -o <span class="string">&quot;binary&quot;</span> main.cc</span><br><span class="line"><span class="comment"># binary</span></span><br><span class="line"><span class="comment"># 上面这种做法似乎没有意义，计数好像有点用处</span></span><br><span class="line"><span class="comment"># 该参数可以用在正则匹配的时候，直接打印匹配出来的字符串，不需要显示其他的无关信息</span></span><br><span class="line"><span class="comment"># 比如：</span></span><br><span class="line">grep -oE <span class="string">&quot;\&quot;.*\&quot;&quot;</span> main.cc</span><br><span class="line"><span class="comment"># &quot;opencv2/opencv.hpp&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>输出行号，统计行数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出行号 参数 -n</span></span><br><span class="line">grep -nE <span class="string">&quot;\&quot;.*\&quot;&quot;</span> main.cc</span><br><span class="line"><span class="comment"># 在我的 shell 中 1 使用的是绿色数字显示，即行号用绿色数字显示</span></span><br><span class="line"><span class="comment"># 1:#include &quot;opencv2/opencv.hpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计行数 参数 -c</span></span><br><span class="line">grep -cE <span class="string">&quot;\&quot;.*\&quot;&quot;</span> main.cc</span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure><ol start="5"><li>忽略大小写匹配</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -i</span></span><br><span class="line">grep -i <span class="string">&quot;BINARY&quot;</span> main.cc</span><br><span class="line"><span class="comment">#     Mat binary;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>只输出匹配到的文件名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -l</span></span><br><span class="line">grep -l <span class="string">&quot;binary&quot;</span> *.cc</span><br><span class="line"><span class="comment"># main.cc</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><ol start="7"><li>递归文件夹查找（在当前目录递归查找：”binary”）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -r</span></span><br><span class="line">grep -r <span class="string">&quot;binary&quot;</span> .</span><br><span class="line"><span class="comment">#     Mat binary;</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 此时可能会提示一些错误信息，比如当前文件夹下面有一个二进制文件等等，我们要忽略其错误信息</span></span><br><span class="line"><span class="comment"># 忽略错误信息     参数 -s</span></span><br><span class="line"><span class="comment"># 忽略二进制文件   参数 -I</span></span><br></pre></td></tr></table></figure><ol start="8"><li>匹配多个不同的字符串（查找 main.cc 文件中 binary 和 main 字符串）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 通过正则实现</span></span><br><span class="line">grep -E <span class="string">&quot;binary|main&quot;</span> main.cc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 通过参数 -e 实现</span></span><br><span class="line">grep -e <span class="string">&quot;binary&quot;</span> -e <span class="string">&quot;main&quot;</span> main.cc</span><br></pre></td></tr></table></figure><ol start="9"><li>包括和排除指定文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般我们可以是用 *.后缀 来包括指定文件，但是如果在递归操作的时候不足以支持我们的操作</span></span><br><span class="line"><span class="comment"># 我们可以使用三个关键字来进行该操作</span></span><br><span class="line"><span class="comment"># 1. --include 包含...文件</span></span><br><span class="line">grep -Ir <span class="string">&quot;binary&quot;</span> . --include=*.cc</span><br><span class="line"><span class="comment"># 如果是多个</span></span><br><span class="line">grep -Ir <span class="string">&quot;binary&quot;</span> . --include=*.&#123;cc,cmake&#125;</span><br><span class="line"><span class="comment"># 2. --exclude 排除...文件</span></span><br><span class="line">grep -Ir <span class="string">&quot;binary&quot;</span> . --exclude=*.cmake</span><br><span class="line"><span class="comment"># 3. --exclude-dir 排除...文件夹里的文件</span></span><br><span class="line">grep -Ir <span class="string">&quot;binary&quot;</span> . --exclude-dir=build</span><br></pre></td></tr></table></figure><ol start="10"><li>静默输出（一般用来判断是否查找到）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -q</span></span><br><span class="line">grep -q <span class="string">&quot;binary&quot;</span> main.cc</span><br><span class="line"><span class="comment"># 该参数一般用来条件测试，成功返回0，失败返回非0</span></span><br></pre></td></tr></table></figure><h3 id="整理归类"><a href="#整理归类" class="headerlink" title="整理归类"></a>整理归类</h3><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>-E</code></td><td>正则匹配</td></tr><tr><td><code>-o</code></td><td>只显示匹配到的部分</td></tr><tr><td><code>-n</code></td><td>输出行号</td></tr><tr><td><code>-c</code></td><td><code>统计行数</code></td></tr><tr><td><code>-i</code></td><td>忽略大小写</td></tr><tr><td><code>-l</code></td><td>只输出匹配到的文件名</td></tr><tr><td><code>-r</code></td><td>递归查找</td></tr><tr><td><code>-s</code></td><td>忽略错误信息</td></tr><tr><td><code>-I</code></td><td>忽略二进制文件</td></tr><tr><td><code>-e</code></td><td>匹配多个字符串</td></tr><tr><td><code>--include</code></td><td>包含 … 文件（用等号连接后面的参数）</td></tr><tr><td><code>--exclude</code></td><td>排除 … 文件（用等号连接后面的参数）</td></tr><tr><td><code>--exclude-dir</code></td><td>排除 … 文件夹（用等号连接后面的参数）</td></tr></tbody></table><p>颜色区别：</p><table><thead><tr><th>意义</th><th>颜色</th></tr></thead><tbody><tr><td>匹配到的字符串</td><td>红色</td></tr><tr><td>匹配到的文件名</td><td>紫色</td></tr><tr><td>匹配到的行号</td><td>绿色</td></tr></tbody></table><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><blockquote><p><strong>find命令</strong>用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p></blockquote><ol><li>列出当前目录及子目录下所有文件和文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . </span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>/home</code>目录下查找以<code>py</code>为后缀的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /home -name <span class="string">&quot;*.py&quot;</span></span><br><span class="line"><span class="comment"># 与 grep 一样使用可以使用参数 -i 来忽略大小写</span></span><br><span class="line">find /home -iname <span class="string">&quot;*.py&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>当前目录及子目录查找<code>py</code>和<code>cc</code>结尾的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.py&quot;</span> -o -name <span class="string">&quot;*.cc&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>匹配路径字符串</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　参数 -path</span></span><br><span class="line">find . -name <span class="string">&quot;*src*&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>正则文件匹配</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -regex </span></span><br><span class="line">find . -regex <span class="string">&quot;.*\(py\|cc\)&quot;</span></span><br><span class="line"><span class="comment"># 也可以使用 -i 进行忽略大小写</span></span><br><span class="line">find . -iregex <span class="string">&quot;.*\(py\|cc\)&quot;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>当前目录不是<code>.py</code>为后缀的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ! 否定匹配</span></span><br><span class="line">find . ! -name <span class="string">&quot;*.py&quot;</span></span><br></pre></td></tr></table></figure><h3 id="整理归类-1"><a href="#整理归类-1" class="headerlink" title="整理归类"></a>整理归类</h3><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>-i</code></td><td>忽略大小写查找</td></tr><tr><td><code>-name</code></td><td>查找文件名称</td></tr><tr><td><code>-regex</code></td><td>正则查找</td></tr><tr><td><code>!</code></td><td>否定匹配</td></tr></tbody></table><h2 id="locate-slocate"><a href="#locate-slocate" class="headerlink" title="locate/slocate"></a>locate/slocate</h2><blockquote><p><strong>locate命令</strong>和<strong>slocate命令</strong>都用来查找文件或目录。</p><p>locate命令其实是<code>find -name</code>的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库<code>/var/lib/locatedb</code>，这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用<code>updatedb</code>命令，手动更新数据库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate <span class="string">&quot;*.cc&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NumPy 之 mgrid、ogrid</title>
      <link href="/2019/1df81ffb.html"/>
      <url>/2019/1df81ffb.html</url>
      
        <content type="html"><![CDATA[<h2 id="mgrid"><a href="#mgrid" class="headerlink" title="mgrid"></a>mgrid</h2><blockquote><p>返回密集的多维”网格“实例</p></blockquote><p>用法：<code>np.mgrid[第1维, 第2维, 第3维...]</code></p><p>维度中的写法为<code>a:b:c</code></p><ol><li><code>a</code>，起始索引</li><li><code>b</code>，结束索引</li><li><code>c</code>，步长<ol><li>如果为实数，表示间隔。区间为[a, b)，左闭右开。</li><li>如果为复数，表示个数。区间为[a, b]，左闭右闭。</li></ol></li></ol><a id="more"></a><blockquote><p>网格，顾名思义，就是创建对应点集，下面举例来说明这一点</p></blockquote><h3 id="创建一个一维的索引"><a href="#创建一个一维的索引" class="headerlink" title="创建一个一维的索引"></a>创建一个一维的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.mgrid[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br></pre></td></tr></table></figure><blockquote><p>一维跟arange()其实是一样的，这里就不做过多的介绍了</p></blockquote><h3 id="创建一个二维的索引"><a href="#创建一个二维的索引" class="headerlink" title="创建一个二维的索引"></a>创建一个二维的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">np.mgrid[<span class="number">0</span>:<span class="number">3</span>,<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[[0 0 0]</span></span><br><span class="line"><span class="comment">#   [1 1 1]</span></span><br><span class="line"><span class="comment">#   [2 2 2]]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  [[0 1 2]</span></span><br><span class="line"><span class="comment">#   [0 1 2]</span></span><br><span class="line"><span class="comment">#   [0 1 2]]]</span></span><br></pre></td></tr></table></figure><blockquote><p>其实就是创建了点集</p><ul><li>(0, 0), (0, 1), (0, 2)</li><li>(1, 0), (1, 1), (1, 2)</li><li>(2, 0), (2, 1), (2, 2)</li></ul><p>大概意思就是，第一维所有点映射到二维所有的点。就是所有的一维和二维能形成的全部的点</p></blockquote><h3 id="创建一个三维的索引"><a href="#创建一个三维的索引" class="headerlink" title="创建一个三维的索引"></a>创建一个三维的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">np.mgrid[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># [[[[0 0]</span></span><br><span class="line"><span class="comment">#    [0 0]]</span></span><br><span class="line"><span class="comment">#   [[1 1]</span></span><br><span class="line"><span class="comment">#    [1 1]]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  [[[0 0]</span></span><br><span class="line"><span class="comment">#    [1 1]]</span></span><br><span class="line"><span class="comment">#   [[0 0]</span></span><br><span class="line"><span class="comment">#    [1 1]]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  [[[0 1]</span></span><br><span class="line"><span class="comment">#    [0 1]]</span></span><br><span class="line"><span class="comment">#   [[0 1]</span></span><br><span class="line"><span class="comment">#    [0 1]]]]</span></span><br></pre></td></tr></table></figure><blockquote><p>其实就是创建了点集</p><p>(0, 0, 0), (0, 0,1)</p><p>(0, 1, 0), (0, 1,1)</p><p>(1, 0, 0), (1, 0,1)</p><p>(1, 1, 0), (1, 1,1)</p><p>一维，二维，三维能形成的所有的点</p></blockquote><h3 id="推到到N维"><a href="#推到到N维" class="headerlink" title="推到到N维"></a>推到到N维</h3><blockquote><p>实质上就是创建N维所有能形成的点</p><p>需要注意的是：在所有的例子中没有使用复数的步长，但是要知道的是复数的步长代表将a,b形成的区域等分成若干份，取对应的值，跟实数的每个数相隔的距离不同。</p></blockquote><h2 id="ogrid"><a href="#ogrid" class="headerlink" title="ogrid"></a>ogrid</h2><blockquote><p>返回开放的多维”网格“的实例</p><p>该方法跟mgrid很类似，但不是形成所有的点，而是只形成对应的数据</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.ogrid[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br></pre></td></tr></table></figure><blockquote><p>与上面的一样，没啥好说的。</p></blockquote><h3 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.ogrid[<span class="number">0</span>:<span class="number">3</span>, <span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment"># [array([[0],</span></span><br><span class="line"><span class="comment">#        [1],</span></span><br><span class="line"><span class="comment">#        [2]]), array([[0, 1, 2]])]</span></span><br></pre></td></tr></table></figure><blockquote><p>一共两维，有几维就有几个array，第一个的数据在第一维度，第二个的数据在第二维度，仅仅只有自己维度有数据，推理到多维是一样的。</p></blockquote><p>所以，该方法一般用来创建离散点集或者是离散多个多维数组使用。</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> NumPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV 之硬币分割</title>
      <link href="/2019/bae2941.html"/>
      <url>/2019/bae2941.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>官方例程：<a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_watershed/py_watershed.html?highlight=coins">https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_watershed/py_watershed.html?highlight=coins</a></p></blockquote><h2 id="简单描述"><a href="#简单描述" class="headerlink" title="简单描述"></a>简单描述</h2><p><img src="/img/OpenCV/coins.jpg" alt="coins"></p><ol><li>获取需要分割的图片</li><li>转化为灰度图</li><li>转化为二值图</li><li>转化为距离图</li><li>分离距离图，转化为二值图</li><li>查找距离二值图的轮廓</li><li>给二值图轮廓中的每个点进行颜色标记，从<code>1</code>开始标记</li><li>将标记的图转化为固定类型的标记图（CV_32S类型）</li><li>在标记图中将二值图黑色的区域对应的位置设置标记为轮廓的数量加<code>1</code>。（非常重要，后面介绍）</li><li>使用分水岭算法将标记的图和原图关联起来。</li><li>给标记图中每块标记区域上色</li></ol><a id="more"></a><blockquote><p>话不多说，先贴代码</p></blockquote><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMarkers</span>(<span class="params">distance_binary, binary, isSystem</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isSystem:</span><br><span class="line">        <span class="comment"># 6-8 步 使用 OpenCV 提供的函数替代</span></span><br><span class="line">        compCount, markers = cv.connectedComponents(distance_binary)</span><br><span class="line">        <span class="comment"># 9. 在标记图中将二值图黑色的区域对应的位置设置标记为轮廓数量加 1</span></span><br><span class="line">        <span class="comment"># 注: connectedComponents 函数的返回值就是轮廓数加1</span></span><br><span class="line">        markers[binary == <span class="number">0</span>] = compCount</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 6. 查找距离二值图的轮廓</span></span><br><span class="line">        _, contours, _ = cv.findContours(</span><br><span class="line">            distance_binary, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 7. 给二值图轮廓中的每个点进行颜色标记，从 1 开始标记</span></span><br><span class="line">        compCount = len(contours)</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(compCount):</span><br><span class="line">            cv.drawContours(distance_binary, contours, index, index+<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 8. 将标记的图转化为固定类型的标记图</span></span><br><span class="line">        markers = np.int32(distance_binary)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 9. 在标记图中将二值图黑色的区域对应的位置设置标记为轮廓数量加 1</span></span><br><span class="line">        compCount += <span class="number">1</span></span><br><span class="line">        markers[binary == <span class="number">0</span>] = compCount</span><br><span class="line">    <span class="keyword">return</span> compCount, markers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 获取需要分割的图片</span></span><br><span class="line">src = cv.imread(<span class="string">&quot;./img/coins.jpg&quot;</span>)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 转化为灰度图</span></span><br><span class="line">gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.imshow(<span class="string">&quot;gray&quot;</span>, gray)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 转化为二值图</span></span><br><span class="line">_, binary = cv.threshold(gray, <span class="number">0</span>, <span class="number">255</span>,</span><br><span class="line">                         cv.THRESH_BINARY_INV | cv.THRESH_OTSU)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, binary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 转化为距离图</span></span><br><span class="line">distance = cv.distanceTransform(binary, cv.DIST_L2, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 将距离图标准化到 0,1 之间</span></span><br><span class="line">cv.normalize(distance, distance, <span class="number">0</span>, <span class="number">1.0</span>, cv.NORM_MINMAX)</span><br><span class="line">cv.imshow(<span class="string">&quot;distance&quot;</span>, distance)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 分离距离图, 转化为二值图</span></span><br><span class="line">_, distance_binary = cv.threshold(distance, <span class="number">0.8</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">distance_binary = distance_binary.astype(np.uint8)</span><br><span class="line">cv.imshow(<span class="string">&quot;distance_binary&quot;</span>, distance_binary)</span><br><span class="line"></span><br><span class="line">compCount, markers = findMarkers(distance_binary, binary, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10. 使用分水岭算法注水</span></span><br><span class="line">cv.watershed(src, markers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11. 给注水之后的标记图上色</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, compCount+<span class="number">1</span>):</span><br><span class="line">    src[markers == index] = np.random.randint(<span class="number">0</span>, <span class="number">256</span>, size=(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">cv.imshow(<span class="string">&quot;water_later&quot;</span>, src)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    s = cv.waitKey(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">if</span> s == ord(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++ 实现"></a>C++ 实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/opencv.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findMarkers</span><span class="params">(<span class="keyword">const</span> Mat &amp;distance_binary, <span class="keyword">const</span> Mat &amp;binary, Mat &amp;markers,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> &amp;compCount, <span class="keyword">bool</span> isSystem)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isSystem) &#123;</span><br><span class="line">        <span class="comment">// 6-8 步 使用 OpenCV 提供的函数替代</span></span><br><span class="line">        compCount = connectedComponents(distance_binary, markers);</span><br><span class="line">        <span class="comment">// 9. 在标记图中将二值图黑色的区域对应的位置设置标记为轮廓数量加 1</span></span><br><span class="line">        <span class="comment">// 注: connectedComponents 函数的返回值就是轮廓数加1</span></span><br><span class="line">        markers.setTo(compCount, <span class="number">255</span> - binary);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 6. 查找距离二值图的轮廓</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line">        findContours(distance_binary, contours, RETR_EXTERNAL,</span><br><span class="line">                     CHAIN_APPROX_SIMPLE);</span><br><span class="line">        compCount = contours.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 给二值图轮廓中的每个点进行颜色标记，从 1 开始标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; compCount; i++) &#123;</span><br><span class="line">            drawContours(distance_binary, contours, i, Scalar(i + <span class="number">1</span>), <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8. 将标记的图转化为固定类型的标记图</span></span><br><span class="line">        distance_binary.convertTo(markers, CV_32S);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9. 在标记图中将二值图黑色的区域对应的位置设置标记为轮廓数量加 1</span></span><br><span class="line">        markers.setTo(++compCount, <span class="number">255</span> - binary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取需要分割的图片</span></span><br><span class="line">    Mat src = imread(<span class="string">&quot;./img/coins.jpg&quot;</span>);</span><br><span class="line">    imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 转化为灰度图</span></span><br><span class="line">    Mat gray;</span><br><span class="line">    cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">    imshow(<span class="string">&quot;gray&quot;</span>, gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转化为二值图</span></span><br><span class="line">    Mat binary;</span><br><span class="line">    threshold(gray, binary, <span class="number">0</span>, <span class="number">255</span>, THRESH_BINARY_INV | THRESH_OTSU);</span><br><span class="line">    imshow(<span class="string">&quot;binary&quot;</span>, binary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 转化为距离图</span></span><br><span class="line">    Mat distance;</span><br><span class="line">    distanceTransform(binary, distance, DIST_L2, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 将距离图标准化到 0, 1 之间</span></span><br><span class="line">    normalize(distance, distance, <span class="number">0</span>, <span class="number">1</span>, NORM_MINMAX);</span><br><span class="line">    imshow(<span class="string">&quot;distance&quot;</span>, distance);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.分离距离图,转化为二值</span></span><br><span class="line">    Mat distance_binary;</span><br><span class="line">    threshold(distance, distance_binary, <span class="number">0.8</span>, <span class="number">255</span>, THRESH_BINARY);</span><br><span class="line">    <span class="comment">// 5.1 将distance_binary 转化到 CV_8U</span></span><br><span class="line">    Mat distance_binary2;</span><br><span class="line">    distance_binary.convertTo(distance_binary2, CV_8U);</span><br><span class="line">    imshow(<span class="string">&quot;distance_binary&quot;</span>, distance_binary2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6-9 步</span></span><br><span class="line">    Mat markers;</span><br><span class="line">    <span class="keyword">int</span> compCount;</span><br><span class="line">    findMarkers(distance_binary2, binary, markers, compCount, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10. 使用分水岭算法注水</span></span><br><span class="line">    watershed(src, markers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 11. 给注水后的标记图上色</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Vec3b&gt; colorTab;</span><br><span class="line">    RNG rng;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; compCount; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> g = rng.uniform(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">        <span class="keyword">int</span> b = rng.uniform(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">        <span class="keyword">int</span> r = rng.uniform(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">        colorTab.emplace_back(g, b, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; markers.rows; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; markers.cols; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = markers.at&lt;<span class="keyword">int</span>&gt;(i, j);</span><br><span class="line">            <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; compCount)</span><br><span class="line">                src.at&lt;Vec3b&gt;(i, j) = Vec3b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                src.at&lt;Vec3b&gt;(i, j) = colorTab[index - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    imshow(<span class="string">&quot;water_later&quot;</span>, src);</span><br><span class="line"></span><br><span class="line">    waitKey();</span><br><span class="line">    destroyAllWindows();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终显示结果"><a href="#最终显示结果" class="headerlink" title="最终显示结果"></a>最终显示结果</h2><blockquote><p>这里仅仅使用 Python 版代码的截图，C++版运行结果是一样的。</p></blockquote><p><img src="/img/OpenCV/coins_result.jpg" alt="coins_result"></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>在分水岭算法中，我们要找到分割次数，就是要找到标记点，即<code>Markers</code>。</p><p>在本例中使用距离变换算法统计出硬币的个数，即24个，使用距离变换后的二值图，可以很好的打出24个标记，标记每一个硬币。但是我们还需要将背景屏蔽掉，即将不是硬币的地方打一个标记，不然使用分水岭算法的时候水会漫出去导致未找到正确的边界。</p><hr><p>思路分析清晰，最后剩下的就是怎么打标记的问题了？</p><p>两种解决办法：</p><ol><li>查找轮廓</li><li>使用系统的<code>connectedComponents</code>的函数</li></ol><h3 id="用轮廓查找来打标记"><a href="#用轮廓查找来打标记" class="headerlink" title="用轮廓查找来打标记"></a>用轮廓查找来打标记</h3><blockquote><p>仅使用 Python 代码来分析逻辑，C++ 同理</p><p>再贴一遍代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6. 查找距离二值图的轮廓</span></span><br><span class="line">_, contours, _ = cv.findContours(</span><br><span class="line">    distance_binary, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 给二值图轮廓中的每个点进行颜色标记，从 1 开始标记</span></span><br><span class="line">compCount = len(contours)</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(compCount):</span><br><span class="line">    cv.drawContours(distance_binary, contours, index, index+<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 将标记的图转化为固定类型的标记图</span></span><br><span class="line">markers = np.int32(distance_binary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. 在标记图中将二值图黑色的区域对应的位置设置标记为轮廓数量加 1</span></span><br><span class="line">compCount += <span class="number">1</span></span><br><span class="line">markers[binary == <span class="number">0</span>] = compCount</span><br></pre></td></tr></table></figure><ol><li>因为图片已经是距离变换后的二值化的图了，所以能查找到准确的轮廓。</li><li>查找到轮廓后，给每个轮廓填充不一样的颜色即可（本质就是标记，好让分水岭算法去计算边界）</li><li>背景也要打上一个标记（这步很重要，不然会粘连起来）</li></ol><h2 id="使用connectedComponents来打标记"><a href="#使用connectedComponents来打标记" class="headerlink" title="使用connectedComponents来打标记"></a>使用<a href="https://docs.opencv.org/master/d3/dc0/group__imgproc__shape.html#gaedef8c7340499ca391d459122e51bef5"><code>connectedComponents</code></a>来打标记</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connectedComponents(image, markers)</span><br></pre></td></tr></table></figure><ol><li><code>image</code>：要标记的8位单通道的图</li><li><code>markers</code>：输出的标记图</li></ol><p>该方法在<code>C++</code>中有一个返回值，返回值的代表了标记的个数<code>N</code></p><p>该方法在<code>Python</code>中有两个返回值，第一个代表标记的个数<code>N</code>和输出的标记图<code>Markers</code></p><blockquote><p>该方法要注意的是：标签总数为[0, N-1]，0表示背景标签，即<code>image</code>为0的那部分。后面还需做特定的处理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> 分水岭算法 </tag>
            
            <tag> 边缘检测 </tag>
            
            <tag> 轮廓提取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV 常用方法整理</title>
      <link href="/2019/144d9f9d.html"/>
      <url>/2019/144d9f9d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下只列举常用的方法和常用的参数，例如枚举，只会将最常用的几个列举出来，详细的请参考官方文档。</p><p>对于<code>C++</code>默认使用了<code>using namespace cv;</code></p><p>对于<code>Python</code>默认使用了<code>import cv2 as cv</code> 和 <code>import numpy as np</code></p><p>OpenCV版本：3.4.7</p></blockquote><h2 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imread(filename, flags)</span><br></pre></td></tr></table></figure><ol><li><code>filename</code>：图片路径</li><li><code>flags</code>：<ol><li><code>IMREAD_COLOR</code>：默认值，返回3通道的BGR色彩图像</li><li><code>IMREAD_GRAYSCALE</code>：返回单通道灰色图片</li><li><code>IMREAD_UNCHANGED</code>：按原样返回。</li></ol></li></ol><a id="more"></a><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat src = imread(<span class="string">&quot;1.jpg&quot;</span>, IMREAD_UNCHANGED);</span><br></pre></td></tr></table></figure><p>对于<code>C++</code>来说，<code>imread</code>的返回值为<code>Mat</code>类，该类是OpenCV的自建类</p><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src = cv.imread(<span class="string">&quot;1.jpg&quot;</span>, cv.IMREAD_UNCHANGED)</span><br></pre></td></tr></table></figure><p>对于<code>Python</code>来说，<code>imread</code>的返回值为<code>NumPy.ndarray</code></p><blockquote><p>对于图像矩阵，<code>C++</code>都是自建的<code>Mat</code>类，而<code>Python</code>则是<code>numpy.ndarray</code>。后面不在赘述这个问题。</p></blockquote><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imwrite(filename, img)</span><br></pre></td></tr></table></figure><ol><li><code>filename</code>：图片要保存的路径</li><li><code>img</code>：图像矩阵</li></ol><blockquote><p>比较简单，不做详细介绍。</p><p>该方法还有一个参数，可以参数编码，详细点击<a href="https://docs.opencv.org/master/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce">imwrite</a></p></blockquote><h2 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show(winname, src)</span><br></pre></td></tr></table></figure><ol><li><code>winname</code>：窗口的名称</li><li><code>src</code>：显示的图片矩阵</li></ol><h2 id="图片缩放"><a href="#图片缩放" class="headerlink" title="图片缩放"></a>图片缩放</h2><p>图片缩放常见算法有：</p><ol><li>最近领域插值法</li><li>双线性插值法</li><li>双三次插值法</li></ol><p>OpenCV官方提供的<code>resize()</code>的函数（默认为双线性插值法）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resize(src, dst, dsize, fx, fy, interpolation)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>要缩放的图片</li><li><code>dst</code>输出的图像</li><li><code>dsize</code>输出图像的大小<ul><li><code>C++</code>：<code>Size</code>类</li><li><code>Python</code>：元组，前面为<code>width</code>，后面为<code>height</code></li></ul></li><li><code>fx</code>：沿水平轴的比例因子<ul><li>当它等于 0 时，计算为 <code>dsize.width / src.cols</code></li></ul></li><li><code>fy</code>：沿垂直轴的比例因子<ul><li>当它等于 0 时，计算为 <code>dsize.height / src.rows</code></li></ul></li><li><code>interpolation</code>：缩放用的方法<ol><li><code>INTER_NEAREST</code>：最近邻域插值法</li><li><code>INTER_LINEAR</code>：双线性插值法</li><li><code>INTER_CUBIC</code>：双三次插值法</li></ol></li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line">resize(src, dst, Size(<span class="number">100</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.resize(src, (<span class="number">100</span>, <span class="number">100</span>), interpolation=cv.INTER_NEAREST)</span><br></pre></td></tr></table></figure><h2 id="图像操作"><a href="#图像操作" class="headerlink" title="图像操作"></a>图像操作</h2><h3 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h3><p>矩阵的缩放、旋转、位移都可以使用矩阵变换来实现</p><p>缩放矩阵：<br>$$<br>\begin{bmatrix}<br>k_x &amp; 0 &amp; 0 \<br>0 &amp; k_y &amp; 0<br>\end{bmatrix}<br>$$<br>旋转矩阵：<br>$$<br>\begin{bmatrix}<br>cos\theta &amp; -sin\theta &amp; 0 \<br>sin\theta &amp; cos\theta &amp; 0<br>\end{bmatrix}<br>$$<br>位移：<br>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; t_x \<br>0 &amp; 1 &amp; t_y<br>\end{bmatrix}<br>$$<br><a href="https://docs.opencv.org/master/da/d54/group__imgproc__transform.html#ga0203d9ee5fcd28d40dbc4a1ea4451983">仿射变换</a>的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warpAffine(src, dst, M, dsize)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：输入的图像</li><li><code>dst</code>：输出的图像</li><li><code>M</code>：（2 x 3）的转换矩阵</li><li><code>dsize</code>：输出图像的尺寸</li></ol><p><a href="https://docs.opencv.org/master/da/d54/group__imgproc__transform.html#gafbbc470ce83812914a70abfb604f4326">获取旋转矩阵的方法</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getRotationMatrix2D(center, angle, scale)</span><br></pre></td></tr></table></figure><ol><li><code>center</code>：旋转中心<ol><li><code>c++</code>：类型为<code>Point2f</code></li><li><code>Python</code>：类型为元组，两个元素，分别是<code>x，y</code>。</li></ol></li><li><code>angle</code>：旋转角度，单位为度，正值表示逆时针旋转。</li><li><code>scale</code>：缩放比例</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 平移矩阵</span></span><br><span class="line">Mat translation_matrix = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩放矩阵</span></span><br><span class="line">Mat scale_matrix = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转矩阵</span></span><br><span class="line">Mat rotated_matrix = getRotationMatrix2D(</span><br><span class="line">    Point2f(src.<span class="built_in">size</span>().<span class="built_in">width</span> / <span class="number">2</span>, src.<span class="built_in">size</span>().<span class="built_in">height</span> / <span class="number">2</span>), <span class="number">45</span>, <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对应的图形</span></span><br><span class="line">Mat dst;</span><br><span class="line"><span class="comment">// 平移</span></span><br><span class="line"><span class="comment">// warpAffine(src, dst, translation_matrix, src.size());</span></span><br><span class="line"><span class="comment">// 缩放</span></span><br><span class="line"><span class="comment">// warpAffine(src, dst, scale_matrix, src.size());</span></span><br><span class="line"><span class="comment">// 旋转</span></span><br><span class="line"><span class="comment">// warpAffine(src, dst, rotated_matrix, src.size());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// imshow(&quot;dst&quot;, dst);</span></span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取图像的高和宽</span></span><br><span class="line">height, width = src.shape[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平移矩阵</span></span><br><span class="line">translation_matrix = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                                 [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="comment"># 缩放矩阵</span></span><br><span class="line">scale_matrix = np.float32([[<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                           [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 旋转矩阵</span></span><br><span class="line">rotated_matrix = cv.getRotationMatrix2D((width/<span class="number">2</span>, height/<span class="number">2</span>), <span class="number">45</span>, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平移</span></span><br><span class="line"><span class="comment"># dst = cv.warpAffine(src, translation_matrix, src.shape[1::-1])</span></span><br><span class="line"><span class="comment"># 缩放</span></span><br><span class="line"><span class="comment"># dst = cv.warpAffine(src, scale_matrix, src.shape[1::-1])</span></span><br><span class="line"><span class="comment"># 旋转</span></span><br><span class="line"><span class="comment"># dst = cv.warpAffine(src, rotated_matrix, src.shape[1::-1])</span></span><br><span class="line"><span class="comment"># 解释一下src.shape[1::-1]</span></span><br><span class="line"><span class="comment"># 在src.shape中，第一个值代表height，第二个代表width</span></span><br><span class="line"><span class="comment"># 在 warpAffine 参数中 dsize, 第一个表示width, 第二个表示height</span></span><br><span class="line"><span class="comment"># 综上，将其反过来即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cv.imshow(&quot;dst&quot;, dst)</span></span><br></pre></td></tr></table></figure><h3 id="透视变换"><a href="#透视变换" class="headerlink" title="透视变换"></a>透视变换</h3><p>透视变换（Perspective Transformation)是指利用透视中心、像点、目标点三点共线的条件，按透视旋转定律使承影面（透视面）绕迹线（透视轴）旋转某一角度，破坏原有的投影光线束，仍能保持承影面上投影几何图形不变的变换。</p><p><img src="/img/OpenCV/1.jpg" alt="ros_topic">  </p><p><a href="https://docs.opencv.org/master/da/d54/group__imgproc__transform.html#gaf73673a7e8e18ec6963e3774e6a94b87">透视变换</a>的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warp(src, dst, M, dsize)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：输入的图像</li><li><code>dst</code>：输出的图像</li><li><code>M</code>：（3 x 3）转换矩阵</li><li><code>dsize</code>：输出图像的尺寸</li></ol><p><a href="https://docs.opencv.org/master/da/d54/group__imgproc__transform.html#gae66ba39ba2e47dd0750555c7e986ab85">获取透视变换需要的矩阵</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getPerspectiveTransform(src, dst)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：原图中四边形顶点的坐标<ol><li><code>C++</code>：类型为<code>vector&lt;Point2f&gt;</code></li><li><code>Python</code>：类型为<code>numpy.ndarray</code> ，<code>dtype</code>为<code>numpy.float32</code></li></ol></li><li><code>dst</code>：目标图像中的对应四个点的坐标，类型同上。</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里仅仅说明用法，参数根据实际情况，src_point和dst_point应该不一样才对</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Point2f&gt; src_point&#123;Point2i(<span class="number">0</span>, <span class="number">0</span>), Point2i(<span class="number">0</span>, <span class="number">1</span>), Point2i(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">                              Point2i(<span class="number">1</span>, <span class="number">1</span>)&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point2f&gt; dst_point&#123;Point2i(<span class="number">0</span>, <span class="number">0</span>), Point2i(<span class="number">0</span>, <span class="number">1</span>), Point2i(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">                          Point2i(<span class="number">1</span>, <span class="number">1</span>)&#125;;</span><br><span class="line">Mat matrix = getPerspectiveTransform(src_point, dst_point);</span><br><span class="line">Mat dst;</span><br><span class="line">warpPerspective(src, dst, matrix, src.<span class="built_in">size</span>());</span><br><span class="line">imshow(<span class="string">&quot;dst&quot;</span>, dst);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同上</span></span><br><span class="line">src_point = np.float32(((<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">dst_point = np.float32(((<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">print(type(src_point))</span><br><span class="line">matrix = cv.getPerspectiveTransform(src_point, dst_point)</span><br><span class="line">dst = cv.warpPerspective(src, matrix, src.shape[<span class="number">1</span>::<span class="number">-1</span>])</span><br><span class="line">cv.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br></pre></td></tr></table></figure><h2 id="图像金字塔（上、下采样）"><a href="#图像金字塔（上、下采样）" class="headerlink" title="图像金字塔（上、下采样）"></a>图像金字塔（上、下采样）</h2><h3 id="上采样"><a href="#上采样" class="headerlink" title="上采样"></a><a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#gada75b59bdaaca411ed6fee10085eb784">上采样</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyrUp(src, dst)</span><br></pre></td></tr></table></figure><h3 id="下采样"><a href="#下采样" class="headerlink" title="下采样"></a><a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#gaf9bba239dfca11654cb7f50f889fc2ff">下采样</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyrDown(src, dst)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：原图</li><li><code>dst</code>：采样结果图</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Mat up_dst, down_dst;</span><br><span class="line"><span class="comment">// 上采样</span></span><br><span class="line">pyrUp(src, up_dst);</span><br><span class="line"><span class="comment">// 下采样</span></span><br><span class="line">pyrDown(src, down_dst);</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">&quot;up_dst&quot;</span>, up_dst);</span><br><span class="line">imshow(<span class="string">&quot;down_dst&quot;</span>, down_dst);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上采样</span></span><br><span class="line">up_dst = cv.pyrUp(src)</span><br><span class="line"><span class="comment"># 下采样</span></span><br><span class="line">down_dst = cv.pyrDown(src)</span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">&quot;up_dst&quot;</span>, up_dst)</span><br><span class="line">cv.imshow(<span class="string">&quot;down_dst&quot;</span>, down_dst)</span><br></pre></td></tr></table></figure><h2 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a><a href="https://docs.opencv.org/master/d2/de8/group__core__array.html#gafafb2513349db3bcff51f54ee5592a19">图像融合</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addWeighted(src1, alpha, src2, beta, gamma, dst)</span><br></pre></td></tr></table></figure><ol><li><code>src1</code>：图1</li><li><code>alpha</code>：图1系数，double</li><li><code>src2</code>：图2</li><li><code>beta</code>：图2系数，double</li><li><code>gamma</code>：添加的标量</li><li><code>dst</code>：输出图像</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line">addWeighted(src, <span class="number">0.5</span>, src, <span class="number">0.5</span>, <span class="number">100</span>, dst);</span><br><span class="line">imshow(<span class="string">&quot;dst&quot;</span>, dst);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.addWeighted(src, <span class="number">0.5</span>, src, <span class="number">0.5</span>, <span class="number">100</span>)</span><br><span class="line">cv.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br></pre></td></tr></table></figure><h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><h3 id="绘制线段"><a href="#绘制线段" class="headerlink" title="绘制线段"></a><a href="https://docs.opencv.org/3.4.7/d6/d6e/group__imgproc__draw.html#ga7078a9fae8c7e7d13d24dac2520ae4a2">绘制线段</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line(src, pt1, pt2, color, thickness, lineType)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：图片</li><li><code>pt1</code>：起点<ol><li><code>C++</code>：<code>Point</code>类型</li><li><code>Python</code>：元组类型</li></ol></li><li><code>pt2</code>：终止点，类型同上</li><li><code>color</code>：颜色<ol><li><code>C++</code>：<code>Scalar</code>类型，GBR</li><li><code>Python</code>：颜色（GBR）元组</li></ol></li><li><code>thickness</code>：线宽，<code>int</code>，默认值为1</li><li><code>lineType</code>：线类型<ol><li><code>LINE_AA</code>：抗锯齿线</li><li><code>LINE_8</code>：8连线，默认值</li></ol></li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">line</span>(src, Point(<span class="number">100</span>, <span class="number">100</span>), Point(<span class="number">200</span>, <span class="number">200</span>), Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.line(src, (<span class="number">100</span>, <span class="number">100</span>), (<span class="number">200</span>, <span class="number">200</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a><a href="https://docs.opencv.org/3.4.7/d6/d6e/group__imgproc__draw.html#ga07d2f74cadcf8e305e810ce8eed13bc9">绘制矩形</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rectangle(src, pt1, pt2, color, thickness, lineType)</span><br></pre></td></tr></table></figure><p>参数同上，但是<code>pt1</code>和<code>pt2</code>一定是矩形的对角点。</p><blockquote><p><strong>注意：</strong>如果<code>thickness</code>为负数，则会使用<code>color</code>填充整个矩阵</p></blockquote><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rectangle(src, Point(<span class="number">100</span>, <span class="number">100</span>), Point(<span class="number">200</span>, <span class="number">200</span>), Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.rectangle(src, (<span class="number">100</span>, <span class="number">100</span>), (<span class="number">200</span>, <span class="number">200</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><h3 id="绘制圆"><a href="#绘制圆" class="headerlink" title="绘制圆"></a><a href="https://docs.opencv.org/3.4.7/d6/d6e/group__imgproc__draw.html#gaf10604b069374903dbd0f0488cb43670">绘制圆</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">circle(src, center, radius, color, thickness, lineType)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：图片</li><li><code>center</code>：圆的中点<ol><li><code>C++</code>：<code>Point</code>类型</li><li><code>Python</code>：元组类型，<code>(x, y)</code></li></ol></li><li><code>radius</code>：半径，<code>int</code></li><li><code>color</code>：颜色，同<code>line</code></li><li><code>thickness</code>：线宽，同<code>line</code></li><li><code>lineType</code>：线类型，同<code>line</code></li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">circle</span>(src, Point(<span class="number">100</span>, <span class="number">100</span>), <span class="number">100</span>, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.circle(src, (<span class="number">100</span>, <span class="number">100</span>), <span class="number">100</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><h3 id="绘制多边形"><a href="#绘制多边形" class="headerlink" title="绘制多边形"></a>绘制多边形</h3><blockquote><p>该方法用于绘制多条多边形曲线</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">polylines(src, pts, isClosed, color, thickness, lineType)</span><br></pre></td></tr></table></figure><p>与上相同的参数不做解释（<code>src</code>、<code>color</code>、<code>thickness</code>、<code>lineType</code>）</p><ol><li><code>pts</code>：顶点集合，二维数组，分别表示多边形数量，多边形的顶点位置</li><li><code>isClosed</code>：是否闭合。如果闭合会从最后一个顶点到第一个顶点绘制一条直线。</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; pts&#123;</span><br><span class="line">        &#123;Point(<span class="number">100</span>, <span class="number">100</span>), Point(<span class="number">200</span>, <span class="number">200</span>), Point(<span class="number">300</span>, <span class="number">400</span>), Point(<span class="number">200</span>, <span class="number">100</span>)&#125;&#125;;</span><br><span class="line">polylines(src, pts, <span class="literal">false</span>, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pts = np.array([[(<span class="number">100</span>, <span class="number">100</span>), (<span class="number">200</span>, <span class="number">200</span>), (<span class="number">300</span>, <span class="number">400</span>), (<span class="number">200</span>, <span class="number">100</span>)]])</span><br><span class="line">cv.polylines(src, pts, <span class="literal">False</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br></pre></td></tr></table></figure><h3 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putText(src, text, org, fontFace, fontScale, Color, lineType)</span><br></pre></td></tr></table></figure><p>与上相同的参数不做介绍。</p><ol><li><code>text</code>：文字文本，<code>string</code>类型</li><li><code>org</code>：文字左下角的坐标位置<ol><li><code>C++</code>：<code>Point</code>类型</li><li><code>Python</code>：元组类型，<code>(x, y)</code></li></ol></li><li><code>fontFace</code>：字体名称。具体见<a href="https://docs.opencv.org/3.4.7/d0/de1/group__core.html#ga0f9314ea6e35f99bb23f29567fc16e11">HersheyFonts</a>，<strong>注意</strong>：OpenCV默认不支持中文</li><li><code>fontScale</code>：字体的缩放大小。</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putText(src, <span class="string">&quot;I&#x27;m a text&quot;</span>, Point(<span class="number">100</span>, <span class="number">100</span>), FONT_HERSHEY_PLAIN, <span class="number">1</span>, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.putText(src, <span class="string">&quot;I&#x27;m a text&quot;</span>, (<span class="number">100</span>, <span class="number">100</span>), cv.FONT_HERSHEY_PLAIN, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br></pre></td></tr></table></figure><h2 id="转换颜色空间"><a href="#转换颜色空间" class="headerlink" title="转换颜色空间"></a>转换颜色空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cvtColor(src, dst, code)</span><br></pre></td></tr></table></figure><ol><li><code>code</code>：颜色空间转换代码</li></ol><blockquote><p>该方法我们常常用来将原图转换为灰色图和将GBR转换为HSV</p></blockquote><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line">cvtColor(src, dst, COLOR_BGR2GRAY);</span><br><span class="line">imshow(<span class="string">&quot;dst&quot;</span>, dst);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br></pre></td></tr></table></figure><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><h3 id="统计直方图"><a href="#统计直方图" class="headerlink" title="统计直方图"></a>统计直方图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calcHist(images, channels, mask,hist,histSize, ranges)</span><br></pre></td></tr></table></figure><ol><li><code>images</code>：需要处理的图片数组</li><li><code>channels</code>：计算对应图片的哪个通道</li><li><code>mask</code>：蒙版</li><li><code>hist</code>：输出的直方图数组</li><li><code>histSize</code>：输出的直方图的大小</li><li><code>ranges</code>：范围</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat hist;</span><br><span class="line">calcHist(<span class="built_in">vector</span>&lt;Mat&gt;&#123;src&#125;, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">0</span>&#125;,　Mat(), hist, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">256</span>&#125;,</span><br><span class="line">         <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&#123;<span class="number">0</span>, <span class="number">256</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里的vector后面使用的是大括号，注意vector大括号初始化和小括号初始化的差别。</p><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hist = cv.calcHist([src], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br></pre></td></tr></table></figure><p>或者使用<code>numpy</code>的方式统计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计第1个通道,其他类似</span></span><br><span class="line">hist = np.bincount(src[:,<span class="number">0</span>].ravel(), minlength=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h3><p>C++中绘制直方图比较麻烦，我们使用<code>polylines</code>取画出多边形，从而形成直方图。抽成自定义函数如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawHist</span><span class="params">(Mat &amp;hist, <span class="keyword">const</span> Scalar &amp;color = Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bin = <span class="number">4</span>, <span class="built_in">width</span> = <span class="number">256</span> * bin, <span class="built_in">height</span> = <span class="number">800</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; points;</span><br><span class="line">    <span class="function">Mat <span class="title">dst</span><span class="params">(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3)</span></span>;</span><br><span class="line">    <span class="comment">// 标准化</span></span><br><span class="line">    Mat out;</span><br><span class="line">    normalize(hist, out, <span class="number">0</span>, <span class="built_in">height</span> - <span class="number">100</span>, NORM_MINMAX);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i; i &lt; hist.<span class="built_in">size</span>().<span class="built_in">height</span>; i++) &#123;</span><br><span class="line">        points.push_back(Point(i * bin, <span class="number">790</span> - out.at&lt;<span class="keyword">float</span>&gt;(i)));</span><br><span class="line">    &#125;</span><br><span class="line">    polylines(dst, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt;&#123;points&#125;, <span class="literal">false</span>, color, <span class="number">1</span>, LINE_AA);</span><br><span class="line">    imshow(<span class="string">&quot;hist&quot;</span>, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Python中使用Matplotlib即可，方便快捷高效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(hist)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="HSV模型"><a href="#HSV模型" class="headerlink" title="HSV模型"></a>HSV模型</h2><p>HSV(Hue, Saturation, Value)是根据颜色的直观特性由A. R. Smith在1978年创建的一种颜色空间, 也称六角锥体模型(Hexcone Model)。</p><p>这个模型中颜色的参数分别是：色调（H），饱和度（S），明度（V）</p><ol><li>当 S = 1，V=1时，H所代表的任何颜色被称为纯色</li><li>当 S = 0，即饱和度为0，颜色最浅，最浅被描述为灰色，灰色的亮度由V决定，此时H无意义</li><li>当 V = 0 时，颜色最暗，最暗被描述为黑色，因此此时H和S均无意义。</li></ol><p><strong>注意</strong>：在OpenCV中，H、S、V的取值范围是[0, 180]、[0, 255]、[0, 255]，而不是[0, 360]、[0, 1]、[0, 1]</p><p>下面列出部分的HSV空间颜色值：</p><p><img src="/img/OpenCV/2.jpg" alt="ros_topic">  </p><h2 id="图像二值化"><a href="#图像二值化" class="headerlink" title="图像二值化"></a>图像二值化</h2><h3 id="手动设置阈值"><a href="#手动设置阈值" class="headerlink" title="手动设置阈值"></a><a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#gae8a4a146d1ca78c626a53577199e9c57">手动设置阈值</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threshold(src, dst, thresh, maxval, type)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：单通道灰度图</li><li><code>thresh</code>：阈值</li><li><code>maxval</code>：最大值（一般取255）</li><li><code>type</code>：类型</li></ol><p>当前公式解析有问题，<a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#ggaa9e58d2860d4afa658ef70a9b1115576a19120b1a11d8067576cc24f4d2f03754">公式来源</a></p><table><thead><tr><th>参数名</th><th>参数解释</th></tr></thead><tbody><tr><td>THRESH_BINARY</td><td>$dst\left( x,y\right) =\begin{cases}maxval &amp; if\ src(x, y)\ &gt;\ thresh \ 0\end{cases}$</td></tr><tr><td>THRESH_BINARY_INV</td><td>$dst\left( x,y\right) =\begin{cases}0 &amp; if\ src(x, y)\ &gt;\ thresh \ maxval\end{cases}$</td></tr><tr><td>THRESH_TRUNC</td><td>$dst\left( x,y\right) =\begin{cases}threshold &amp; if\ src(x, y)\ &gt;\ thresh \ src(x,y)\end{cases}$</td></tr><tr><td>THRESH_TOZERO</td><td>$dst\left( x,y\right) =\begin{cases}src(x,y) &amp; if\ src(x, y)\ &gt;\ thresh \ 0\end{cases}$</td></tr><tr><td>THRESH_TOZERO_INV</td><td>$dst\left( x,y\right) =\begin{cases}0 &amp; if\ src(x, y)\ &gt;\ thresh \ src(x,y) \end{cases}$</td></tr></tbody></table><p>OpenCV官网使用了一张图片来描述这5个参数不同的含义，如下：</p><p><img src="/img/OpenCV/3.jpg" alt="ros_topic">  </p><p>除了上面的5个参数，还有两个自动算法标志：</p><table><thead><tr><th>参数名</th><th>参数解释</th></tr></thead><tbody><tr><td>THRESH_OTSU</td><td>大津算法</td></tr><tr><td>THRESH_TRIANGLE</td><td>三角算法（常用在图中出现大量的近视颜色的情况下）</td></tr></tbody></table><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line"><span class="comment">// 手动填写阈值</span></span><br><span class="line">threshold(src, dst, <span class="number">100</span>, <span class="number">255</span>, THRESH_BINARY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大津算法，手动输入的阈值无效，三角算法类似，正确的阈值需要通过返回值获取。</span></span><br><span class="line">threshold(src, dst, <span class="number">100</span>, <span class="number">255</span>, THRESH_BINARY | THRESH_OTSU);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># retval 实际阈值</span></span><br><span class="line">retval, dst = cv.threshold(src, <span class="number">100</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大津算法</span></span><br><span class="line">retval, dst = cv.threshold(src, <span class="number">100</span>, <span class="number">255</span>, cv.THRESH_BINARY | cv.THRESH_OTSU)</span><br></pre></td></tr></table></figure><h3 id="自适应阈值"><a href="#自适应阈值" class="headerlink" title="自适应阈值"></a><a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#ga72b913f352e4a1b1b397736707afcde3">自适应阈值</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adaptiveThreshold(src, dst, maxValue, adaptiveMethod, thresholdType, C)</span><br></pre></td></tr></table></figure><ol><li><code>adaptiveMethod</code>：自适应阈值算法<ol><li><code>ADAPTIVE_THRESH_MEAN_C</code>：附近区域减去恒定的平均C</li><li><code>ADAPTIVE_THRESH_GAUSSIAN_C</code>：领域值减去参数C的高斯加权和</li></ol></li><li><code>thresholdType</code>：阈值类型，只允许是以下两个<ol><li><code>THRESH_BINARY</code>：超过阈值是maxval，低于阈值是0</li><li><code>THRESH_BINARY_INV</code>：超过阈值是0，低于阈值是maxval</li></ol></li><li><code>blockSize</code>：邻域大小，必须是奇数。</li><li><code>C</code>：参数C</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adaptiveThreshold(src, dst, <span class="number">255</span>, ADAPTIVE_THRESH_GAUSSIAN_C, THRESH_BINARY, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.adaptiveThreshold(src, <span class="number">255</span>, </span><br><span class="line">                           cv.ADAPTIVE_THRESH_GAUSSIAN_C, </span><br><span class="line">                           cv.THRESH_BINARY, </span><br><span class="line">                           <span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="图片卷积"><a href="#图片卷积" class="headerlink" title="图片卷积"></a>图片卷积</h2><h3 id="自定义卷积核"><a href="#自定义卷积核" class="headerlink" title="自定义卷积核"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga27c049795ce870216ddfb366086b5a04">自定义卷积核</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter2D(src, dst, ddepth, kernel)</span><br></pre></td></tr></table></figure><ol><li><code>ddepth</code>：目标图像的深度</li><li><code>kernel</code>：卷积核</li></ol><p>官网给出的计算的公式：<br>$$<br>\texttt{dst} (x,y) = \sum _{ \stackrel{0\leq x’ &lt; \texttt{kernel.cols},}{0\leq y’ &lt; \texttt{kernel.rows}} } \texttt{kernel} (x’,y’)* \texttt{src} (x+x’- \texttt{anchor.x} ,y+y’- \texttt{anchor.y} )<br>$$<br><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line"><span class="comment">// 1. 均值滤波</span></span><br><span class="line">Mat means_kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>) / <span class="number">9</span>;</span><br><span class="line"><span class="comment">// 2. 高斯模糊</span></span><br><span class="line">Mat gaussian_kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>) / <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 3. Sobel 算子</span></span><br><span class="line"><span class="comment">// 3.1 水平梯度</span></span><br><span class="line">Mat sobel_h_kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 3.2 垂直梯度</span></span><br><span class="line">Mat sobel_v_kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 4. 拉普拉斯算子</span></span><br><span class="line"><span class="comment">// 4.1 普通型</span></span><br><span class="line">Mat laplacian_normal_kernel =</span><br><span class="line">    (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 4.2 增强型</span></span><br><span class="line">Mat laplacian_strong_kernel =</span><br><span class="line">    (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 5. 锐化滤波</span></span><br><span class="line">Mat sharpen_kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">9</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以均值滤波为例，其他都是一样的使用方式</span></span><br><span class="line">filter2D(src, dst, <span class="number">-1</span>, means_kernel);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 均值滤波</span></span><br><span class="line">means_kernel = np.float32(((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                           (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                           (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))) / <span class="number">9</span></span><br><span class="line"><span class="comment"># 2. 高斯模糊</span></span><br><span class="line">gaussian_kernel = np.float32(((<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">                              (<span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>),</span><br><span class="line">                              (<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>))) / <span class="number">16</span></span><br><span class="line"><span class="comment"># 3. Sobel 算子</span></span><br><span class="line"><span class="comment"># 3.1 水平梯度</span></span><br><span class="line">sobel_h_kernel = np.float32(((<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">                             (<span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">                             (<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="comment"># 3.2 垂直梯度</span></span><br><span class="line">sobel_v_kernel = np.float32(((<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>),</span><br><span class="line">                             (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">                             (<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="comment"># 4. 拉普拉斯算子</span></span><br><span class="line"><span class="comment"># 4.1 普通型</span></span><br><span class="line">laplacian_normal_kernel = np.float32(((<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">                                      (<span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>),</span><br><span class="line">                                      (<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)))</span><br><span class="line"><span class="comment"># 4.2 增强型</span></span><br><span class="line">laplacian_strong_kernel = np.float32(((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                                      (<span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>),</span><br><span class="line">                                      (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="comment"># 5. 锐化滤波</span></span><br><span class="line">sharpen_kernel = np.float32(((<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>),</span><br><span class="line">                             (<span class="number">-1</span>, <span class="number">9</span>, <span class="number">-1</span>),</span><br><span class="line">                             (<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以均值滤波为例，其他都是一样的使用方式</span></span><br><span class="line">dst = cv.filter2D(src, <span class="number">-1</span>, means_kernel)</span><br></pre></td></tr></table></figure><blockquote><p>自定义卷积核比较灵活，只要定好卷积核，就可以使用该方法进行卷积。</p></blockquote><h3 id="均值滤波"><a href="#均值滤波" class="headerlink" title="均值滤波"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga8c45db9afe636703801b0b2e440fce37">均值滤波</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blur(src, dst, ksize)</span><br></pre></td></tr></table></figure><ol><li><code>ksize</code>：卷积核尺寸<ol><li><code>C++</code>：<code>Size</code>类型</li><li><code>Python</code>：元组类型</li></ol></li></ol><p><strong>C++</strong></p><h3 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1">高斯模糊</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GaussianBlur(src, dst, ksize, sigmaX, sigmaY)</span><br></pre></td></tr></table></figure><ol><li><code>sigmaX</code>：x轴上的高斯标准差</li><li><code>sigmaY</code>：y轴上的高斯标准差，如果为0，设置为等于<code>sigmaY</code></li></ol><p>**C++**：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line">GaussianBlur(src, dst, Size(<span class="number">3</span>, <span class="number">3</span>), <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.GaussianBlur(src, (<span class="number">3</span>, <span class="number">3</span>), <span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga564869aa33e58769b4469101aac458f9">中值滤波</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medianBlur(src, dst, ksize)</span><br></pre></td></tr></table></figure><blockquote><p>注意此处的 ksize 为int类型</p></blockquote><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medianBlur(src, dst, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><h3 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d">Sobel算子</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sobel(src, dst, ddepth, dx, dy, ksize&#x3D;3)</span><br></pre></td></tr></table></figure><ol><li><code>dx</code>：沿x轴的阶数</li><li><code>dy</code>：沿y轴的阶数</li></ol><p><strong>C++</strong></p><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 沿 x 轴计算一阶sobel</span></span><br><span class="line">dst = cv.Sobel(src, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿 y 轴计算一阶sobel</span></span><br><span class="line">dst = cv.Sobel(src, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Scharr滤波器"><a href="#Scharr滤波器" class="headerlink" title="Scharr滤波器"></a>Scharr滤波器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scharr(src, dst, ddepth, dx, dy)</span><br></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 沿 x 轴计算一阶 Scharr</span></span><br><span class="line">Scharr(src, dst, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 沿 y 轴计算一阶 Scharr</span></span><br><span class="line">Scharr(src, dst, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 沿 x 轴计算一阶 Scharr</span></span><br><span class="line">dst = cv.Scharr(src, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿 y 轴计算一阶 Scharr</span></span><br><span class="line">dst = cv.Scharr(src, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="拉普拉斯算子"><a href="#拉普拉斯算子" class="headerlink" title="拉普拉斯算子"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gad78703e4c8fe703d479c1860d76429e6">拉普拉斯算子</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Laplacian(src, dst, ddepth, ksize&#x3D;1)</span><br></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Laplacian(src, dst, <span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.Laplacian(src, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h3 id="canny边缘检测算法"><a href="#canny边缘检测算法" class="headerlink" title="canny边缘检测算法"></a><a href="https://docs.opencv.org/3.4.7/dd/d1a/group__imgproc__feature.html#ga04723e007ed888ddf11d9ba04e2232de">canny边缘检测算法</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Canny(src, edges, threshold1, threshold2)</span><br></pre></td></tr></table></figure><ol><li><code>edges</code>：边缘图，单通道8位。</li><li><code>threshold1</code>：第一个阈值</li><li><code>threshold2</code>：第二个阈值</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Canny(src, dst, <span class="number">50</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.Canny(src, <span class="number">50</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="双边滤波"><a href="#双边滤波" class="headerlink" title="双边滤波"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga9d7064d478c95d60003cf839430737ed">双边滤波</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bilateralFilter(src, dst, d, sigmaColor, sigmaSpace)</span><br></pre></td></tr></table></figure><ol><li><code>d</code>：滤波期间使用的每个像素邻域的直径。</li><li><code>sigmaColor</code>：在色彩空间中过滤的标准差</li><li><code>sigmaSpace</code>：在坐标空间中过滤的标准差</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bilateralFilter(src, dst, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.bilateralFilter(src, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="霍夫变换"><a href="#霍夫变换" class="headerlink" title="霍夫变换"></a>霍夫变换</h2><h3 id="霍夫圆"><a href="#霍夫圆" class="headerlink" title="霍夫圆"></a><a href="https://docs.opencv.org/3.4.7/dd/d1a/group__imgproc__feature.html#ga47849c3be0d0406ad3ca45db65a25d2d">霍夫圆</a></h3><p>使用霍夫变换在灰度图中查找圆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HoughCircles(src, circles, method, dp, minDist, </span><br><span class="line">             param1&#x3D;100, param2&#x3D;100, minRadius&#x3D;0, maxRadius&#x3D;0)</span><br></pre></td></tr></table></figure><ol><li><code>circles</code>：找到的圆的输出向量</li><li><code>method</code>：检测方法<ol><li>当前唯一实现的方法是<code>HOUGH_GRADIENT</code></li></ol></li><li><code>dp</code>：分辨率，累加器分辨率和图像分辨率的反比。</li><li><code>minDist</code>：检测到圆心的最小距离</li><li><code>param1</code>：传递给Canny边缘检测器的两个阈值中的更高的那个，更低的是它的一半</li><li><code>param2</code>：它是检测圆心的累加器阈值，越小，假圆可能越多。</li><li><code>minRadius</code>：最小圆半径</li><li><code>maxRadius</code>：最大圆半径</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat circles;</span><br><span class="line">HoughCircles(src, circles, HOUGH_GRADIENT, <span class="number">1</span>, <span class="number">100</span>, <span class="number">160</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// circles 中是检测到的圆的圆心(x, y)和半径</span></span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">circles = cv.HoughCircles(src, HOUGH_GRADIENT, <span class="number">1</span>, <span class="number">100</span>, <span class="number">160</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="霍夫直线变换–找直线"><a href="#霍夫直线变换–找直线" class="headerlink" title="霍夫直线变换–找直线"></a><a href="https://docs.opencv.org/3.4.7/dd/d1a/group__imgproc__feature.html#ga46b4e588934f6c8dfd509cc6e0e4545a">霍夫直线变换–找直线</a></h3><blockquote><p>使用标准霍夫变换或者标准多尺度霍夫变换查找直线</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HoughLines(src, lines, rho, theta, threshold, </span><br><span class="line">           srn&#x3D;0, stn&#x3D;0, min_theta&#x3D;0, max_theta&#x3D;CV_PI)</span><br></pre></td></tr></table></figure><ol><li><code>lines</code>：检测出来的直线（里面的参数是rho和theta）</li><li><code>rho</code>：距离分辨率（以像素为单位）</li><li><code>theta</code>：角度分辨率（以弧度为单位）</li><li><code>threshold</code>：累加器阈值</li><li><code>srn</code>：它是距离分辨率rho的除数</li><li><code>stn</code>：它是角度分辨率theta的除数，如果两个都等于0，则使用标准霍夫变换。否则使用多尺度霍夫变换</li><li><code>min_theta</code>：最小角度：介于<code>0</code>和<code>max_theta</code>之间</li><li><code>max_theta</code>：最大角度：介于<code>min_theta</code>和<code>CV_PI</code>之间</li></ol><blockquote><p>注意：输入图必须是二值图</p></blockquote><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 src 转化为二值图</span></span><br><span class="line">Mat binary;</span><br><span class="line">adaptiveThreshold(src, binary, <span class="number">255</span>, ADAPTIVE_THRESH_MEAN_C,</span><br><span class="line">                  THRESH_BINARY_INV, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Mat lines;</span><br><span class="line">HoughLines(binary, lines, <span class="number">1</span>, CV_PI / <span class="number">180</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 src 转化为二值图</span></span><br><span class="line">binary = cv.adaptiveThreshold(</span><br><span class="line">    src, <span class="number">255</span>, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY_INV, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">lines = cv.HoughLines(binary, <span class="number">1</span>, np.pi / <span class="number">180</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意 lines 的参数分别对应的是一条直线的 rho 和 theta</p></blockquote><h3 id="霍夫直线变换–找线段"><a href="#霍夫直线变换–找线段" class="headerlink" title="霍夫直线变换–找线段"></a><a href="https://docs.opencv.org/3.4.7/dd/d1a/group__imgproc__feature.html#ga8618180a5948286384e3b7ca02f6feeb">霍夫直线变换–找线段</a></h3><blockquote><p>使用概率霍夫变换在二进制图像中查找线段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HoughLinesP(src, lines, rho, theta, theshold, minLineLength&#x3D;0, maxLineGap&#x3D;0)</span><br></pre></td></tr></table></figure><ol><li><code>minLineLength</code>：线段的最小长度。</li><li><code>maxLineGap</code>：连接该线上的点之间的最大允许间隙。</li></ol><blockquote><p>注意：输入图必须是二值图</p></blockquote><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Mat binary, gray;</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">adaptiveThreshold(gray, binary, <span class="number">255</span>, ADAPTIVE_THRESH_MEAN_C,</span><br><span class="line">                  THRESH_BINARY_INV, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">imshow(<span class="string">&quot;binary&quot;</span>, binary);</span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4i&gt; lines;</span><br><span class="line">HoughLinesP(binary, lines, <span class="number">1</span>, CV_PI / <span class="number">180</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> <span class="built_in">line</span> : lines) &#123;</span><br><span class="line">    cv::<span class="built_in">line</span>(src, Point(<span class="built_in">line</span>[<span class="number">0</span>], <span class="built_in">line</span>[<span class="number">1</span>]), Point(<span class="built_in">line</span>[<span class="number">2</span>], <span class="built_in">line</span>[<span class="number">3</span>]),</span><br><span class="line">             Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line">binary = cv.adaptiveThreshold(</span><br><span class="line">    gray, <span class="number">255</span>, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY_INV, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">lines = cv.HoughLinesP(binary, <span class="number">1</span>, np.pi / <span class="number">180</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    x1, y1, x2, y2 = line[<span class="number">0</span>]</span><br><span class="line">    cv.line(src, (x1, y1), (x2, y2), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, binary)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br></pre></td></tr></table></figure><blockquote><p>注意：实际使用中，C++的<code>HoughLineP</code> 和Python的<code>HoughLineP</code>最终的结果有差异，原因未知。</p></blockquote><h2 id="查找轮廓和绘制轮廓"><a href="#查找轮廓和绘制轮廓" class="headerlink" title="查找轮廓和绘制轮廓"></a>查找轮廓和绘制轮廓</h2><p><a href="https://docs.opencv.org/3.4.7/d3/dc0/group__imgproc__shape.html#ga17ed9f5d79ae97bd4c7cf18403e1689a">查找轮廓</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findContours(image, contours, hierachy, mode, method)</span><br></pre></td></tr></table></figure><p>参数描述：</p><ol><li><code>image</code>：二值图</li><li><code>contours</code>：查找到的所有轮廓</li><li><code>hierachy</code>：层级关系（目前很少用到）</li><li><code>mode</code>：<a href="https://docs.opencv.org/3.4.7/d3/dc0/group__imgproc__shape.html#ga17ed9f5d79ae97bd4c7cf18403e1689a">轮廓的检索模式</a><ol><li><code>RETR_EXTERNAL</code>：仅检索外部轮廓。</li><li><code>RETR_LIST</code>：不建立索引关系的情况下，检索所有轮廓。</li><li><code>RETR_CCOMP</code>：检索所有轮廓，分为两级层次结构。</li><li><code>RETR_TREE</code>：检索所有轮廓，重建嵌套的完整结构。</li></ol></li><li><code>method</code>：<a href="https://docs.opencv.org/3.4.7/d3/dc0/group__imgproc__shape.html#ga4303f45752694956374734a03c54d5ff">轮廓近似方法</a><ol><li><code>CHAIN_APPROX_NONE</code>：绝对存储所有轮廓点</li><li><code>CHAIN_APPROX_SIMPLE</code>：压缩水平，垂直和对角线段，仅保留其端点。</li></ol></li></ol><p><a href="https://docs.opencv.org/3.4.7/d6/d6e/group__imgproc__draw.html#ga746c0625f1781f1ffc9056259103edbc">绘制轮廓</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawContours(image, contours, contourIdx, color, thickness, lineType)</span><br></pre></td></tr></table></figure><ol><li><code>contours</code>：上面方法找到的所有轮廓点</li><li><code>countourIdx</code>：要绘制的索引，-1代表所有</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Mat gray, binary;</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">adaptiveThreshold(gray, binary, <span class="number">255</span>, ADAPTIVE_THRESH_GAUSSIAN_C,</span><br><span class="line">                  THRESH_BINARY_INV, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line">findContours(binary, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</span><br><span class="line">drawContours(src, contours, <span class="number">-1</span>, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">binary = cv.adaptiveThreshold(</span><br><span class="line">    gray, <span class="number">255</span>, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY_INV, <span class="number">255</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">_, contours, hierarchy = cv.findContours(</span><br><span class="line">    binary, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)</span><br><span class="line">cv.drawContours(src, contours, <span class="number">-1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, binary)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>findContours</code>会返回三个值，分别是，图像，轮廓，层级。</p></blockquote><h2 id="膨胀和腐蚀"><a href="#膨胀和腐蚀" class="headerlink" title="膨胀和腐蚀"></a>膨胀和腐蚀</h2><p>形态学变化是基于图像形状的一些简单操作。操作对象一般是二值图像，需要两个输入，一个是我们的原图，另一个是<strong>3x3的结构元素</strong>(内核)，决定了膨胀操作的本质。常见的操作是图像的膨胀和腐蚀。以及他们的进阶操作注入Opening、Closing、Gradient等等。</p><h3 id="获取结构元素"><a href="#获取结构元素" class="headerlink" title="获取结构元素"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gac342a1bb6eabf6f55c803b09268e36dc">获取结构元素</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getStructuringElement(shape, ksize)</span><br></pre></td></tr></table></figure><ol><li><code>shape</code>： <a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gac2db39b56866583a95a5680313c314ad">结构元素的形状</a><ol><li><code>MORPH_RECT</code>：矩形结构元素</li><li><code>MORPH_CROSS</code>：十字形结构元素</li><li><code>MORPH_ELLIPSE</code>：椭圆形结构元素</li></ol></li></ol><blockquote><p>用法在下面</p></blockquote><h3 id="膨胀"><a href="#膨胀" class="headerlink" title="膨胀"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga4ff0f3318642c4f469d0e11f242f3b6c">膨胀</a></h3><p>用大值填充小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dilate(src, dst, kernel)</span><br></pre></td></tr></table></figure><ol><li><code>kernel</code>：结构元素</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mat dilate_later;</span><br><span class="line">Mat kernel = getStructuringElement(MORPH_RECT, Size(<span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">dilate(src, dilate_later, kernel);</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line">imshow(<span class="string">&quot;binary&quot;</span>, dilate_later);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kernel = cv.getStructuringElement(cv.MORPH_RECT, (<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">dilate_later = cv.dilate(src, kernel)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, dilate_later)</span><br></pre></td></tr></table></figure><h3 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gaeb1e0c1033e3f6b891a25d0511362aeb">腐蚀</a></h3><p>用小值填充大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erode(src, dst, kernel)</span><br></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mat erode_later;</span><br><span class="line">Mat kernel = getStructuringElement(MORPH_RECT, Size(<span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">erode(src, erode_later, kernel);</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line">imshow(<span class="string">&quot;binary&quot;</span>, erode_later);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kernel = cv.getStructuringElement(cv.MORPH_RECT, (<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">erode_later = cv.erode(src, kernel)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, erode_later)</span><br></pre></td></tr></table></figure><h3 id="高级形态转化"><a href="#高级形态转化" class="headerlink" title="高级形态转化"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga67493776e3ad1a3df63883829375201f">高级形态转化</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">morphologyEx(src, dst, op, kernel)</span><br></pre></td></tr></table></figure><ol><li><code>op</code>：<a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga7be549266bad7b2e6a04db49827f9f32">形态转化方式</a><ol><li><code>MORPH_ERODE</code>：腐蚀</li><li><code>MORPH_DILATE</code>：膨胀</li><li><code>MORPH_OPEN</code>：开操作，先腐蚀后膨胀</li><li><code>MORPH_CLOSE</code>：闭操作，先膨胀后腐蚀</li><li>…</li></ol></li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mat src_later;</span><br><span class="line">Mat kernel = getStructuringElement(MORPH_RECT, Size(<span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// 开操作，其他操作将 op 的值进行更换即可</span></span><br><span class="line">morphologyEx(src, src_later, MORPH_OPEN, kernel);</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line">imshow(<span class="string">&quot;binary&quot;</span>, src_later);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kernel = getStructuringElement(cv.MORPH_RECT, Size(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 开操作，其他操作将 op 的值进行更换即可</span></span><br><span class="line">src_later = cv.morphologyEx(src, cv.MORPH_OPEN, kernel)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, src_later)</span><br></pre></td></tr></table></figure><h2 id="泛洪填充（漫水填充）"><a href="#泛洪填充（漫水填充）" class="headerlink" title="泛洪填充（漫水填充）"></a><a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#gaf1f55a048f8a45bc3383586e80b1f0d0">泛洪填充（漫水填充）</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">floodFill(image, mask，seedPoint, newVal, rect, loDiff&#x3D;Scalar(), upDiff&#x3D;Scalar(), flags)</span><br></pre></td></tr></table></figure><ol><li><code>seedPoint</code>：起始点</li><li><code>newVal</code>：新值</li><li><code>rect</code>：最小边界矩形，一般使用默认</li><li><code>loDiff</code>：最大较低色差</li><li><code>upDiff</code>：最大较高色差</li><li><code>flags</code>：操作标志<ol><li><code>FLOODFILL_FIXED_RANGE</code></li></ol></li></ol><p>$$<br>\texttt{src} (x’,y’)- \texttt{loDiff} \leq \texttt{src} (x,y) \leq \texttt{src} (x’,y’)+ \texttt{upDiff}<br>$$</p><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;5, 5&#125; 是一种简写方式，会自动生成 Point，&#123;0, 0, 255&#125;同理，会自动生成 Scalar</span></span><br><span class="line">floodFill(src, &#123;<span class="number">5</span>, <span class="number">5</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>&#125;);</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv.floodFill(src, (<span class="number">5</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src);</span><br></pre></td></tr></table></figure><h2 id="图像分水岭"><a href="#图像分水岭" class="headerlink" title="图像分水岭"></a><a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#ga3267243e4d3f95165d55a618c65ac6e1">图像分水岭</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watershed(image, markers)</span><br></pre></td></tr></table></figure><ol><li><code>markders</code>：标记，类型必须是CV_32S</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Mat <span class="title">markers</span><span class="params">(src.<span class="built_in">size</span>(), CV_32S)</span></span>;</span><br><span class="line"><span class="built_in">circle</span>(markers, &#123;src.<span class="built_in">size</span>().<span class="built_in">width</span> / <span class="number">2</span>, src.<span class="built_in">size</span>().<span class="built_in">height</span> / <span class="number">2</span>&#125;, <span class="number">2</span>, &#123;<span class="number">255</span>&#125;,</span><br><span class="line">       <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">circle</span>(markers, &#123;<span class="number">10</span>, <span class="number">10</span>&#125;, <span class="number">2</span>, &#123;<span class="number">1</span>&#125;, <span class="number">-1</span>);</span><br><span class="line">watershed(src, markers);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; markers &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">Mat result;</span><br><span class="line">markers.convertTo(result, CV_8UC3);</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line">imshow(<span class="string">&quot;result&quot;</span>, result);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">height, width = src.shape[:<span class="number">2</span>]</span><br><span class="line">markers = np.zeros(src.shape[:<span class="number">2</span>], np.int32)</span><br><span class="line">cv.circle(markers, (width // <span class="number">2</span>, height//<span class="number">2</span>), <span class="number">2</span>, (<span class="number">255</span>), <span class="number">-1</span>)</span><br><span class="line">cv.circle(markers, (<span class="number">10</span>, <span class="number">10</span>), <span class="number">2</span>, (<span class="number">1</span>), <span class="number">-1</span>)</span><br><span class="line">cv.watershed(src, markers)</span><br><span class="line">markers = markers.astype(np.uint8)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, markers)</span><br></pre></td></tr></table></figure><blockquote><p>注意：标定点一般需要我们实际取获取。这里仅仅是使用固定点举例子罢了。</p></blockquote><h2 id="距离变换"><a href="#距离变换" class="headerlink" title="距离变换"></a><a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#ga25c259e7e2fa2ac70de4606ea800f12f">距离变换</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distanceTransform(src, dst, distanceType, maskSize, dstType&#x3D;CV_32F)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：8位单通道二进制图</li><li><code>dst</code>：输出具有计算出的距离图像。它是大小与<code>src</code>相同的8位或32位浮点单通道图像。</li><li><code>distanceType</code>：<a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#gaa2bfbebbc5c320526897996aafa1d8eb">距离类型</a>，一般采用欧式距离就好了<ol><li><code>DIST_L1</code>：distance = |x1-x2| + |y1-y2|</li><li><code>DIST_L2</code>：简单的欧式距离</li><li><code>DIST_C</code>：distance = max(|x1-x2|,|y1-y2|)</li><li><code>DIST_L12</code>：L1-L2 metric: distance = 2(sqrt(1+x*x/2) - 1))</li><li><code>DIST_FAIR</code>：distance = c^2(|x|/c-log(1+|x|/c)), c = 1.3998</li><li><code>DIST_WELSCH</code>：distance = c^2/2(1-exp(-(x/c)^2)), c = 2.9846</li><li><code>DIST_HUBER</code>：distance = |x|&lt;c ? x^2/2 : c(|x|-c/2), c=1.345</li></ol></li><li><code>maskSize</code>：距离变换蒙版大小，一般用3或5</li><li><code>dstType</code>：输出类型，一般采用默认值</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Mat gray, binary, dst;</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">adaptiveThreshold(gray, binary, <span class="number">255</span>, ADAPTIVE_THRESH_GAUSSIAN_C,</span><br><span class="line">                  THRESH_BINARY_INV, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">distanceTransform(binary, dst, DIST_L2, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 将数据归一化到0-1之间，显示效果比较好</span></span><br><span class="line">normalize(dst, dst, <span class="number">0</span>, <span class="number">1</span>, NORM_MINMAX);</span><br><span class="line">imshow(<span class="string">&quot;dst&quot;</span>, dst);</span><br><span class="line">imshow(<span class="string">&quot;binary&quot;</span>, binary);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line">binary = cv.adaptiveThreshold(</span><br><span class="line">    gray, <span class="number">255</span>, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY_INV, <span class="number">255</span>, <span class="number">1</span>)</span><br><span class="line">dst = cv.distanceTransform(binary, cv.DIST_L2, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 将数据归一化到0-1之间，显示效果比较好</span></span><br><span class="line">cv.normalize(dst, dst, <span class="number">0</span>, <span class="number">1</span>, cv.NORM_MINMAX)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, binary)</span><br><span class="line">cv.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV 入门</title>
      <link href="/2019/e181f182.html"/>
      <url>/2019/e181f182.html</url>
      
        <content type="html"><![CDATA[<h2 id="图像的读写与显示"><a href="#图像的读写与显示" class="headerlink" title="图像的读写与显示"></a>图像的读写与显示</h2><h3 id="读取图像"><a href="#读取图像" class="headerlink" title="读取图像"></a>读取图像</h3><p>使用函数 <code>cv.imread()</code> 来读取图像，该函数共两个参数</p><ol><li>图像的路径</li><li>图像的读取方式<ol><li><code>cv.IMREAD_COLOR</code> 加载彩色图像，图像的任何透明度都将被忽略。这是默认标志</li><li><code>cv.IMREAD_GRAYSCALE</code> 以灰度模式加载图像</li><li><code>cv.IMREAD_UNCHANGED</code> 加载图像，包括 <code>alpha</code> 通道</li></ol></li></ol><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;1.jpg&quot;</span>, cv.IMREAD_COLOR)</span><br></pre></td></tr></table></figure><p><strong>警告</strong>：如果图像路径错误，它将不会引发任何错误，但是会返回一个空值</p><a id="more"></a><h3 id="显示图像"><a href="#显示图像" class="headerlink" title="显示图像"></a>显示图像</h3><p>使用函数 <code>cv.imshow()</code> 在窗口显示图像，窗口自动适合图像尺寸。该函数共两个参数。</p><ol><li>窗口名称</li><li>要显示的图像</li></ol><p>可以根据需求创建任意多个窗口，但需要使用不同的窗口名称</p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cv.imshow(<span class="string">&#x27;image&#x27;</span>, img)</span><br><span class="line">cv.waitkey()</span><br><span class="line">cv.destoryAllWindows()</span><br></pre></td></tr></table></figure><p><code>cv.waitkey()</code>等待按键按下功能，其参数是时间（以毫秒为单位），默认为0，即永远等待。</p><p><code>cv.destoryAllWindows()</code> 用来回收我们创建的所有窗口。</p><h3 id="保存图像"><a href="#保存图像" class="headerlink" title="保存图像"></a>保存图像</h3><p>使用函数<code>cv.imwrite()</code>来保存图像，该函数共两个参数。</p><ol><li>文件名</li><li>需要保存的图像</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.imwrite(<span class="string">&#x27;2.jpg&#x27;</span>, img)</span><br></pre></td></tr></table></figure><h2 id="图像的基本操作"><a href="#图像的基本操作" class="headerlink" title="图像的基本操作"></a>图像的基本操作</h2><blockquote><p>来源：<a href="https://docs.opencv.org/4.1.2/d3/df2/tutorial_py_basic_ops.html">https://docs.opencv.org/4.1.2/d3/df2/tutorial_py_basic_ops.html</a></p></blockquote><p>本节中的大部分操作都与<code>numpy</code>相关，因为要操作图像数据，而图像数据就是一个<code>np.ndarray</code>的数组。</p><p><strong>注意</strong>：在OpenCV中图像都处于GBR模式，使用这种方式的是因为历史遗留问题，在早年大部分的照相机制造商和软件供应商中流行的就是BGR模式， OpenCV为了迎合当时开发者的习惯就是用了BGR模式，然而在当今这个时代RGB又流行了起来，OpenCV已经无法在兼容RGB模式了，所以只能这样将就着使用GBR模式了</p><h3 id="访问和修改像素值"><a href="#访问和修改像素值" class="headerlink" title="访问和修改像素值"></a>访问和修改像素值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&#x27;1.jpg&#x27;</span>)</span><br><span class="line">px = img[<span class="number">100</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># [2 6 26]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以仅接收 rgb的任意一个值</span></span><br><span class="line">blue = img[<span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">blue, green, red = img[<span class="number">100</span>, <span class="number">100</span>] <span class="comment"># 不想接收的可以用 _ 代替</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改像素值</span></span><br><span class="line">img[<span class="number">100</span>, <span class="number">100</span>] = <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span></span><br></pre></td></tr></table></figure><p><strong>警告</strong>：Numpy是用于快速数组计算的优化库。因此，简单的访问每个元素并对其进行修改是非常缓慢的，不建议这样使用。</p><p>更好的访问像素值和修改像素值的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问 RED 的值</span></span><br><span class="line">img.item(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 RED 的值</span></span><br><span class="line">img.itemset((<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>), <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="访问图像属性"><a href="#访问图像属性" class="headerlink" title="访问图像属性"></a>访问图像属性</h3><p>图像的属性包括：行、列、通道数、图像的数据类型、像素数等等</p><p>图像的形状可以通过<code>img.shape</code>访问。它返回行，列和通道数的元组（如果是彩色的图像）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(img.shape)</span><br><span class="line"><span class="comment"># (1227 690 3)</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果图像是灰度的，则返回的元组只会包含行和列，因此这是检测加载的图像是灰度还是彩色的好方法。</p><p>像素总数可以通过<code>img.size</code>进行获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(img.size)</span><br><span class="line"><span class="comment"># 846630</span></span><br></pre></td></tr></table></figure><p>图像数据类型可以通过<code>img.dtype</code>进行获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(img.dtype)</span><br><span class="line"><span class="comment"># uint8</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>： <code>img.dtype</code>在调试的时候非常重要，因为OpenCV-Python代码中大部分的错误可能都是因为无效数据类型引起的。</p><h3 id="图像ROI（Region-Of-Internest）"><a href="#图像ROI（Region-Of-Internest）" class="headerlink" title="图像ROI（Region Of Internest）"></a>图像ROI（<em>Region Of Internest</em>）</h3><p>有时候我们需要使用图像的某个区域，这是可以通过NumPy索引的方式获取ROI</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取图像第220行到500行，250行到620行的图像</span></span><br><span class="line">img[<span class="number">220</span>:<span class="number">500</span>, <span class="number">250</span>:<span class="number">620</span>]</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>如果对裁剪区域内容进行修改，这个值也会反馈裁剪之前的图像数组，因为在NumPy中默认使用的是引用拷贝的方式，所以在需要对特定的区域修改的时候，我们可以将其裁剪出来，然后在更小的区域做处理，这样可以提高我们修改的速度和准确性。</p><h3 id="分割和合并图像通道"><a href="#分割和合并图像通道" class="headerlink" title="分割和合并图像通道"></a>分割和合并图像通道</h3><p>有的时候需要分别处理图像的G、B、R通道。可以使用以下方法做到这一点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拆分</span></span><br><span class="line">b, g, r = cv.split(img)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">b = img[:, :, <span class="number">0</span>]</span><br><span class="line">g = img[:, :, <span class="number">1</span>]</span><br><span class="line">r = img[:, :, <span class="number">2</span>]</span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line">img = cv.merge((b, g, r))</span><br></pre></td></tr></table></figure><p><strong>警告</strong>：<code>cv.split()</code>是一项非常耗时的操作，相比于numpy的索引而言，实测速度大约相差百倍，数据量大的情况下可以到几百倍。</p><h3 id="为图像设置边框（填充）"><a href="#为图像设置边框（填充）" class="headerlink" title="为图像设置边框（填充）"></a>为图像设置边框（填充）</h3><p>如果要在图像周围创建边框，则可以使用 <code>cv.copyMakeBorder()</code>。但是它在卷积运算，零填充等方便有更多的运用。该函数共7个参数：</p><ol><li><code>src</code> 输入的图像</li><li><code>top</code> 上边界宽度</li><li><code>bottom</code> 下边界宽度</li><li><code>left</code> 左边界宽度</li><li><code>right</code> 右边界宽度</li><li><code>borderType</code> 边界类型<ol><li><code>cv.BORDER_CONSTANT</code> 添加恒定的色彩边框</li><li><code>cv.BORDER_REFLECT</code> 边框是边框元素的镜像，例如：fedcba | abcdefgh |hgfedcb</li><li><code>cv.BORDER_REFLECT_101 </code>或 <code>cv.BORDER_DEFAULT</code> ，与上述基本相同，但是略有变化。例如：gfedcb | abcdefgh | gfedcba</li><li><code>cv.BORDER_REPLICATE</code> 最后一个元素被复制，例如：aaaaaa | abcdefg | gggggg</li><li><code>cv.BORDER_WRAP</code> 例如：cdefgh | abcdefgh | abcdefg</li></ol></li><li><code>value</code> 颜色值，类型为<code>cv.BORDER_CONSTANT</code>有效</li></ol><h2 id="图像上的算术运算"><a href="#图像上的算术运算" class="headerlink" title="图像上的算术运算"></a>图像上的算术运算</h2><blockquote><p>来源：<a href="https://docs.opencv.org/4.1.2/d0/d86/tutorial_py_image_arithmetics.html">https://docs.opencv.org/4.1.2/d0/d86/tutorial_py_image_arithmetics.html</a></p></blockquote><h3 id="图像加法"><a href="#图像加法" class="headerlink" title="图像加法"></a>图像加法</h3><p>图像的加法可以通过OpenCV函数<code>cv.add()</code>或仅通过NumPy操作（res = img1 + img2）。两个图像应该具有相同的深度和类型，或者第二个图像可以只有一个标量。</p><p><strong>注意</strong>：OpenCV的加法是饱和运算，而NumPy的加法是模运算，简单的讲就是，当相加的结果超过255的时候，OpenCV的相加的值为255，而NumPy相加的值为其取模的值</p><h3 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h3><p>这也类似于图像的加法，但是对图像赋予的权重不同，以使其具有融合或者透明的感觉。根据以下等式添加图像：<br>$$<br>g(x)=(1-\alpha)f_{0}(x)+(\alpha)f_{1}(x)<br>$$<br>在 OpenCV 中，我们可以使用<code>cv.addWeighted()</code>函数来达到图像融合的效果，该函数有7个参数：</p><ol><li><code>src1</code>：第一个输入的数组</li><li><code>alpha</code>：第一个数组元素的权重</li><li><code>src2</code>：第二个输入的数组</li><li><code>beta</code>：第二个数组元素的权重</li><li><code>gamma</code>：标量，加到每个元素中。</li><li><code>dst</code>：输出数组</li><li><code>dtype</code>：输出的数据类型</li></ol><p>大致可以表示为如下方程式：<br>$$<br>dst = \alpha \cdot img_{1} + \beta \cdot img_{2} + \gamma<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Service 通讯</title>
      <link href="/2019/a2babe33.html"/>
      <url>/2019/a2babe33.html</url>
      
        <content type="html"><![CDATA[<h2 id="Service通讯机制"><a href="#Service通讯机制" class="headerlink" title="Service通讯机制"></a>Service通讯机制</h2><p>Service通讯分为<code>client端</code>和<code>server端</code>。</p><ul><li><code>client端</code>负责发送请求(Request)给<code>server端</code>。</li><li><code>server端</code>负责接收<code>client端</code>发送的请求数据。</li><li><code>server端</code>收到数据后，根据请求数据和当前的业务需求，产生数据，将数据(Response)返回给<code>client端</code>。</li></ul><p>Service通讯的特点：</p><ul><li>同步数据访问</li><li>具有响应反馈机制</li><li>一个server多个client</li><li>注重业务逻辑处理</li></ul><a id="more"></a><p>Service通讯的关键点：</p><ul><li><code>service</code>的地址名称</li><li><code>client端</code>访问<code>server端</code>的数据格式</li><li><code>server端</code>响应<code>client端</code>的数据格式</li></ul><p>Service通讯架构如下图：</p><p><img src="/img/ros/ros_service.png" alt="ros_service"></p><blockquote><p>文本使用服务端接收数据端数据，并进行简单的加法运算后返回给客户端</p><p>首先在<code>ws</code>的<code>src</code>的目录下，使用<code>catkin_create_pkg demo_service roscpp rospy rosmsg</code> 创建 <code>demo_service</code> package</p></blockquote><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><h3 id="C-版本"><a href="#C-版本" class="headerlink" title="C++ 版本"></a>C++ 版本</h3><ol><li>在<code>src</code>目录下创建一个<code>server.cc</code>文件，将以下代码粘贴到到该文件中</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;cpp_server&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// todo 处理业务逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_server</span><br><span class="line">  src/server.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  demo_server</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Server</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;roscpp_tutorials/TwoInts.h&quot;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 service 名称</span></span><br><span class="line"><span class="keyword">char</span> service_name[] = <span class="string">&quot;demo_service&quot;</span>;</span><br><span class="line"><span class="comment">// 创建一个 server</span></span><br><span class="line"><span class="keyword">const</span> ros::ServiceServer &amp;server =</span><br><span class="line">    node.advertiseService(service_name, serviceCallback);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建 <code>serviceCallback</code> 回调函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">serviceCallback</span><span class="params">(roscpp_tutorials::TwoInts::Request &amp;request,</span></span></span><br><span class="line"><span class="function"><span class="params">                     roscpp_tutorials::TwoInts::Response &amp;response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  返回值 bool：true代表成功响应，false代表拒绝响应</span></span><br><span class="line">    <span class="comment">//  可根据业务实际情况返回相应数据，本例就不做false处理了</span></span><br><span class="line">    response.sum = request.a + request.b;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>server.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;py_server&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 处理业务逻辑</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Server</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rospy_tutorials.srv <span class="keyword">import</span> AddTwoInts, AddTwoIntsRequest, AddTwoIntsResponse</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 Service 名称</span></span><br><span class="line">service_name = <span class="string">&quot;demo_service&quot;</span></span><br><span class="line"><span class="comment"># 创建 server</span></span><br><span class="line">server = rospy.Service(service_name, AddTwoInts, serviceCallback)</span><br></pre></td></tr></table></figure><ol start="3"><li>创建 <code>serviceCallback</code> 回调函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serviceCallback</span>(<span class="params">request=AddTwoIntsRequest(<span class="params"></span>)</span>):</span></span><br><span class="line">    response = AddTwoIntsResponse()</span><br><span class="line">    response.sum = request.a + request.b</span><br><span class="line">    <span class="comment"># 返回一个对应类型的 response 代表成功响应</span></span><br><span class="line">    <span class="comment"># 返回空值，代表拒绝响应</span></span><br><span class="line">    <span class="comment"># 在 Python 中可以更加灵活的使用返回数据，此例返回 a+b 也可以达到效果</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></li><li><p>给 server.py 赋予可执行权限</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_service/scripts/server.py</span><br></pre></td></tr></table></figure><h3 id="使用rosservice调试"><a href="#使用rosservice调试" class="headerlink" title="使用rosservice调试"></a>使用rosservice调试</h3><ol><li>将当前工作空间的环境变量添加到<code>bash</code>或<code>zsh</code>中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据使用不同的 shell 使用不同的环境变量，两者选其一</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment"># 使用 bash</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.zsh  <span class="comment"># 使用 zsh</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>运行 server 程序</p><ol><li>c++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_service demo_server</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_service server.py</span><br></pre></td></tr></table></figure></li><li><p>使用<code>rosservice call /demo_service &quot;a: 2 b: 1&quot;</code></p><ul><li>响应数据  sum: 3</li></ul></li></ol><h3 id="使用-rqt-service-caller-调试"><a href="#使用-rqt-service-caller-调试" class="headerlink" title="使用 rqt_service_caller 调试"></a>使用 rqt_service_caller 调试</h3><p>前两步与上面相同，然后使用<code>rosrun rqt_service_caller rqt_service_caller</code></p><ol><li>选择对应的<code>service</code>，本例为<code>demo_service</code></li><li>填充数据后按右上角的<code>call</code>发送</li><li>示意图如下所示</li></ol><p><img src="/img/ros/rqt_service_caller.jpg" alt="rqt_service_caller"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>使用第三方的srv与msg类似，这里就不做赘述，配置方法与msg一样，<a href="/2019/10/18/ros/%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E8%80%85/">详情可见</a></li><li>在回调函数的使用中，Python 与 C++ 的参数不一样，C++通过返回bool值判断是否成功响应，Python通过是否返回空值判断是否成功响应。</li><li>C++使用<code>node.advertiseService</code>创建<code>server</code></li><li>Python使用<code>rospy.Service</code>创建<code>server</code></li></ol><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><h3 id="C-版本-1"><a href="#C-版本-1" class="headerlink" title="C++ 版本"></a>C++ 版本</h3><ol><li>在<code>src</code>目录下创建一个<code>client.cc</code>文件，将以下代码粘贴到到该文件中</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;cpp_client&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// todo 处理业务逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_client</span><br><span class="line">  src/client.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  demo_client</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Client</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;roscpp_tutorials/TwoInts.h&quot;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 创建 service 名称</span></span><br><span class="line">   <span class="keyword">char</span> service_name[] = <span class="string">&quot;demo_service&quot;</span>;</span><br><span class="line">   <span class="comment">// 创建 Client</span></span><br><span class="line">   ros::ServiceClient client =</span><br><span class="line">       node.serviceClient&lt;roscpp_tutorials::TwoInts&gt;(service_name);</span><br><span class="line">   <span class="comment">// 创建一个Request 和 Response</span></span><br><span class="line">roscpp_tutorials::TwoInts::Request request;</span><br><span class="line">   roscpp_tutorials::TwoInts::Response response;</span><br><span class="line">request.a = <span class="number">1</span>, request.b = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">if</span> (client.call(request, response)) &#123; <span class="comment">// 判断是否响应</span></span><br><span class="line">       <span class="comment">// 获取到响应的数据</span></span><br><span class="line">       <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; response.sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;服务器 拒绝&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="Python-版本-1"><a href="#Python-版本-1" class="headerlink" title="Python 版本"></a>Python 版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>client.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;py_client&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 处理业务逻辑</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Client</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rospy_tutorials.srv <span class="keyword">import</span> AddTwoInts, AddTwoIntsRequest, AddTwoIntsResponse</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 Service 名称</span></span><br><span class="line">service_name = <span class="string">&quot;demo_service&quot;</span></span><br><span class="line"><span class="comment"># 创建 server</span></span><br><span class="line">client = rospy.ServiceProxy(service_name, AddTwoInts)</span><br><span class="line"><span class="comment"># 创建 Request</span></span><br><span class="line">request = AddTwoIntsRequest()</span><br><span class="line">request.a, request.b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = client.call(request)</span><br><span class="line">    print(response.sum)</span><br><span class="line"><span class="keyword">except</span> rospy.ServiceException <span class="keyword">as</span> error:     <span class="comment"># 服务器拒绝响应的错误</span></span><br><span class="line">    print(<span class="string">&quot;服务器拒绝响应&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>给 client.py 赋予可执行权限</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_service/scripts/client.py</span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>运行之前写好的 Server 端，分别 <code>C++</code> 程序和 <code>Python</code> 程序，即可。</p><ol><li>C++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_service demo_client</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_service client.py</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li>C++ 创建 Client 的方法为<code>node.serviceClient&lt;srv_type&gt;(srv_name)</code></li><li>Python 创建的 Client 的方法为<code>rospy.ServiceProxy(srv_name, srv_type)</code></li><li>C++ 以call的返回值的Yes，No来判断服务器是否响应</li><li>Python 使用 <code>try...except</code>判断是是否是<code>rospy.ServiceException</code>类型来判断服务器是否成功响应</li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_server&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_server&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;// todo 填写 service 的类型&quot;,</span><br><span class="line">            &quot;#include \&quot;$&#123;1:service_class&#125;\&quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;// todo 填写 service 的类型&quot;,</span><br><span class="line">            &quot;bool serviceCallback($&#123;2:service_class&#125;::Request &amp;request,&quot;,</span><br><span class="line">            &quot;                     $&#123;2:service_class&#125;::Response &amp;response) &#123;&quot;,</span><br><span class="line">            &quot;    //  TODO 服务端需要处理的业务逻辑&quot;,</span><br><span class="line">            &quot;    //  返回值 bool：true代表成功响应，false代表拒绝响应&quot;,</span><br><span class="line">            &quot;    return true;&quot;,</span><br><span class="line">            &quot;&#125;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;// 创建 service 名称&quot;,</span><br><span class="line">            &quot;// todo 填写 service_name&quot;,</span><br><span class="line">            &quot;char service_name[] = \&quot;$&#123;3:service_name&#125;\&quot;;&quot;,</span><br><span class="line">            &quot;// 创建一个 server&quot;,</span><br><span class="line">            &quot;const ros::ServiceServer &amp;server =&quot;,</span><br><span class="line">            &quot;    node.advertiseService(service_name, serviceCallback);&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_client&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_client&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;// todo 填写 service 的类型&quot;,</span><br><span class="line">            &quot;#include \&quot;$&#123;1:service_class&#125;\&quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;// todo 填写 service_name&quot;,</span><br><span class="line">            &quot;char service_name[] = \&quot;$&#123;2:service_name&#125;\&quot;;&quot;,</span><br><span class="line">            &quot;// 创建 Client&quot;,</span><br><span class="line">            &quot;ros::ServiceClient client =&quot;,</span><br><span class="line">            &quot;    node.serviceClient&lt;$&#123;3:service_class&#125;&gt;(service_name);&quot;,</span><br><span class="line">            &quot;// 创建一个Request 和 Response&quot;,</span><br><span class="line">            &quot;$&#123;3:service_class&#125;::Request request;&quot;,</span><br><span class="line">            &quot;$&#123;3:service_class&#125;::Response response;&quot;,</span><br><span class="line">            &quot;if (client.call(request, response)) &#123; // 判断是否响应&quot;,</span><br><span class="line">            &quot;    // 获取到响应的数据&quot;,</span><br><span class="line">            &quot;    // todo 进行获取到数据之后的业务逻辑处理&quot;,</span><br><span class="line">            &quot;&#125; else &#123;&quot;,</span><br><span class="line">            &quot;    std::cout &lt;&lt; \&quot;服务器 拒绝\&quot; &lt;&lt; std::endl;&quot;,</span><br><span class="line">            &quot;&#125;&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_server&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_server&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;# todo 填写 service 的类型&quot;,</span><br><span class="line">            &quot;from $&#123;1&#125;.srv import $&#123;2&#125;, $&#123;2&#125;Request, $&#123;2&#125;Response&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;def serviceCallback(request=$&#123;2&#125;Request()):&quot;,</span><br><span class="line">            &quot;    response = $&#123;2&#125;Response()&quot;,</span><br><span class="line">            &quot;    # 返回一个对应类型的 response 代表成功响应&quot;,</span><br><span class="line">            &quot;    # 返回空值，代表拒绝响应&quot;,</span><br><span class="line">            &quot;    return response&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;# 创建 Service 名称&quot;,</span><br><span class="line">            &quot;# todo 填写一个 service 的名称&quot;,</span><br><span class="line">            &quot;service_name = \&quot;$&#123;3:service_name&#125;\&quot;&quot;,</span><br><span class="line">            &quot;# 创建 server&quot;,</span><br><span class="line">            &quot;server = rospy.Service(service_name, $&#123;2&#125;, serviceCallback)&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_client&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_client&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;# todo 填写 service 的类型&quot;,</span><br><span class="line">            &quot;from $&#123;1&#125;.srv import $&#123;2&#125;, $&#123;2&#125;Request, $&#123;2&#125;Response&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;# 创建 Service 名称&quot;,</span><br><span class="line">            &quot;service_name = \&quot;$&#123;3&#125;\&quot;&quot;,</span><br><span class="line">            &quot;# 创建 Server&quot;,</span><br><span class="line">            &quot;client = rospy.ServiceProxy(service_name, $&#123;2&#125;)&quot;,</span><br><span class="line">            &quot;# 创建 Request&quot;,</span><br><span class="line">            &quot;request = $&#123;2&#125;Request()&quot;,</span><br><span class="line">            &quot;request.a, request.b = 1, 2&quot;,</span><br><span class="line">            &quot;try:&quot;,</span><br><span class="line">            &quot;    response = client.call(request)&quot;,</span><br><span class="line">            &quot;    print(response.sum)&quot;,</span><br><span class="line">            &quot;except rospy.ServiceException as error:     # 服务器拒绝响应的错误&quot;,</span><br><span class="line">            &quot;    print(\&quot;服务器拒绝响应\&quot;)&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;roscpp_tutorials/TwoInts.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">serviceCallback</span><span class="params">(roscpp_tutorials::TwoInts::Request &amp;request,</span></span></span><br><span class="line"><span class="function"><span class="params">                     roscpp_tutorials::TwoInts::Response &amp;response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  返回值 bool：true代表成功响应，false代表拒绝响应</span></span><br><span class="line">    <span class="comment">//  可根据业务实际情况返回相应数据，本例就不做false处理了</span></span><br><span class="line">    response.sum = request.a + request.b;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;cpp_server&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// 创建 service 名称</span></span><br><span class="line">    <span class="keyword">char</span> service_name[] = <span class="string">&quot;demo_service&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建一个 server</span></span><br><span class="line">    <span class="keyword">const</span> ros::ServiceServer &amp;server =</span><br><span class="line">        node.advertiseService(service_name, serviceCallback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> rospy_tutorials.srv <span class="keyword">import</span> AddTwoInts, AddTwoIntsRequest, AddTwoIntsResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serviceCallback</span>(<span class="params">request=AddTwoIntsRequest(<span class="params"></span>)</span>):</span></span><br><span class="line">    response = AddTwoIntsResponse()</span><br><span class="line">    response.sum = request.a + request.b</span><br><span class="line">    <span class="comment"># 返回一个对应类型的 response 代表成功响应</span></span><br><span class="line">    <span class="comment"># 返回空值，代表拒绝响应</span></span><br><span class="line">    <span class="comment"># 在 Python 中可以更加灵活的使用返回数据，此例返回 a+b 也可以达到效果</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;py_server&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建 Service 名称</span></span><br><span class="line">    service_name = <span class="string">&quot;demo_service&quot;</span></span><br><span class="line">    <span class="comment"># 创建 server</span></span><br><span class="line">    server = rospy.Service(service_name, AddTwoInts, serviceCallback)</span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><h3 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h3><h4 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;roscpp_tutorials/TwoInts.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;cpp_client&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 service 名称</span></span><br><span class="line">    <span class="keyword">char</span> service_name[] = <span class="string">&quot;demo_service&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建 Client</span></span><br><span class="line">    ros::ServiceClient client =</span><br><span class="line">        node.serviceClient&lt;roscpp_tutorials::TwoInts&gt;(service_name);</span><br><span class="line">    <span class="comment">// 创建一个Request 和 Response</span></span><br><span class="line">    roscpp_tutorials::TwoInts::Request request;</span><br><span class="line">    roscpp_tutorials::TwoInts::Response response;</span><br><span class="line">    request.a = <span class="number">1</span>, request.b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (client.call(request, response)) &#123; <span class="comment">// 判断是否响应</span></span><br><span class="line">        <span class="comment">// 获取到响应的数据</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; response.sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;服务器 拒绝&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> rospy_tutorials.srv <span class="keyword">import</span> AddTwoInts, AddTwoIntsRequest, AddTwoIntsResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;py_client&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建 Service 名称</span></span><br><span class="line">    service_name = <span class="string">&quot;demo_service&quot;</span></span><br><span class="line">    <span class="comment"># 创建 server</span></span><br><span class="line">    client = rospy.ServiceProxy(service_name, AddTwoInts)</span><br><span class="line">    <span class="comment"># 创建 Request</span></span><br><span class="line">    request = AddTwoIntsRequest()</span><br><span class="line">    request.a, request.b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = client.call(request)</span><br><span class="line">        print(response.sum)</span><br><span class="line">    <span class="keyword">except</span> rospy.ServiceException <span class="keyword">as</span> error:     <span class="comment"># 服务器拒绝响应的错误</span></span><br><span class="line">        print(<span class="string">&quot;服务器拒绝响应&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> ROS Service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息的发布者（Publisher）</title>
      <link href="/2019/c8e84d4d.html"/>
      <url>/2019/c8e84d4d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境说明</p><p>ROS版本：ROS Kinetic Kame </p><p>Ubuntu版本：Ubuntu 16.04.6 LTS，（<code>lsb_release -a</code>）</p><p>Python版本：Python 2.7.12</p><p>CMake 版本：3.5.1</p></blockquote><p>前文已经讲过</p><ol><li><a href="/2019/ros-ws-pkg.html" title="ROS 工作空间和包">ROS 工作空间和包</a></li><li><a href="/2019/ros-msg-srv.html" title="ROS 消息（msg）和服务（srv）">ROS 消息（msg）和服务（srv）</a></li><li><a href="/2019/ROS-Overview.html" title="ROS 概述">ROS 概述</a></li></ol><blockquote><p>以上是这篇文章的基础</p><p>以下所有文件都创建在 ws 的工作空间下</p></blockquote><a id="more"></a><h2 id="topic通讯机制"><a href="#topic通讯机制" class="headerlink" title="topic通讯机制"></a>topic通讯机制</h2><p>ROS 中节点间通信，其中一方为消息的发布者，定义为<code>Publisher</code>，另一方为消息的订阅者，定义为<code>Subscriber</code>。考虑到消息需要广泛传播，ROS在设计中没有将该中设计为点对点的单一传递，而是有发布者发布数据到<code>Topic</code>中，想要获得消息的任何一方都可以在 <code>topic</code> 中去获取数据，类似于udp的广播机制，大致的通讯原理如下图：</p><p><img src="/img/ros/ros_topic.png" alt="ros_topic"></p><blockquote><p>使用命令<code>catkin_create_pkg demo_topic roscpp rospy rosmsg</code> 创建一个名为<code>demo_topic</code>的包</p></blockquote><h2 id="创建只发布std消息的节点"><a href="#创建只发布std消息的节点" class="headerlink" title="创建只发布std消息的节点"></a>创建只发布std消息的节点</h2><h3 id="c-版本"><a href="#c-版本" class="headerlink" title="c++版本"></a>c++版本</h3><ol><li>在<code>src</code>目录下创建一个 <code>publisher.cc</code> 文件，将以下代码添加到该文件中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_publisher&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// TODO 将业务逻辑写在此处</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环  </span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_publisher</span><br><span class="line">  src/publisher.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  demo_publisher</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Publisher</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先使用 std 库中的简易消息</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line"><span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line"><span class="comment">// 获取一个 publisher 的对象</span></span><br><span class="line"><span class="keyword">const</span> ros::Publisher &amp;pub =</span><br><span class="line">node.advertise&lt;std_msgs::String&gt;(topic_name, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 创建一个要发送的消息对象</span></span><br><span class="line">std_msgs::String str;</span><br><span class="line"><span class="comment">// 填充要发送的数据</span></span><br><span class="line">str.data = <span class="string">&quot;I send a message&quot;</span>;</span><br><span class="line"><span class="comment">// 使用 publisher 发送该消息</span></span><br><span class="line"><span class="keyword">while</span> (ros::ok()) &#123;</span><br><span class="line">    pub.publish(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>publisher.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_publisher&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 将业务逻辑写在此处</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Publisher</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先使用 std 库中的简易消息</span></span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line"><span class="comment"># 创建一个发布者</span></span><br><span class="line">pub = rospy.Publisher(topic_name, String, queue_size=<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 创建一个要发布的消息</span></span><br><span class="line">string = String()</span><br><span class="line"><span class="comment"># 填充要发布的消息</span></span><br><span class="line">string.data = <span class="string">&quot;I send a message&quot;</span></span><br><span class="line"><span class="comment"># 使用 publisher 发送该消息</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">    pub.publish(string)</span><br></pre></td></tr></table></figure></li><li><p>给 publisher.py 赋予可执行权限</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_topic/scripts/publisher.py</span><br></pre></td></tr></table></figure><h3 id="使用-rqt-topic-工具调试"><a href="#使用-rqt-topic-工具调试" class="headerlink" title="使用 rqt_topic 工具调试"></a>使用 rqt_topic 工具调试</h3><ol><li>将当前工作空间的环境变量添加到<code>bash</code>或<code>zsh</code>中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据使用不同的 shell 使用不同的环境变量，两者选其一</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment"># 使用 bash</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.zsh  <span class="comment"># 使用 zsh</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>运行 demo_publisher</p><ol><li>c++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic demo_publisher</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic publisher.py</span><br></pre></td></tr></table></figure></li><li><p>打开 rqt_topic 工具</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_topic rqt_topic</span><br></pre></td></tr></table></figure><ol start="4"><li>勾选 demo_topic，结果如下</li></ol><p><img src="/img/ros/rqt_topic1.jpg" alt="rqt_topic1"></p><h2 id="创建发布自定义消息的节点"><a href="#创建发布自定义消息的节点" class="headerlink" title="创建发布自定义消息的节点"></a>创建发布自定义消息的节点</h2><p>我们使用在<a href="(/2019/10/15/ros/ROS%20%E6%B6%88%E6%81%AF(msg)%E5%92%8C%E6%9C%8D%E5%8A%A1(srv)/">ros消息</a>讲过的<code>demo_msgs</code>包中的<code>Team.msg</code>来传输数据</p><h3 id="c-版本-1"><a href="#c-版本-1" class="headerlink" title="c++版本"></a>c++版本</h3><ol><li>在<code>src</code>目录下创建一个 <code>publisher1.cc</code> 文件，将以下代码添加到该文件中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_publisher&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// TODO 将业务逻辑写在此处</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环  </span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_publisher1</span><br><span class="line">  src/publisher1.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  demo_publisher1</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>CMakeLists.txt</code>文件的<code>find_package</code>中添加<code>demo_msgs</code>的依赖   </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rosmsg</span><br><span class="line">  rospy</span><br><span class="line">  demo_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li><p>创建 <code>Publisher</code> 对象</p><ol><li><p>导入要发送的消息的头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;demo_msgs/Team.h&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p>创建对象，并发送消息</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line"><span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line"><span class="comment">// 获取一个 publisher 的对象</span></span><br><span class="line"><span class="keyword">const</span> ros::Publisher &amp;pub =</span><br><span class="line">    node.advertise&lt;demo_msgs::Team&gt;(topic_name, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 创建一个要发送的消息对象</span></span><br><span class="line">demo_msgs::Team team;</span><br><span class="line"><span class="comment">// 填充要发送的数据</span></span><br><span class="line">team.name = <span class="string">&quot;I&#x27;m a team&quot;</span>;</span><br><span class="line">team.leader.name = <span class="string">&quot;AskeyNil&quot;</span>;</span><br><span class="line">team.leader.age = <span class="number">18</span>;</span><br><span class="line">team.location.angular.x = <span class="number">1</span>;</span><br><span class="line">team.location.linear.z = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 使用 publisher 发送该消息</span></span><br><span class="line"><span class="keyword">while</span> (ros::ok()) &#123;</span><br><span class="line"> pub.publish(team);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>publisher1.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_publisher&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 将业务逻辑写在此处</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Publisher</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> demo_msgs.msg <span class="keyword">import</span> Team</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line"><span class="comment"># 创建一个发布者</span></span><br><span class="line">pub = rospy.Publisher(topic_name, Team, queue_size=<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 创建一个要发布的消息</span></span><br><span class="line">team = Team()</span><br><span class="line"><span class="comment"># 填充要发布的消息</span></span><br><span class="line">team.name = <span class="string">&quot;I&#x27;m a team&quot;</span></span><br><span class="line">team.leader.name = <span class="string">&quot;AskeyNil&quot;</span></span><br><span class="line">team.leader.age = <span class="number">18</span></span><br><span class="line">team.location.angular.x = <span class="number">1</span></span><br><span class="line">team.location.linear.z = <span class="number">2</span></span><br><span class="line"><span class="comment"># 使用 publisher 发送该消息</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">    pub.publish(team)</span><br></pre></td></tr></table></figure></li><li><p>给 publisher.py 赋予可执行权限</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_topic/scripts/publisher.py</span><br></pre></td></tr></table></figure><h3 id="使用-rqt-topic-工具调试-1"><a href="#使用-rqt-topic-工具调试-1" class="headerlink" title="使用 rqt_topic 工具调试"></a>使用 rqt_topic 工具调试</h3><ol><li>将当前工作空间的环境变量添加到<code>bash</code>或<code>zsh</code>中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据使用不同的 shell 使用不同的环境变量，两者选其一</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment"># 使用 bash</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.zsh  <span class="comment"># 使用 zsh</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>运行 demo_publisher</p><ol><li>c++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic demo_publisher1</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic publisher1.py</span><br></pre></td></tr></table></figure></li><li><p>打开 rqt_topic 工具</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_topic rqt_topic</span><br></pre></td></tr></table></figure><ol start="4"><li>勾选 demo_topic，结果如下</li></ol><p><img src="/img/ros/rqt_topic2.jpg" alt="rqt_topic1"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>如果调用别的<code>package</code>中的消息，需要将对应<code>package</code>添加到<code>CMakeLists.txt</code>中即可使用</li><li>Python 文件在调用之前一定要给对应的程序可执行的权限</li><li>创建简单ros程序的时候有大致的固定格式，可以使用代码块将其包装起来，下文记录我在<code>vscode</code>中记录的代码块</li><li><strong>注意</strong>：<code>node_name</code>是一个base name，其中不能包含 <code>/</code> 。</li><li><strong>注意</strong>：如果发送频率太高，缓冲区中的消息大于我们设定的值，本文设置的是1000，则会默认丢弃掉最先发布的消息。</li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><h4 id="ros-main"><a href="#ros-main" class="headerlink" title="ros_main"></a>ros_main</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_main&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_main&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;// 导入 ros 头文件&quot;,</span><br><span class="line">            &quot;#include &lt;ros/ros.h&gt;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;int main(int argc, char **argv) &#123;&quot;,</span><br><span class="line">            &quot;    // 创建 ros 的节点名称&quot;,</span><br><span class="line">            &quot;    // todo 填写节点名称&quot;,</span><br><span class="line">            &quot;    char node_name[] = \&quot;$&#123;1:node_name&#125;\&quot;;&quot;,</span><br><span class="line">            &quot;    // 初始化 ros 节点&quot;,</span><br><span class="line">            &quot;    ros::init(argc, argv, node_name);&quot;,</span><br><span class="line">            &quot;    // 创建一个节点对象&quot;,</span><br><span class="line">            &quot;    ros::NodeHandle node;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;    // todo 处理业务逻辑&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;    // 进入一个简单的事件循环&quot;,</span><br><span class="line">            &quot;    ros::spin();&quot;,</span><br><span class="line">            &quot;    return 0;&quot;,</span><br><span class="line">            &quot;&#125;&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="ros-create-publisher"><a href="#ros-create-publisher" class="headerlink" title="ros_create_publisher"></a>ros_create_publisher</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_publisher&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_publisher&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;// 创建一个 topic 的名称&quot;,</span><br><span class="line">            &quot;// todo 填写 topic 名称&quot;,</span><br><span class="line">            &quot;char topic_name[] = \&quot;$&#123;1:topic_name&#125;\&quot;;&quot;,</span><br><span class="line">            &quot;// 获取一个 publisher 的对象&quot;,</span><br><span class="line">            &quot;// todo 添加 topic 类型&quot;,</span><br><span class="line">            &quot;const ros::Publisher &amp;pub =&quot;,</span><br><span class="line">            &quot;    node.advertise&lt;$&#123;2:topic_class&#125;&gt;(topic_name, 1000);&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="ros-main-1"><a href="#ros-main-1" class="headerlink" title="ros_main"></a>ros_main</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_main&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_main&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;#!/usr/bin/env python&quot;,</span><br><span class="line">            &quot;# coding: utf-8&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;# 导入 rospy 依赖&quot;,</span><br><span class="line">            &quot;import rospy&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;if __name__ == \&quot;__main__\&quot;:&quot;,</span><br><span class="line">            &quot;    # 节点名称&quot;,</span><br><span class="line">            &quot;    # todo 填写节点名称&quot;,</span><br><span class="line">            &quot;    node_name = \&quot;$&#123;1:node_name&#125;\&quot;&quot;,</span><br><span class="line">            &quot;    # 初始化 ros 节点&quot;,</span><br><span class="line">            &quot;    rospy.init_node(node_name)&quot;,</span><br><span class="line">            &quot;    # todo 处理业务逻辑&quot;,</span><br><span class="line">            &quot;    # 开启 ros 运行时循环&quot;,</span><br><span class="line">            &quot;    rospy.spin()&quot;,</span><br><span class="line">            <span class="string">&quot;&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="ros-create-publisher-1"><a href="#ros-create-publisher-1" class="headerlink" title="ros_create_publisher"></a>ros_create_publisher</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_publisher&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_publisher&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;# 创建一个 topic 名称&quot;,</span><br><span class="line">            &quot;# todo 填写 topic 的名称&quot;,</span><br><span class="line">            &quot;topic_name = \&quot;$&#123;1:topic_name&#125;\&quot;&quot;,</span><br><span class="line">            &quot;# 创建一个发布者&quot;,</span><br><span class="line">            &quot;# todo 填写 topic 的类型&quot;,</span><br><span class="line">            &quot;pub = rospy.Publisher(topic_name, $&#123;2:topic_class&#125;, queue_size=1000)&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="创建只发布std消息的节点的完整代码"><a href="#创建只发布std消息的节点的完整代码" class="headerlink" title="创建只发布std消息的节点的完整代码"></a>创建只发布std消息的节点的完整代码</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_publisher&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line">    <span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取一个 publisher 的对象</span></span><br><span class="line">    <span class="keyword">const</span> ros::Publisher &amp;pub =</span><br><span class="line">        node.advertise&lt;std_msgs::String&gt;(topic_name, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 创建一个要发送的消息对象</span></span><br><span class="line">    std_msgs::String str;</span><br><span class="line">    str.data = <span class="string">&quot;I send a message&quot;</span>;</span><br><span class="line">    <span class="comment">// 使用 publisher 发送该消息</span></span><br><span class="line">    <span class="keyword">while</span> (ros::ok()) &#123;</span><br><span class="line">        pub.publish(str);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_publisher&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">    topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个发布者</span></span><br><span class="line">    pub = rospy.Publisher(topic_name, String, queue_size=<span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 创建一个要发布的消息</span></span><br><span class="line">    string = String()</span><br><span class="line">    <span class="comment"># 填充要发布的消息</span></span><br><span class="line">    string.data = <span class="string">&quot;I send a message&quot;</span></span><br><span class="line">    <span class="comment"># 使用 publisher 发送该消息</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        pub.publish(string)</span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><h3 id="创建发布自定义消息的节点-1"><a href="#创建发布自定义消息的节点-1" class="headerlink" title="创建发布自定义消息的节点"></a>创建发布自定义消息的节点</h3><h4 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;demo_msgs/Team.h&quot;</span></span></span><br><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_publisher&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line">    <span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取一个 publisher 的对象</span></span><br><span class="line">    <span class="keyword">const</span> ros::Publisher &amp;pub =</span><br><span class="line">        node.advertise&lt;demo_msgs::Team&gt;(topic_name, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 创建一个要发送的消息对象</span></span><br><span class="line">    demo_msgs::Team team;</span><br><span class="line">    <span class="comment">// 填充要发送的数据</span></span><br><span class="line">    team.name = <span class="string">&quot;I&#x27;m a team&quot;</span>;</span><br><span class="line">    team.leader.name = <span class="string">&quot;AskeyNil&quot;</span>;</span><br><span class="line">    team.leader.age = <span class="number">18</span>;</span><br><span class="line">    team.location.angular.x = <span class="number">1</span>;</span><br><span class="line">    team.location.linear.z = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 使用 publisher 发送该消息</span></span><br><span class="line">    <span class="keyword">while</span> (ros::ok()) &#123;</span><br><span class="line">        pub.publish(team);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> demo_msgs.msg <span class="keyword">import</span> Team</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_publisher&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">    topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个发布者</span></span><br><span class="line">    pub = rospy.Publisher(topic_name, Team, queue_size=<span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 创建一个要发布的消息</span></span><br><span class="line">    team = Team()</span><br><span class="line">    <span class="comment"># 填充要发布的消息</span></span><br><span class="line">    team.name = <span class="string">&quot;I&#x27;m a team&quot;</span></span><br><span class="line">    team.leader.name = <span class="string">&quot;AskeyNil&quot;</span></span><br><span class="line">    team.leader.age = <span class="number">18</span></span><br><span class="line">    team.location.angular.x = <span class="number">1</span></span><br><span class="line">    team.location.linear.z = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 使用 publisher 发送该消息</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        pub.publish(team)</span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> ROS Topic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息订阅者（Subscriber）</title>
      <link href="/2019/b013f674.html"/>
      <url>/2019/b013f674.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境说明</p><p>ROS版本：ROS Kinetic Kame </p><p>Ubuntu版本：Ubuntu 16.04.6 LTS，（<code>lsb_release -a</code>）</p><p>Python版本：Python 2.7.12</p><p>CMake 版本：3.5.1</p></blockquote><p>前文已经讲过</p><ol><li><a href="/2019/ros-ws-pkg.html" title="ROS 工作空间和包">ROS 工作空间和包</a></li><li><a href="/2019/ros-msg-srv.html" title="ROS 消息（msg）和服务（srv）">ROS 消息（msg）和服务（srv）</a></li><li><a href="/2019/ROS-Overview.html" title="ROS 概述">ROS 概述</a></li><li><a href="/2019/c8e84d4d.html" title="消息的发布者（Publisher）">消息的发布者（Publisher）</a></li></ol><blockquote><p>以上是这篇文章的基础</p><p>以下所有文件都创建在 ws 的工作空间下</p></blockquote><a id="more"></a><h2 id="创建只订阅std消息的节点"><a href="#创建只订阅std消息的节点" class="headerlink" title="创建只订阅std消息的节点"></a>创建只订阅std消息的节点</h2><h3 id="c-版本"><a href="#c-版本" class="headerlink" title="c++版本"></a>c++版本</h3><ol><li>在<code>src</code>目录下创建一个 <code>subscriber.cc</code> 文件，将以下代码添加到该文件中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_subscriber&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// TODO 将业务逻辑写在此处</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环  </span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_subscriber</span><br><span class="line">  src/subscriber.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  subscriber</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Subscriber</code> 对象</p><ol><li>导入要订阅的消息的头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先使用 std 库中的简易消息</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并订阅消息</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line"><span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line"><span class="comment">// 创建一个 Subscriber 对象</span></span><br><span class="line">    <span class="keyword">const</span> ros::Subscriber &amp;sub = node.subscribe(topic_name, <span class="number">1000</span>, subCallback);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建回调函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subCallback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr &amp;msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    ROS_INFO_STREAM(msg-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>subscriber.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_subscriber&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 将业务逻辑写在此处</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Subscriber</code> 对象</p><ol><li>导入要订阅的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先使用 std 库中的简易消息</span></span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并订阅消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line"><span class="comment"># 创建一个 Subscriber 对象</span></span><br><span class="line">sub = rospy.Subscriber(topic_name, String, subCallback)</span><br></pre></td></tr></table></figure><ol start="3"><li>创建回调函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这个赋默认值是为了使后面有代码提示，实际过程中，msg 被传入的，所以不影响结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCallback</span>(<span class="params">msg=String(<span class="params"></span>)</span>):</span> </span><br><span class="line">    <span class="comment"># 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    <span class="keyword">print</span> (msg.data)</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>给 subscriber.py 赋予可执行权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_topic/scripts/subscriber.py</span><br></pre></td></tr></table></figure><h3 id="使用-rqt-publisher-工具调试"><a href="#使用-rqt-publisher-工具调试" class="headerlink" title="使用 rqt_publisher 工具调试"></a>使用 rqt_publisher 工具调试</h3><ol><li>将当前工作空间的环境变量添加到<code>bash</code>或<code>zsh</code>中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据使用不同的 shell 使用不同的环境变量，两者选其一</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment"># 使用 bash</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.zsh  <span class="comment"># 使用 zsh</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>运行 demo_publisher</p><ol><li>c++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic demo_subscriber</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic subscriber.py</span><br></pre></td></tr></table></figure></li><li><p>打开 rqt_publisher 工具</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_publisher rqt_publisher</span><br></pre></td></tr></table></figure><ol start="4"><li>选择我们对应的<code>Topic</code>：<code>demo_topic</code>，<code>Type</code>选择<code>std_msgs/String</code></li><li>勾选就会一直发送数据，或者右键点击<code>Publisher Selected Once</code> 可以发送一次数据</li></ol><h2 id="创建订阅自定义消息的节点"><a href="#创建订阅自定义消息的节点" class="headerlink" title="创建订阅自定义消息的节点"></a>创建订阅自定义消息的节点</h2><p>我们使用在<a href="(/2019/10/15/ros/ROS%20%E6%B6%88%E6%81%AF(msg)%E5%92%8C%E6%9C%8D%E5%8A%A1(srv)/">ros消息</a>讲过的<code>demo_msgs</code>包中的<code>Team.msg</code>来传输数据</p><h3 id="c-版本-1"><a href="#c-版本-1" class="headerlink" title="c++版本"></a>c++版本</h3><ol><li>在<code>src</code>目录下创建一个 <code>subscriber1.cc</code> 文件，将以下代码添加到该文件中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_subscriber&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// TODO 将业务逻辑写在此处</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环  </span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_subscriber1</span><br><span class="line">  src/subscriber1.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  demo_subscriber1</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>CMakeLists.txt</code>文件的<code>find_package</code>中添加<code>demo_msgs</code>的依赖   </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rosmsg</span><br><span class="line">  rospy</span><br><span class="line">  demo_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li><p>创建 <code>Publisher</code> 对象</p><ol><li><p>导入要发送的消息的头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;demo_msgs/Team.h&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p>创建对象，并发送消息</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line"><span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line"><span class="comment">// 创建一个 Subscriber 对象</span></span><br><span class="line"><span class="keyword">const</span> ros::Subscriber &amp;sub = node.subscribe(topic_name, <span class="number">1000</span>, subCallback);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建回调函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subCallback</span><span class="params">(<span class="keyword">const</span> demo_msgs::Team::ConstPtr &amp;msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    ROS_INFO_STREAM(msg-&gt;name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="python版本-1"><a href="#python版本-1" class="headerlink" title="python版本"></a>python版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>subscriber1.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_subscriber&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 将业务逻辑写在此处</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Subscriber</code> 对象</p><ol><li>导入要订阅的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> demo_msgs.msg <span class="keyword">import</span> Team</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并订阅消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line"><span class="comment"># 创建一个 Subscriber 对象</span></span><br><span class="line">sub = rospy.Subscriber(topic_name, Team, subCallback)</span><br></pre></td></tr></table></figure><ol start="3"><li>创建回调函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这个赋默认值是为了使后面有代码提示，实际过程中，msg 被传入的，所以不影响结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCallback</span>(<span class="params">msg=Team(<span class="params"></span>)</span>):</span> </span><br><span class="line">    <span class="comment"># 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    <span class="keyword">print</span> (msg.name)</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>给 subscriber.py 赋予可执行权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_topic/scripts/subscriber1.py</span><br></pre></td></tr></table></figure><h3 id="使用-rqt-publisher-工具调试-1"><a href="#使用-rqt-publisher-工具调试-1" class="headerlink" title="使用 rqt_publisher 工具调试"></a>使用 rqt_publisher 工具调试</h3><ol><li>将当前工作空间的环境变量添加到<code>bash</code>或<code>zsh</code>中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据使用不同的 shell 使用不同的环境变量，两者选其一</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment"># 使用 bash</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.zsh  <span class="comment"># 使用 zsh</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>运行 demo_publisher</p><ol><li>c++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic demo_subscriber</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic subscriber.py</span><br></pre></td></tr></table></figure></li><li><p>打开 rqt_publisher 工具</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_publisher rqt_publisher</span><br></pre></td></tr></table></figure><ol start="4"><li>选择我们对应的<code>Topic</code>：<code>demo_topic</code>，<code>Type</code>选择<code>demo_msgs/Team</code></li><li>勾选就会一直发送数据，或者右键点击<code>Publisher Selected Once</code> 可以发送一次数据</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>两种订阅消息几乎是一样的，因为在我们创建包的时候已经将<code>std_msgs</code>的依赖导入了，所以导致我们就不需要添加依赖。</li><li>使用对应消息的时候要添加对应消息的依赖。</li><li>回调函数默认在主线程中进行，即<code>ros::spin()</code>或<code>rospy.spin()</code>会卡死主线程，进入ros的运行时</li><li>如果有别的运行时，如 qt(以后会详细介绍qt中的用法)，则需要使用异步接收ros的运行时消息，或者在 qt 中使用<code>spinOnce()</code>(仅在c++中需要)</li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><h4 id="ros-create-subscriber"><a href="#ros-create-subscriber" class="headerlink" title="ros_create_subscriber"></a>ros_create_subscriber</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_subscriber&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_subscriber&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;#include \&quot;$&#123;1: topic_class&#125;\&quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;void callback(const $&#123;2: topic_class&#125;::ConstPtr &amp;msg) &#123;&quot;,</span><br><span class="line">            &quot;    // 一般写业务逻辑，此处打印接收到的数据&quot;,</span><br><span class="line">            &quot;    ROS_INFO_STREAM(msg);&quot;,</span><br><span class="line">            &quot;&#125;&quot;,</span><br><span class="line">            &quot;// 创建一个 topic 的名称&quot;,</span><br><span class="line">            &quot;// todo 填写 topic 名称&quot;,</span><br><span class="line">            &quot;char topic_name[] = \&quot;$&#123;3&#125;\&quot;;&quot;,</span><br><span class="line">            &quot;// 创建一个 Subscriber 对象&quot;,</span><br><span class="line">            &quot;const ros::Subscriber &amp;sub = node.subscribe(topic_name, 1000, callback);&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="ros-create-subscriber-1"><a href="#ros-create-subscriber-1" class="headerlink" title="ros_create_subscriber"></a>ros_create_subscriber</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_subscriber&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_subscriber&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;# todo 填写 msg 的类型&quot;,</span><br><span class="line">            &quot;from $&#123;1: msg_class&#125;.msg import $&#123;2: msg_type&#125;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;def subCallback(msg=$&#123;2:msg_type&#125;()):&quot;,</span><br><span class="line">            &quot;    # 一般写业务逻辑，此处打印接收到的数据&quot;,</span><br><span class="line">            &quot;    print (msg)&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;# 创建一个 topic 名称&quot;,</span><br><span class="line">            &quot;# todo 填写 topic 名称&quot;,</span><br><span class="line">            &quot;topic_name = \&quot;$&#123;3: topic_name&#125;\&quot;&quot;,</span><br><span class="line">            &quot;# 创建一个 Subscriber 对象&quot;,</span><br><span class="line">            &quot;sub = rospy.Subscriber(topic_name, $&#123;2: msg_type&#125;, subCallback)&quot;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="创建只发布std消息的节点的完整代码"><a href="#创建只发布std消息的节点的完整代码" class="headerlink" title="创建只发布std消息的节点的完整代码"></a>创建只发布std消息的节点的完整代码</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subCallback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr &amp;msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    ROS_INFO_STREAM(msg-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_subscriber&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line">    <span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建一个 Subscriber 对象</span></span><br><span class="line">    <span class="keyword">const</span> ros::Subscriber &amp;sub = node.subscribe(topic_name, <span class="number">1000</span>, subCallback);</span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCallback</span>(<span class="params">msg=String(<span class="params"></span>)</span>):</span></span><br><span class="line">    <span class="comment"># 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    <span class="keyword">print</span> (msg.data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_subscriber&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">    topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个 Subscriber 对象</span></span><br><span class="line">    sub = rospy.Subscriber(topic_name, String, subCallback)</span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建发布自定义消息的节点"><a href="#创建发布自定义消息的节点" class="headerlink" title="创建发布自定义消息的节点"></a>创建发布自定义消息的节点</h3><h4 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;demo_msgs/Team.h&quot;</span></span></span><br><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subCallback</span><span class="params">(<span class="keyword">const</span> demo_msgs::Team::ConstPtr &amp;msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    ROS_INFO_STREAM(msg-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_subscriber&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line">    <span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建一个 Subscriber 对象</span></span><br><span class="line">    <span class="keyword">const</span> ros::Subscriber &amp;sub = node.subscribe(topic_name, <span class="number">1000</span>, subCallback);</span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> demo_msgs.msg <span class="keyword">import</span> Team</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCallback</span>(<span class="params">msg=Team(<span class="params"></span>)</span>):</span></span><br><span class="line">    <span class="comment"># 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    <span class="keyword">print</span> (msg.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_subscriber&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">    topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个 Subscriber 对象</span></span><br><span class="line">    sub = rospy.Subscriber(topic_name, Team, subCallback)</span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> ROS Topic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS 命令行工具介绍</title>
      <link href="/2019/412acdc0.html"/>
      <url>/2019/412acdc0.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>roscore</td><td>用来开启ros master</td></tr><tr><td><a href="/2019/ROS-Overview.html#%E4%BD%BF%E7%94%A8-rosnode">rosnode</a></td><td>用来打印节点信息</td></tr><tr><td><a href="/2019/ROS-Overview.html#%E4%BD%BF%E7%94%A8-rosrun">rosrun</a></td><td>用来运行节点</td></tr><tr><td><a href="/2019/ros-msg-srv.html#rosmsg">rosmsg</a></td><td>用来显示 msg 数据</td></tr><tr><td><a href="/2019/ros-msg-srv.html#rossrv">rossrv</a></td><td>用来显示 srv 数据</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> ROS command </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS 概述</title>
      <link href="/2019/ROS-Overview.html"/>
      <url>/2019/ROS-Overview.html</url>
      
        <content type="html"><![CDATA[<h2 id="ros的基础架构"><a href="#ros的基础架构" class="headerlink" title="ros的基础架构"></a>ros的基础架构</h2><p><img src="/img/ros/ros_struct.png"></p><p>ROS 项目在部署运行的过程中，大致分为4个部分：</p><ul><li>环境<ul><li>软件环境</li><li>硬件环境</li></ul></li><li>执行器<ul><li>给操作系统发送一些指令，以此来控制硬件执行相应操作</li></ul></li><li>传感器<ul><li>传感器接收外部环境给的输出，反馈给相应的软件</li></ul></li><li>软件结构<ul><li>ros 一个可执行程序，就是一个节点</li><li>ros master用来管理各个节点</li></ul></li></ul><a id="more"></a><h3 id="软件结构的组成"><a href="#软件结构的组成" class="headerlink" title="软件结构的组成"></a>软件结构的组成</h3><p><img src="/img/ros/ros_master.png"></p><h4 id="ROS-Master"><a href="#ROS-Master" class="headerlink" title="ROS Master"></a>ROS Master</h4><ul><li>管理每个节点间的通信</li><li>每个节点都需要到 <code>ROS Master</code> 中进行注册</li></ul><p>通过<code>roscore</code>命令启动<code>ROS Master</code>，而且在节点开始前必须启动<code>ROS Master</code></p><h4 id="ROS-Node"><a href="#ROS-Node" class="headerlink" title="ROS Node"></a>ROS Node</h4><ul><li>具备单一的功能的可执行程序</li><li>可以单独编译，可执行，可管理</li><li>存放在<code>package</code>中</li><li>一个节点就是一个可执行程序</li></ul><h2 id="ros客户端库"><a href="#ros客户端库" class="headerlink" title="ros客户端库"></a>ros客户端库</h2><p>ROS 客户端允许使用不同的编程语言编写的节点之间相互通信</p><ul><li>rospy = python 客户端库</li><li>roscpp = c++ 客户端库</li></ul><h2 id="使用-rosnode"><a href="#使用-rosnode" class="headerlink" title="使用 rosnode"></a>使用 rosnode</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rosnode -h</span></span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> rosnode 是一个用来打印 ROS 节点信息的命令行工具</span></span><br><span class="line">rosnode is a command-line tool for printing information about ROS Nodes.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">                    # 测试是否能连接到节点</span><br><span class="line">    rosnode ping    test connectivity to node</span><br><span class="line">                    # 激活的节点列表</span><br><span class="line">    rosnode list    list active nodes</span><br><span class="line">                    # 打印节点信息</span><br><span class="line">    rosnode info    print information about node</span><br><span class="line">                    # 列出在特定计算机上运行的节点</span><br><span class="line">    rosnode machine    list nodes running on a particular machine or list machines</span><br><span class="line">                    # 杀死正在运行的节点</span><br><span class="line">    rosnode kill    kill a running node</span><br><span class="line">                    # 清除不可达的的节点的注册信息（ping不通，就是程序死掉了，信息没删掉）</span><br><span class="line">    rosnode cleanup    purge registration information of unreachable nodes</span><br><span class="line"><span class="meta">#</span><span class="bash">输入 rosnode &lt;<span class="built_in">command</span>&gt; -h 以获得更多使用说明，例如 rosnode ping -h</span></span><br><span class="line">Type rosnode &lt;command&gt; -h for more detailed usage, e.g. &#x27;rosnode ping -h&#x27;`</span><br></pre></td></tr></table></figure><blockquote><p>通过 -h 可以快速查询对应的命令和用法，这里只提取常用的</p></blockquote><p>常用方法</p><ol><li><code>runnode list</code> 查看当前开启的节点</li><li><code>rosnode info [node]</code> 查看节点的信息</li><li><code>rosnode cleanup</code> 清除无用的节点信息</li></ol><h2 id="使用-rosrun"><a href="#使用-rosrun" class="headerlink" title="使用 rosrun"></a>使用 rosrun</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rosrun -h</span></span><br><span class="line">---</span><br><span class="line">Usage: rosrun [--prefix cmd] [--debug] PACKAGE EXECUTABLE [ARGS]</span><br><span class="line">  rosrun will locate PACKAGE and try to find</span><br><span class="line">  an executable named EXECUTABLE in the PACKAGE tree.</span><br><span class="line">  If it finds it, it will run it with ARGS.</span><br><span class="line"><span class="meta">#</span><span class="bash"> rosrun 试图找到 PACKAGE 和 PACKAGE 下的名为 EXECUTABLE 的可执行程序。如果找到，将参数args传入并运行它</span></span><br></pre></td></tr></table></figure><blockquote><p>一般该命令在输入 package 和 executable 的时候使用 tab 键都会有提示，如果没有提示，尝试<code>source</code> 当前工作空间下 <code>devel/setup.bash</code> 或 <code>devel/setup.zsh</code>(如果你用zsh的话)</p></blockquote><p>注意：如果写<code>python</code>程序，需要给 <code>python</code> 的入口<code>python</code>文件一个可执行的权限，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x main.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> ROS command </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 整理</title>
      <link href="/2019/b1cfc668.html"/>
      <url>/2019/b1cfc668.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>因经常需要在 Ubuntu 和 Mac OS 端进行转换，编辑器中快捷键不对应，甚至说一些快捷键找不到好的替代，故编辑器界面改用 Vim，以两端使用同一快捷键。此文整理常用 Vim 命令，不定时更新。</p></blockquote><h2 id="光标操作"><a href="#光标操作" class="headerlink" title="光标操作"></a>光标操作</h2><p>移动光标键</p><table><thead><tr><th>h</th><th>j</th><th>k</th><th>l</th></tr></thead><tbody><tr><td>左</td><td>下</td><td>上</td><td>右</td></tr></tbody></table><p>命令模式下</p><h3 id="当前行移动光标"><a href="#当前行移动光标" class="headerlink" title="当前行移动光标"></a>当前行移动光标</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>0</code></td><td>移动到行头</td></tr><tr><td><code>$</code></td><td>移动到行尾</td></tr><tr><td><code>^</code></td><td>移动到本行第一个不是 <code>black</code> 的字符位置</td></tr><tr><td><code>g_</code></td><td>移动到本行最后一个不是 <code>black</code> 的字符位置</td></tr><tr><td><code>w</code></td><td>移动到下一个单词的开头</td></tr><tr><td><code>e</code></td><td>移动到下一个单词的结尾</td></tr><tr><td><code>fa</code></td><td>移动到本行下一个为 a 的字符处，<code>a</code>可以为任意字符</td></tr><tr><td><code>nfa</code></td><td>移动到本行下 n(1,2,3,4) 个字符为 a 的地方</td></tr><tr><td><code>Fa</code></td><td>跟 <code>fa</code> 一样，反向相反</td></tr><tr><td><code>nFa</code></td><td>很 <code>nfa</code>一样，反向相反</td></tr><tr><td><code>ta</code></td><td>移动到本行下一个光标为 a 字符的前一个位置</td></tr><tr><td><code>nta</code></td><td>移动到本行下 n(1,2,34)个字符为 a 的前一个位置</td></tr><tr><td><code>Ta</code></td><td>跟 <code>ta</code> 一样，反向相反</td></tr><tr><td><code>nTa</code></td><td>很 <code>nta</code>一样，反向相反</td></tr></tbody></table><a id="more"></a><h3 id="跨行移动光标"><a href="#跨行移动光标" class="headerlink" title="跨行移动光标"></a>跨行移动光标</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>nG</code></td><td>光标定位到第 n 行的行首</td></tr><tr><td><code>gg</code></td><td>光标定位到第一行的行首</td></tr><tr><td><code>G</code></td><td>光标定位到最后一行的行首</td></tr><tr><td><code>%</code></td><td>匹配括号移动，包括<code>(,&#123;,[</code>需要把光标先移动到括号上</td></tr><tr><td><code>*</code></td><td>匹配下一个光标当前所在的单词</td></tr><tr><td><code>#</code></td><td>匹配上一个光标当前所在的单词</td></tr><tr><td><code>ctrl+f</code></td><td>查看下一页</td></tr><tr><td><code>ctrl+b</code></td><td>查看上一页</td></tr></tbody></table><h3 id="复制，粘贴，剪切-删除"><a href="#复制，粘贴，剪切-删除" class="headerlink" title="复制，粘贴，剪切(删除)"></a>复制，粘贴，剪切(删除)</h3><p>只要记住三个重要的按键<code>y(复制)</code>，<code>p(粘贴)</code>，<code>d(剪切，删除)</code>，通常都会在配合一个按键使用。</p><ul><li>复制</li></ul><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>yw</code></td><td>复制一个单词</td></tr><tr><td><code>ynw</code></td><td>复制 n 个单词</td></tr><tr><td><code>yfa</code></td><td>复制光标处到下一个 a 的字符处</td></tr><tr><td><code>ynfa</code></td><td>复制光标处到第 n 个 a 的字符处</td></tr><tr><td><code>yd</code></td><td>复制一整行</td></tr><tr><td><code>nyy</code></td><td>复制 n 行</td></tr><tr><td><code>y$</code></td><td>从光标处复制到本行末尾</td></tr><tr><td><code>yH</code></td><td>复制屏幕显示的第一行文本到光标处所在的行</td></tr><tr><td><code>yG</code></td><td>复制光标所在位置到文本结束位置所有的行</td></tr></tbody></table><ul><li>粘贴</li></ul><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>p</code></td><td>在光标后粘贴</td></tr><tr><td><code>P</code></td><td>大写的 <code>P</code> 的在光标前粘贴</td></tr></tbody></table><ul><li>删除</li></ul><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>dw</code></td><td>删除一个单词</td></tr><tr><td><code>dnw</code></td><td>删除 n 个单词</td></tr><tr><td><code>dfa</code></td><td>删除光标处到下一个 a 的字符处</td></tr><tr><td><code>dnfa</code></td><td>删除光标处到第 n 个 a 的字符处</td></tr><tr><td><code>dd</code></td><td>删除一整行</td></tr><tr><td><code>ndd</code></td><td>删除 n 行</td></tr><tr><td><code>d$</code></td><td>从光标处删除到本行末尾</td></tr><tr><td><code>dH</code></td><td>删除屏幕显示的第一行文本到光标处所在的行</td></tr><tr><td><code>dG</code></td><td>删除光标所在位置到文本结束位置所有的行</td></tr></tbody></table><ul><li>撤销</li></ul><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>u</code></td><td>撤销刚才的操作</td></tr><tr><td><code>ctrl + r</code></td><td>恢复撤销的操作</td></tr></tbody></table><ul><li>删除字符和替换</li></ul><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>x</code></td><td>删除当前光标所在的字符</td></tr><tr><td><code>r</code></td><td>替换当前光标所在的字符</td></tr><tr><td><code>R</code></td><td>替换模式</td></tr></tbody></table><ul><li>复制、剪切和粘贴到系统剪切板</li></ul><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>:reg</code></td><td>查看寄存器</td></tr><tr><td><code>&quot; +(寄存器名) y/d/p</code></td><td>复制，剪切，粘贴</td></tr></tbody></table><p>一般系统的剪切板的寄存器名称为 <code>+</code> 。</p><p>命令用中文描述为：双引号 + 寄存器名 + 执行的命令（y、d、p） </p><p>如果仅仅针对系统剪切板则应该执行的命令是<code>&quot;+y</code>、<code>&quot;+d</code>、<code>&quot;+p</code></p><h2 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>v</code></td><td>字符可视化</td></tr><tr><td><code>V</code></td><td>行可视化</td></tr><tr><td><code>ctrl + v</code></td><td>块可视化</td></tr></tbody></table><h3 id="可视化模式下操作"><a href="#可视化模式下操作" class="headerlink" title="可视化模式下操作"></a>可视化模式下操作</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>y</code></td><td>复制选中区域</td></tr><tr><td><code>d</code></td><td>删除，剪切选中区域</td></tr><tr><td><code>p</code></td><td>粘贴选中区域</td></tr><tr><td><code>r</code></td><td>替换选中的文本</td></tr><tr><td><code>gu</code></td><td>选中区域转小写</td></tr><tr><td><code>gU</code></td><td>选中区域转大写</td></tr><tr><td><code>g~</code></td><td>选中区域大小写互转</td></tr><tr><td><code>&gt;</code></td><td>向右缩进一个单位</td></tr><tr><td><code>&lt;</code></td><td>向左缩进一个单位</td></tr></tbody></table><h3 id="可视化模式v的特殊操作"><a href="#可视化模式v的特殊操作" class="headerlink" title="可视化模式v的特殊操作"></a>可视化模式v的特殊操作</h3><blockquote><p>以下符号只包括””,’’,(),[],{}（双引号 ，单引号，小括号，中括号，大括号），不能匹配中文的对应符号。</p></blockquote><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>v + i + 符号</code></td><td>匹配对应符号包裹的内容，不包括符号</td></tr><tr><td><code>v + a + 符号</code></td><td>匹配对应符号包裹的内容，包括符号</td></tr></tbody></table><h3 id="块区域模式的特殊操作"><a href="#块区域模式的特殊操作" class="headerlink" title="块区域模式的特殊操作"></a>块区域模式的特殊操作</h3><p>使用 Ctrl + v 选中区域后，可使用如下命令插入数据</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>I</code></td><td>选中区域前面插入数据</td></tr><tr><td><code>A</code></td><td>选中区域后面插入数据</td></tr></tbody></table><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><ol><li>打开单个文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim file</span><br></pre></td></tr></table></figure><ol start="2"><li>打开多个文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim file1 file2 ...</span><br></pre></td></tr></table></figure><p>使用这种方式打开文件，显示屏上默认只会出现 file1 这一个文件</p><p>切换到命令模式，使用 <code>:ls</code> 查看当前打开的所有文件，使用<code>:bn</code>切换到第 n 个文件，比如切换到第二个文件就是<code>b2</code></p><ol start="3"><li>一个显示屏多开文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开几个文件就分屏几个文件</span></span><br><span class="line"><span class="comment"># 左右分屏打开</span></span><br><span class="line">vim -On file1 file2 ... filen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上下分屏打开</span></span><br><span class="line">vim -on file1 file2 ... filen</span><br></pre></td></tr></table></figure><ol start="4"><li><p>vim 分屏</p><ol><li>按住 Ctrl + w，然后在按下 s：<code>ctrl + w s</code>，当前文件上下分割</li><li>按住 Ctrl + w，然后在按下 v：<code>ctrl + w v</code>，当前文件左右分割</li><li><code>:sp file</code> ：新建文件上下分割</li><li><code>:vsp file</code> ：新建文件左右分割</li></ol></li><li><p>移动光标</p><ol><li>按住 Ctrl + w，然后加位移键（hjkl 或上下左右）移动到对应位置</li></ol></li><li><p>关闭分屏</p><ol><li>按住 Ctrl + w，然后按 c，关闭当前分屏</li><li>按住 Ctrl + w，然后按 q，关闭当前分屏，如果是最后一个则退出 Vim</li></ol></li></ol><h2 id="文件I-O操作"><a href="#文件I-O操作" class="headerlink" title="文件I/O操作"></a>文件I/O操作</h2><blockquote><p>以下均在命令模式下</p></blockquote><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>:w</code></td><td>保存当前对文件，但是不退出文件</td></tr><tr><td><code>:w!</code></td><td>强制保存当前的文件，但是不退出文件</td></tr><tr><td><code>:w file</code></td><td>保存当前文件到 file 文件中，不打开 file</td></tr><tr><td><code>:q</code></td><td>退出文件</td></tr><tr><td><code>:q!</code></td><td>强制退出文件，对文件的修改不保存</td></tr><tr><td><code>:qa!</code></td><td>强制退出所有文件，对所有文件的修改不保存</td></tr><tr><td><code>:wq</code></td><td>保存文件，并退出</td></tr><tr><td><code>:x</code></td><td>保存文件，并退出</td></tr><tr><td><code>:e file</code></td><td>打开 另一个文件</td></tr><tr><td><code>:e!</code></td><td>放弃对文件的所有修改，恢复文件到上次保存的位置</td></tr><tr><td><code>:saveas file</code></td><td>另存为 file，并打开 file</td></tr><tr><td><code>:n flie</code></td><td>新建一个文件，名字为 file</td></tr></tbody></table><h3 id="ls-命令（vscode-中么有用）"><a href="#ls-命令（vscode-中么有用）" class="headerlink" title="ls 命令（vscode 中么有用）"></a>ls 命令（vscode 中么有用）</h3><p><code>ls</code>可以显示当前打开的所有文件，与终端中的 <code>ls</code>意义类似，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:ls</span><br><span class="line">  1 #    &quot;demo1.py&quot;                     第 1 行</span><br><span class="line">  2 %a   &quot;demo2.py&quot;                     第 1 行</span><br><span class="line">  3      &quot;demo3.py&quot;                     第 1 行</span><br></pre></td></tr></table></figure><ul><li>第一列，代表文件的<code>id</code>，可根据此 <code>id</code> 跳转到该文件</li><li>第二列，<code>%a</code>的<code>%</code>当前光标所在文件，<code>a</code>表示当前打开的文件，如果打开多个就会有多个 <code>a</code>，<code>#</code>代表上一个打开的文件。</li><li>第三列，打开的文件名称，如果有<code>/</code>则表示路径。</li><li>第四列，光标所在的行数。</li></ul><h3 id="切换文件命令"><a href="#切换文件命令" class="headerlink" title="切换文件命令"></a>切换文件命令</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>:bn</code></td><td>切换下一个文件</td></tr><tr><td><code>:bp</code></td><td>切换上一个文件</td></tr><tr><td><code>:b1</code></td><td>切换 id 为 1 的文件，其它 id 同理。</td></tr><tr><td><code>:b#</code></td><td>切换上一个编辑的文件</td></tr></tbody></table><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>i</code></td><td>在光标所在位置之前插入文本</td></tr><tr><td><code>I</code></td><td>在光标所在行的行首插入文本</td></tr><tr><td><code>a</code></td><td>在光标所在位置之后插入文本</td></tr><tr><td><code>A</code></td><td>在光标所在行的行尾插入文本</td></tr><tr><td><code>o</code></td><td>在光标所在位置的下一行插入新行，并插入文本</td></tr><tr><td><code>O</code></td><td>在光标所在位置的上一行插入新行，并插入文本</td></tr><tr><td><code>s</code></td><td>删除光标所在处的字符然后插入本文</td></tr><tr><td><code>S</code></td><td>删除光标所在行，并在行首插入文本</td></tr><tr><td><code>cw</code></td><td>删除光标所在处到单词结束的所有字符，并插入文本。</td></tr></tbody></table><h2 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h2><p>vim中文本替换的规则如下：</p><p><code>:&#123;作用范围&#125;s/&#123;目标&#125;/&#123;替换&#125;/&#123;替换的标志&#125;</code></p><ul><li>作用范围：当前行，全文，选区</li><li>替换的标志：g(全局替换标志)，空替换标志，<code>i</code>大小写不敏感查找，<code>I</code>大小写敏感查找，<code>c</code>需要确认替换</li></ul><p>🌰（例子）：</p><ol><li>将光标所在行的 <code>demo</code> 替换为 <code>temp</code></li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:s/demo/temp/g</span><br></pre></td></tr></table></figure><ol start="2"><li>将全文中的所有 <code>demo</code> 替换为<code>temp</code></li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/demo/temp/g</span><br></pre></td></tr></table></figure><ol start="3"><li>将行号 n1到 n2 的所有 <code>demo</code> 替换为 <code>temp</code></li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:n1,n2s/demo/temp/g</span><br><span class="line"># 注意这里的 n1,n2 之间不能有空格</span><br></pre></td></tr></table></figure><ol start="4"><li>选择区域，在可视模式下选择区域，然后输入<code>:</code>，vim 会自动补全<code>&#39;&lt;,&#39;&gt;</code></li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="string">&#x27;&lt;,&#x27;</span>&gt;s/demo/temp/g</span><br></pre></td></tr></table></figure><ol start="5"><li>在全文中查找所有 <code>demo</code> 但是只替换第一个 <code>demo</code>为<code>temp</code></li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/demo/temp</span><br></pre></td></tr></table></figure><p>等等…用好常用的标识符即可，<code>g</code>, <code>空</code>, <code>i</code>, <code>I</code>, <code>c</code>。</p><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>:n</code></td><td>定位到第 <code>n</code> 行</td></tr><tr><td><code>/匹配的字符串</code></td><td>关键字查找，<code>n</code> 查看下一个, <code>N</code> 查看上一个</td></tr><tr><td><code>:set ic(noic)</code></td><td>设置不区分大小写（区分大小写），编辑器默认不区分大小写</td></tr><tr><td><code>:n1,n2d</code></td><td>删除 <code>n1</code> 行到 <code>n2</code> 行的文本</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Editor </category>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS 消息（msg）和服务（srv）</title>
      <link href="/2019/ros-msg-srv.html"/>
      <url>/2019/ros-msg-srv.html</url>
      
        <content type="html"><![CDATA[<h2 id="消息（msg）和服务（srv）总览"><a href="#消息（msg）和服务（srv）总览" class="headerlink" title="消息（msg）和服务（srv）总览"></a>消息（msg）和服务（srv）总览</h2><ul><li>消息（msg）就是一个描述 ROS 中所使用的消息类型的简单文本，后缀以<code>.msg</code>命名。</li><li>服务（srv）就是一个描述 ROS 服务数据的文本，后缀以<code>.srv</code> 命名。它包含两个部分：<code>request</code> 和 <code>response</code></li></ul><p>msg文件存放在 package 目录的 msg 目录下，srv 文件存放在 package 目录的 srv 目录下。</p><a id="more"></a><p>msg 文件实际上就是每行声明一个数据类型和变量名，它们可以使用的数据类型如下：</p><ol><li><strong>内置类型</strong></li></ol><table><thead><tr><th>原始类型</th><th>c++</th><th>Python2</th><th>Python3</th></tr></thead><tbody><tr><td>bool</td><td>uint8_t</td><td>bool</td><td>bool</td></tr><tr><td>int8</td><td>int8_t</td><td>int</td><td>int</td></tr><tr><td>uint8</td><td>uint8_t</td><td>int</td><td>int</td></tr><tr><td>int16</td><td>int16_t</td><td>int</td><td>int</td></tr><tr><td>uint16</td><td>uint16_t</td><td>int</td><td>int</td></tr><tr><td>int32</td><td>int32_t</td><td>int</td><td>int</td></tr><tr><td>uint32</td><td>uint32_t</td><td>int</td><td>int</td></tr><tr><td>int64</td><td>int64_t</td><td>long</td><td>int</td></tr><tr><td>uint64</td><td>uint64_t</td><td>long</td><td>int</td></tr><tr><td>float32</td><td>float</td><td>float</td><td>float</td></tr><tr><td>float64</td><td>double</td><td>float</td><td>float</td></tr><tr><td>string</td><td>std::string</td><td>str</td><td>bytes</td></tr><tr><td>time</td><td>ros::Time</td><td>rospy.Time</td><td>rospy.Time</td></tr><tr><td>duration</td><td>ros::Duration</td><td>rospy::Duration</td><td>rospy::Duration</td></tr></tbody></table><ul><li>注意：<ol><li><code>uint8</code> 在Python中具有特殊含义。uint8[]被视为Python 的 bytes，因此它可以被其他面向 Python bytes 的 api 兼容。 </li><li>当前不支持将 Unicode 字符串作为 ROS 的数据类型，utf-8 应该用于与 ROS 字符串序列化兼容。在 Python2中，这种编码对于 Unicode 是自动的，但是解码必须手动完成。在 Python3 中，当使用 str 时，在生成的消息代码中使用<code>&#39;utf-8&#39;</code>进行编码和解码。</li></ol></li></ul><ol start="2"><li><strong>数组类型</strong></li></ol><table><thead><tr><th>原始数据</th><th>C++</th><th>Python2</th><th>Python3</th></tr></thead><tbody><tr><td>定长数组</td><td>boost::array&lt;T, length&gt;</td><td>tuple</td><td>tuple</td></tr><tr><td>可变长数组</td><td>std::vector&lt;T&gt;</td><td>tuple</td><td>tuple</td></tr><tr><td>uint8[]</td><td>std::vector&lt;unit8_t&gt;</td><td>str</td><td>bytes</td></tr><tr><td>bool[]</td><td>std::vector&lt;uint8_t&gt;</td><td>list of bool</td><td>list of bool</td></tr></tbody></table><ol start="3"><li><strong>其他 msg 文件类型</strong></li></ol><p>其他自定义类型，类似于系统中的<code>std_msgs/String</code>，或者自定义之前写好的类型，下面会做更详细的介绍。</p><p>在 ros 中还有一种特殊的数据类型<code>Header</code>，它含有时间戳和坐标系信息。在 msg 文件的第一行经常可以看到<code>Header header</code>的声明。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="msg-样例"><a href="#msg-样例" class="headerlink" title="msg 样例"></a>msg 样例</h4><p>下面是一个 msg 文件的样例，它使用了 Header、string 和两个自定义msg类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Header header</span><br><span class="line">string child_frame_id</span><br><span class="line">geometry_msgs&#x2F;PoseWithCovariance pose</span><br><span class="line">geometry_msgs&#x2F;TwistWithCovariance twist</span><br></pre></td></tr></table></figure><h4 id="srv样例"><a href="#srv样例" class="headerlink" title="srv样例"></a>srv样例</h4><p>srv 文件分为 <code>request</code> 和 <code>response</code> 两部分，用<code>---</code>分隔开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int64 A</span><br><span class="line">int64 B</span><br><span class="line">---</span><br><span class="line">int64 Sum</span><br></pre></td></tr></table></figure><p>其中 A 和 B 是 <code>request</code> 部分，而 Sum是 <code>response</code> 部分</p><blockquote><p>下面详细介绍两种消息类型的创建，你也可以直接到<a href="#%E6%80%BB%E7%BB%93">总结</a>中看两种消息的差异点</p></blockquote><h2 id="msg-消息"><a href="#msg-消息" class="headerlink" title="msg 消息"></a>msg 消息</h2><h3 id="创建一个简单-msg-消息"><a href="#创建一个简单-msg-消息" class="headerlink" title="创建一个简单 msg 消息"></a>创建一个简单 msg 消息</h3><ol><li>首先来到 <code>package</code> 目录下，创建<code>msg</code>目录</li><li>新建一个 <code>Student.msg</code> 文件</li><li>添加数据格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string name</span><br><span class="line">int64 age</span><br></pre></td></tr></table></figure><ol start="4"><li>配置 <code>package.xml</code> 文件，添加如下代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>配置 CMakeLists.txt</p><ol><li>在 <code>find_package</code> 中添加 <code>message_generation</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rosmsg</span><br><span class="line">  rospy</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="2"><li>添加 <code>add_messgae_file</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 msg 文件</span></span><br><span class="line">add_message_files(</span><br><span class="line">  FILES</span><br><span class="line">  Student.msg        <span class="comment"># 该名称就是你创建的 msg 文件的名称</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li>添加 <code>generation_msg</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于添加生成消息所需的依赖</span></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs    <span class="comment"># 默认添加 std_msgs</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li>在 <code>catkin_package</code>中添加<code>CATKIN_DEPENDS message_runtime</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># catkin 所需依赖</span></span><br><span class="line">catkin_package(</span><br><span class="line">  <span class="comment"># INCLUDE_DIRS include</span></span><br><span class="line">  <span class="comment"># LIBRARIES demo_msg</span></span><br><span class="line">  <span class="comment"># CATKIN_DEPENDS roscpp rosmsg rospy</span></span><br><span class="line">  <span class="comment"># DEPENDS system_lib</span></span><br><span class="line">  <span class="comment"># 为 catkin 添加 message_runtime 依赖</span></span><br><span class="line">  CATKIN_DEPENDS message_runtime</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>来到 <code>workspace</code>目录，使用命令 <code>catkin_make</code> 编译即可。</p></li><li><p>在 <code>devel</code> 的<code>include</code>目录下，如果生成了头文件，则说明创建成功。</p></li></ol><h3 id="自定义-Obj-消息"><a href="#自定义-Obj-消息" class="headerlink" title="自定义 Obj 消息"></a>自定义 Obj 消息</h3><blockquote><p>步骤与简单消息大致相同，这里只列出不同的地方</p></blockquote><ol><li>新建 Team.msg 文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string name</span><br><span class="line">Student leader</span><br></pre></td></tr></table></figure><ol start="2"><li><p>配置 <code>CMakeLists.txt</code></p><ol><li>添加 <code>add_message_file</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add_message_files(</span><br><span class="line">        FILES</span><br><span class="line">        Student.msg</span><br><span class="line">        Team.msg</span><br><span class="line">)</span><br><span class="line"><span class="comment"># Team.msg 为创建的自定义 obj 消息，文件必须在 msg 目录下</span></span><br><span class="line"><span class="comment"># 由于 Team.msg 引用了 Student.msg，将 Student.msg 放在靠前的位置。</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="引用第三方库的消息"><a href="#引用第三方库的消息" class="headerlink" title="引用第三方库的消息"></a>引用第三方库的消息</h3><ol><li>修改 Team.msg</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string name</span><br><span class="line">Student leader</span><br><span class="line">geometry_msgs&#x2F;Twist location</span><br></pre></td></tr></table></figure><ol start="2"><li>修改 <code>package.xml</code> 文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>geometry_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build_export_depend</span>&gt;</span>geometry_msgs<span class="tag">&lt;/<span class="name">build_export_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>geometry_msgs<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>geometry_msgs<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>修改 CMakeLists.txt</p><ol><li>在 <code>find_package</code> 中添加<code>geometry_msgs</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rosmsg</span><br><span class="line">  rospy</span><br><span class="line">  message_generation</span><br><span class="line">  geometry_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>generate_messages</code>中添加<code>geometry_msgs</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">generate_messages(</span><br><span class="line">        DEPENDENCIES</span><br><span class="line">        std_msgs</span><br><span class="line">        geometry_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用rosmsg"><a href="#使用rosmsg" class="headerlink" title="使用rosmsg"></a>使用rosmsg</h3><p>在终端使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosmsg show (package_name)/(msg_name)</span><br></pre></td></tr></table></figure><ul><li>package_name：对应的包名称</li><li>msg_name：对应的消息名称</li></ul><p>当前的例子使用的命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosmsg show demo_msgs/Student</span><br></pre></td></tr></table></figure><p>终端打印为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string name</span><br><span class="line">int64 age</span><br></pre></td></tr></table></figure><p><code>rosmsg</code>的更多用法在下面介绍</p><h2 id="srv-消息"><a href="#srv-消息" class="headerlink" title="srv 消息"></a>srv 消息</h2><h3 id="创建一个简单的-srv-消息"><a href="#创建一个简单的-srv-消息" class="headerlink" title="创建一个简单的 srv 消息"></a>创建一个简单的 srv 消息</h3><ol><li>首先来到 <code>package</code> 目录下，创建 <code>srv</code> 目录</li><li>新建一个 <code>NumOption.srv</code> 文件</li><li>添加数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">float64 a</span><br><span class="line">float64 b</span><br><span class="line">string option</span><br><span class="line">---</span><br><span class="line">float64 result</span><br></pre></td></tr></table></figure><ol start="4"><li>配置 <code>package.xml</code> 文件，添加如下代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>配置 CMakeLists.txt</p><ol><li>在 <code>find_package</code> 中添加 <code>message_generation</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rosmsg</span><br><span class="line">  rospy</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="2"><li>添加 <code>add_service_files</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 srv 文件</span></span><br><span class="line">add_service_files(</span><br><span class="line">  FILES</span><br><span class="line">  NumOption.srv        <span class="comment"># 该名称就是你创建的 srv 文件的名称</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li>添加 <code>generation_msg</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于添加生成消息所需的依赖</span></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs    <span class="comment"># 默认添加 std_msgs</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li>在 <code>catkin_package</code>中添加<code>CATKIN_DEPENDS message_runtime</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># catkin 所需依赖</span></span><br><span class="line">catkin_package(</span><br><span class="line">  <span class="comment"># INCLUDE_DIRS include</span></span><br><span class="line">  <span class="comment"># LIBRARIES demo_msg</span></span><br><span class="line">  <span class="comment"># CATKIN_DEPENDS roscpp rosmsg rospy</span></span><br><span class="line">  <span class="comment"># DEPENDS system_lib</span></span><br><span class="line">  <span class="comment"># 为 catkin 添加 message_runtime 依赖</span></span><br><span class="line">  CATKIN_DEPENDS message_runtime</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>来到 <code>workspace</code>目录，使用命令 <code>catkin_make</code> 编译即可。</p></li><li><p>在 <code>devel</code> 的<code>include</code>目录下，如果生成了头文件，则说明创建成功。</p></li></ol><h3 id="自定义复杂类型-srv-消息"><a href="#自定义复杂类型-srv-消息" class="headerlink" title="自定义复杂类型 srv 消息"></a>自定义复杂类型 srv 消息</h3><blockquote><p>步骤与简单 srv 消息大致相同，这里只列出不同的地方</p></blockquote><ol><li>首先来到 <code>package</code> 目录下，创建 <code>srv</code> 目录</li><li>新建一个 <code>FindTeam.srv</code> 文件</li><li>添加数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student student</span><br><span class="line">---</span><br><span class="line">Team team</span><br></pre></td></tr></table></figure><ol start="4"><li>配置 <code>package.xml</code> 文件，添加如下代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>demo_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build_export_depend</span>&gt;</span>demo_msgs<span class="tag">&lt;/<span class="name">build_export_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>demo_msgs<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>demo_msgs<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>配置 CMakeLists.txt</p><ol><li>在 <code>find_package</code> 中添加 <code>message_generation</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rosmsg</span><br><span class="line">  rospy</span><br><span class="line">  message_generation</span><br><span class="line">  demo_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="2"><li>添加 <code>add_service_files</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 srv 文件</span></span><br><span class="line">add_service_files(</span><br><span class="line">  FILES</span><br><span class="line">  NumOption.srv        <span class="comment"># 该名称就是你创建的 srv 文件的名称</span></span><br><span class="line">  FindTeam.srv</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li>添加 <code>generation_msg</code></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于添加生成消息所需的依赖</span></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs    <span class="comment"># 默认添加 std_msgs</span></span><br><span class="line">  demo_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>来到 <code>workspace</code>目录，使用命令 <code>catkin_make</code> 编译即可。</p></li><li><p>在 <code>devel</code> 的<code>include</code>目录下，如果生成了头文件，则说明创建成功。</p></li></ol><h3 id="使用rossrv"><a href="#使用rossrv" class="headerlink" title="使用rossrv"></a>使用rossrv</h3><p>在终端使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosmsg show (package_name)/(srv_name)</span><br></pre></td></tr></table></figure><ul><li>package_name：对应的包名称</li><li>srv_name：对应的消息名称</li></ul><p>当前的例子使用的命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rossrv show demo_srvs/NumOption</span><br></pre></td></tr></table></figure><p>终端打印为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">float64 a</span><br><span class="line">float64 b</span><br><span class="line">string option</span><br><span class="line">---</span><br><span class="line">float64 result</span><br></pre></td></tr></table></figure><p><code>rossrv</code>的更多用法在下面介绍</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="差别"><a href="#差别" class="headerlink" title="差别"></a>差别</h3><ol><li><code>msg</code> 消息要放在<code>package</code>的 <code>msg</code> 文件夹下，而<code>srv</code>消息则放到<code>package</code>的<code>srv</code>文件夹下。</li><li><code>msg</code>消息的后缀是<code>msg</code>，<code>srv</code>消息的后缀是<code>srv</code>。</li><li><code>msg</code>消息的内容无需使用<code>---</code>分割，而<code>srv</code>消息内容需要使用<code>---</code>分割，上半部分是<code>request</code>消息，而下半部分是<code>response</code>消息</li><li><code>msg</code>消息需要添加到<code>add_message_files</code>中，以Student.msg为例。</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add_message_files(</span><br><span class="line">  FILES</span><br><span class="line">  ... <span class="comment"># 这里是你的其他消息</span></span><br><span class="line">  Student.msg        <span class="comment"># 该名称就是你创建的 msg 文件的名称</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="5"><li><code>srv</code>消息需要添加到<code>add_service_files</code>中，以<code>NumOption.srv</code>为例</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 srv 文件</span></span><br><span class="line">add_service_files(</span><br><span class="line">  FILES</span><br><span class="line">  ... <span class="comment"># 这里是你的其他消息</span></span><br><span class="line">  NumOption.srv        <span class="comment"># 该名称就是你创建的 srv 文件的名称</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="6"><li><code>msg</code>消息使用<code>rosmsg</code>查看数据，<code>srv</code>消息使用<code>rossrv</code>查看数据。</li></ol><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><ol><li>都需要在<code>package.xml</code>中添加如下两行代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>引用其他<code>package</code>中的消息都需要在package.xml和CMakeLists.txt中添加依赖，以下以<code>Demo_msgs</code>为例</p><ol><li><code>package.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>demo_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build_export_depend</span>&gt;</span>demo_msgs<span class="tag">&lt;/<span class="name">build_export_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>demo_msgs<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>CMakeLists.txt</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  ... <span class="comment"># 这里是你其他的依赖</span></span><br><span class="line">  demo_msgs </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  ... <span class="comment"># 这里是你其他的依赖</span></span><br><span class="line">  demo_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>都需要在CMakeLists.txt文件中添加<code>message_generation</code>，<code>CATKIN_DEPENDS message_runtime</code></p></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  ... <span class="comment"># 这里是你其他的依赖</span></span><br><span class="line">  message_generation </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">catkin_package(</span><br><span class="line">  ... <span class="comment"># 这里是你其他的依赖</span></span><br><span class="line">  CATKIN_DEPENDS message_runtime</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li>生成的头文件都在对应的 <code>devel</code> 的 <code>include</code> 目录</li></ol><h2 id="msg-和-srv-调试工具"><a href="#msg-和-srv-调试工具" class="headerlink" title="msg 和 srv 调试工具"></a>msg 和 srv 调试工具</h2><h3 id="rosmsg"><a href="#rosmsg" class="headerlink" title="rosmsg"></a>rosmsg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ rosmsg -h</span><br><span class="line">----</span><br><span class="line"><span class="comment"># rosmsg 是一个用来显示 ROS 消息类型的命令行工具</span></span><br><span class="line">rosmsg is a <span class="built_in">command</span>-line tool <span class="keyword">for</span> displaying information about ROS Message types.</span><br><span class="line"><span class="comment"># 命令</span></span><br><span class="line">Commands:</span><br><span class="line">    <span class="comment"># rosmsg show: 显示消息描述</span></span><br><span class="line">    rosmsg show    Show message description</span><br><span class="line">    <span class="comment"># rosmsg info: show 的别名</span></span><br><span class="line">    rosmsg info    Alias <span class="keyword">for</span> rosmsg show</span><br><span class="line">    <span class="comment"># rosmsg list: 所有消息列表</span></span><br><span class="line">    rosmsg list    List all messages</span><br><span class="line">    <span class="comment"># rosmsg md5: 显示消息 md5 值</span></span><br><span class="line">    rosmsg md5    Display message md5sum</span><br><span class="line">    <span class="comment"># rosmsg package: 包中的消息列表</span></span><br><span class="line">    rosmsg package    List messages <span class="keyword">in</span> a package</span><br><span class="line">    <span class="comment"># rosmsg packages: 显示所有 msg 的包名</span></span><br><span class="line">    rosmsg packages    List packages that contain messages</span><br><span class="line"><span class="comment"># 使用 rosmsg &lt;command&gt; -h 获取更多的帮助</span></span><br><span class="line">Type rosmsg &lt;<span class="built_in">command</span>&gt; -h <span class="keyword">for</span> more detailed usage</span><br></pre></td></tr></table></figure><h4 id="show-info"><a href="#show-info" class="headerlink" title="show/info"></a>show/info</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ rosmsg show -h</span><br><span class="line">----</span><br><span class="line"><span class="comment"># 使用方法：rosmsg show [options] &lt;message type&gt;</span></span><br><span class="line">Usage: rosmsg show [options] &lt;message <span class="built_in">type</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line">Options:</span><br><span class="line">  <span class="comment"># -h, --help          显示帮助消息，并退出</span></span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  <span class="comment"># -r, --raw           显示原始消息文本，包括注释。</span></span><br><span class="line">  -r, --raw             show raw message text, including comments</span><br><span class="line">  <span class="comment"># -b BAGFILE, --bag=BAGFILE</span></span><br><span class="line">  -b BAGFILE, --bag=BAGFILE</span><br><span class="line">                        <span class="comment"># 从.bag 文件中显示消息</span></span><br><span class="line">                        show message from .bag file</span><br></pre></td></tr></table></figure><h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ rosmsg show -r turtle_actionlib/Velocity</span><br><span class="line">----</span><br><span class="line"><span class="comment"># Copied from turtlesim https://github.com/ros/ros_tutorials/blob/f7da7779e82dcc3977b2c220a843cd86dd269832/turtlesim/msg/Velocity.msg. We had to copy this into this package since it has been replaced with geometry_msgs/Twist there and comforming to Twist requires to change code, which I doubt worth time it takes. So if you think it is, please go ahead make a patch.</span></span><br><span class="line"></span><br><span class="line">float32 linear</span><br><span class="line">float32 angular</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rosmsg show turtle_actionlib/Velocity</span><br><span class="line">----</span><br><span class="line">float32 linear</span><br><span class="line">float32 angular</span><br></pre></td></tr></table></figure><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ rosmsg list</span><br><span class="line">---- </span><br><span class="line"><span class="comment"># 选取最后几行的数据</span></span><br><span class="line">turtlesim/Color</span><br><span class="line">turtlesim/Pose</span><br><span class="line">visualization_msgs/ImageMarker</span><br><span class="line">visualization_msgs/InteractiveMarker</span><br><span class="line">visualization_msgs/InteractiveMarkerControl</span><br><span class="line">visualization_msgs/InteractiveMarkerFeedback</span><br><span class="line">visualization_msgs/InteractiveMarkerInit</span><br><span class="line">visualization_msgs/InteractiveMarkerPose</span><br><span class="line">visualization_msgs/InteractiveMarkerUpdate</span><br><span class="line">visualization_msgs/Marker</span><br><span class="line">visualization_msgs/MarkerArray</span><br><span class="line">visualization_msgs/MenuEntry</span><br></pre></td></tr></table></figure><h4 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用方式 rosmsg md5 &lt;message type&gt;</span></span><br><span class="line">Usage: rosmsg md5 &lt;message <span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rosmsg md5 std_msgs/String</span><br><span class="line">----</span><br><span class="line">992ce8a1687cec8c8bd883ec73ca41d1</span><br></pre></td></tr></table></figure><h4 id="package"><a href="#package" class="headerlink" title="package"></a>package</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ rosmsg package -h</span><br><span class="line">---</span><br><span class="line">Usage: rosmsg package &lt;package&gt;</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --<span class="built_in">help</span>  show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  <span class="comment"># -s        所有的消息都显示在一行</span></span><br><span class="line">  -s          list all msgs on a single line</span><br></pre></td></tr></table></figure><h5 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rosmsg package -s turtlesim</span><br><span class="line">---</span><br><span class="line">turtlesim/Color turtlesim/Pose</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rosmsg package turtlesim</span><br><span class="line">---</span><br><span class="line">turtlesim/Color</span><br><span class="line">turtlesim/Pose</span><br></pre></td></tr></table></figure><h4 id="packages"><a href="#packages" class="headerlink" title="packages"></a>packages</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ rosmsg packages</span><br><span class="line">---</span><br><span class="line"><span class="comment"># 选取了最后几行数据</span></span><br><span class="line">tf</span><br><span class="line">tf2_msgs</span><br><span class="line">theora_image_transport</span><br><span class="line">trajectory_msgs</span><br><span class="line">turtle_actionlib</span><br><span class="line">turtlesim</span><br><span class="line">visualization_msgs</span><br></pre></td></tr></table></figure><h3 id="rossrv"><a href="#rossrv" class="headerlink" title="rossrv"></a>rossrv</h3><p><code>rossrv</code> 的命令和 <code>rosmsg</code> 的命令除了显示的数据是 srv 以外其他都是一模一样的，参考上方的 <code>rosmsg</code> 即可</p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> ROS msg </tag>
            
            <tag> ROS srv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMakeLists.txt 详解</title>
      <link href="/2019/8070dad1.html"/>
      <url>/2019/8070dad1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>修改自 ros 官方 wiki</p><p><a href="http://wiki.ros.org/catkin/CMakeLists.txt">http://wiki.ros.org/catkin/CMakeLists.txt</a></p></blockquote><p><code>CMakeLists.txt</code> 是 <code>CMake</code> 构建系统的输入，用于构建软件包。<code>catkin</code> 的 <code>CMakeLists.txt</code> 带有一些其它的约束</p><h2 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h2><ol><li><p>所需的 CMake 版本。（ <code>cmake_minimum_required</code> ）</p></li><li><p>包名称。（ <code>project</code> ）</p></li><li><p>查找构建所需的 CMake或 Catkin 软件包。（ <code>find_package</code> ）</p></li><li><p>启动 Python 模块支持。（ <code>catkin_python_setup</code> ）</p></li><li><p>消息、服务、动作生成器。（ <code>add_message_files</code>，<code>add_service_files</code>，<code>add_action_files</code> ）</p></li><li><p>调用消息、服务、动作生成。（ <code>generate_messages</code> ）</p></li><li><p>指定包构建信息导出。（ <code>catkin_package</code> ）</p></li><li><p>添加要构建的库或可执行文件。（ <code>add_library</code>，<code>add_executable</code>，<code>target_link_libraries</code> ）</p></li><li><p>测试构建。（ <code>catkin_add_gtest</code> ）</p></li><li><p>安装规则。（ <code>install</code> ）</p></li></ol><a id="more"></a><h2 id="CMake-版本"><a href="#CMake-版本" class="headerlink" title="CMake 版本"></a>CMake 版本</h2><p>每个 catkin CMakeLists.txt 文件必须以所需的 CMake 版本开头。Catkin 需要的版本是 2.8.3 或更高</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h2><p>必须指定其包名称。假设我们正在制作一个名为 <code>hello_ros</code> 的包。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">project</span>(hello_ros)</span><br></pre></td></tr></table></figure><p>注意：在 CMake 中，可以在以后任意需要的地方使用变量<code>$&#123;PROJECT_NAME&#125;</code>在 CMake 脚本中的任何位置应用项目名称。</p><h2 id="查找依赖的-CMake-软件包"><a href="#查找依赖的-CMake-软件包" class="headerlink" title="查找依赖的 CMake 软件包"></a>查找依赖的 CMake 软件包</h2><p>我们需要使用 find_package 函数来指定找到哪些其他 CMake 软件包来构建我们的项目。Catkin 至少需要一个依赖</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED)</span><br></pre></td></tr></table></figure><blockquote><p>术语：</p><p>wet packages（湿包），用 Catkin 构建的包</p><p>dry packages（干包），用 rosbuild 构建的包</p></blockquote><p>如果项目依赖于其他的湿包，则可以将这些包指定为组件，而不是在这些包上使用 <code>find_package</code>，它使工作更加的轻松。例如使用了 <code>roscpp</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(</span><br><span class="line">    catkin REQUIRED COMPONENTS </span><br><span class="line">    roscpp</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(roscpp REQUIRED)</span><br></pre></td></tr></table></figure><p>显然，第一种方式更为方便</p><h3 id="find-package-有什么作用"><a href="#find-package-有什么作用" class="headerlink" title="find_package() 有什么作用"></a>find_package() 有什么作用</h3><p>如果 CMake通过 find_package() 找到一个包，它会自动创建几个 CMake 的环境变量，这些变量提供有关找到的包的信息。这些环境变量可以在稍后的 CMake 脚本中使用。这些环境变量描述了软件包导出的头文件在哪里，源文件在哪里，软件包所依赖的库以及这些库的路径。名称始终遵循<code>&lt;PACKAGE NAME&gt;_&lt;PROPERTY&gt;</code>的约定：</p><ul><li>&lt;NAME&gt;_FOUND，如果找到该值为 true，否则为 false</li><li>&lt;NAME&gt;_INCLUDE_DIRS 或&lt;NAME&gt;_INCLUDES，包导出的包含路径</li><li>&lt;NAME&gt;_LIBRARIES或&lt;NAME&gt;_LIBS，包导出的库</li><li>&lt;NAME&gt;_DEFINITIONS </li></ul><h3 id="为什么将-Catkin-包指定为组件（COMPONENTS）"><a href="#为什么将-Catkin-包指定为组件（COMPONENTS）" class="headerlink" title="为什么将 Catkin 包指定为组件（COMPONENTS）"></a>为什么将 Catkin 包指定为组件（COMPONENTS）</h3><p>Catkin 包在 Cakin 中并不是真正的组件，但是在 Catkin 设计中利用了 CMake 这个组件功能，以节省大量的编辑时间。</p><p>对于catkin包，如果将find_package用作catkin的组件，则这是有利的，因为使用<code>catkin_</code>前缀创建了一组环境变量。</p><h2 id="catkin-package"><a href="#catkin-package" class="headerlink" title="catkin_package()"></a>catkin_package()</h2><p><code>catkin_package()</code>是 catkin 提供的 <code>CMake</code> 宏。这是向构建系统指定特定于 Catkin 的信息所必需的，而构建系统又将其用于生成 pkg-config 和 CMake 文件</p><p><strong>必须在使用<code>add_library()</code>和<code>add_executable()</code>声明任何目标之前调用此函数。</strong></p><p>该函数具有 5 个可选参数：</p><ol><li><code>INCLUDE_DIRS</code>：导出包的包含路径</li><li><code>LIBRARIES</code>：项目中导出的库</li><li><code>CATKIN_DEPENDS</code>：此项目依赖的其他 Catkin 项目</li><li><code>DEPENDS</code>：此项目依赖的非 Catkin CMake 项目</li><li><code>CFG_EXTRAS</code>：其他配置选项</li></ol><p><a href="https://docs.ros.org/groovy/api/catkin/html/dev_guide/generated_cmake_api.html#catkin-package">详细参数参见文档</a></p><h2 id="指定构建目标"><a href="#指定构建目标" class="headerlink" title="指定构建目标"></a>指定构建目标</h2><p>构建目标通常有多种形式，但是通常它们代表以下两种可能性之一：</p><ul><li>可执行程序</li><li>库文件</li></ul><h3 id="目标命名"><a href="#目标命名" class="headerlink" title="目标命名"></a>目标命名</h3><p>需要注意的是，Catkin 中构建目标名称必须唯一，而与构建、安装到的文件夹无关，这也是 CMake 的要求，但是，构建目标名称的唯一性仅仅只是在 CMake 内部才是必须的。我们可以使用<code>set_target_properties()</code>函数将目标重命名为其他目标：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set_target_properties</span>(</span><br><span class="line">    rviz_image_view</span><br><span class="line">    PROPERTIES OUTPUT_NAME image_view</span><br><span class="line">    PREFIX <span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在构建过程中，将目标<code>rviz_image_view</code>的名称更改为<code>image_view</code></p><h3 id="自定义输入目录"><a href="#自定义输入目录" class="headerlink" title="自定义输入目录"></a>自定义输入目录</h3><p>通常将可执行程序和库文件的默认输出目录设置为合理的值，但在某些情况下必须对其进行自定义。例如，包含 Python 绑定的库必须放置在其他文件夹中才能在 Python 中导入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set_target_properties</span>(</span><br><span class="line">  python_module_library</span><br><span class="line">  PROPERTIES LIBRARY_OUTPUT_DIRECTORY</span><br><span class="line">  <span class="variable">$&#123;CATKIN_DEVEL_PREFIX&#125;</span>/<span class="variable">$&#123;CATKIN_PACKAGE_PYTHON_DESTINATION&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="包含路径和库路径"><a href="#包含路径和库路径" class="headerlink" title="包含路径和库路径"></a>包含路径和库路径</h3><p>在指定目标之前，你需要指定在哪里可以找到所需的资源，特别是头文件和库文件</p><ul><li>包含路径：在哪里找到需要的头文件（在 C/C++ 中最常见）</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(&lt;dir1&gt; &lt;dir2&gt; ... &lt;dirN&gt;)</span><br></pre></td></tr></table></figure><ul><li>链接路径：在哪里可以找到库文件</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">link_directories</span>(&lt;dir1&gt; &lt;dir2&gt; ... &lt;dirN&gt;)</span><br></pre></td></tr></table></figure><h4 id="include-directories"><a href="#include-directories" class="headerlink" title="include_directories()"></a>include_directories()</h4><p><code>include_directories</code>的参数因为 <code>find_package</code> 调动生成的*_INCLUDE_DIRS变量以及需要包含的任何其他目录。如果你需要使用 <code>Catkin</code> 和 <code>Boost</code>，则<code>include_directories()</code>调用应如下所示：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">  <span class="keyword">include</span> </span><br><span class="line">  <span class="variable">$&#123;Boost_INCLUDE_DIRS&#125;</span> </span><br><span class="line">  <span class="variable">$&#123;catkin_INCLUDE_DIRS&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="link-directories-（不建议使用）"><a href="#link-directories-（不建议使用）" class="headerlink" title="link_directories()（不建议使用）"></a>link_directories()（不建议使用）</h4><p><code>link_directories()</code> 函数可用于添加其他库的路径，但是不建议这么做。当所有 <code>Catkin</code> 和 <code>CMake</code> 的包被 <code>find_package</code> 时，会自动添加其链接信息，只需要使用<code>target_link_libraries()</code>链接即可。</p><h3 id="可执行程序"><a href="#可执行程序" class="headerlink" title="可执行程序"></a>可执行程序</h3><p>要指定必须构建的可执行程序，我们必须使用<code>add_executable()</code>函数。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(main src/main.cc)</span><br></pre></td></tr></table></figure><p>这将构建一个名为 main 的可执行程序，该可执行程序由 1 个源文件构建：<code>src/main.cc</code></p><h3 id="库文件"><a href="#库文件" class="headerlink" title="库文件"></a>库文件</h3><p>使用<code>add_library()</code>函数来构建库文件。默认情况下，<code>Catkin</code> 构建共享库。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(</span><br><span class="line">  <span class="variable">$&#123;PROJECT_NAME&#125;</span> </span><br><span class="line">  <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_SRCS&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="target-link-libraries"><a href="#target-link-libraries" class="headerlink" title="target_link_libraries"></a>target_link_libraries</h3><p>使用<code>target_link_libraries()</code>函数来指定可执行程序需要链接到的库文件。通常<code>add_executable()</code>调用之后完成此操作。如果找不到 <code>ros</code>，请添加<code>$&#123;catkin_LIBRARIES&#125;</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(&lt;executableTargetName&gt;  &lt;lib1&gt;  &lt;lib2&gt; ... &lt;libN&gt;)</span><br></pre></td></tr></table></figure><p><strong>注意：在大多数情况下都不需要使用 <code>link_directories()</code>，因为该信息是通过 <code>find_package()</code> 自动获取的</strong></p><h2 id="消息、服务和动作"><a href="#消息、服务和动作" class="headerlink" title="消息、服务和动作"></a>消息、服务和动作</h2><p>ROS 中的消息<code>(.msg)</code>，服务<code>(.srv)</code>和动作<code>(.action)</code>文件需要特殊的预处理器构建步骤，然后才能由 ROS 包构建和使用。这些宏的目的是生成特定编程语言的文件，以便人们可以选择其他编程语言来利用消息、服务和操作。构建系统将使用所有可用的生成器<code>(gencpp, genpy, genlisp等)</code>生成绑定。</p><p>Catkin 提供了三个宏来分别处理消息、服务和动作：</p><ul><li><code>add_message_files</code></li><li><code>add_service_files</code></li><li><code>add_action_files</code></li></ul><p>然后，必须在使用完这些宏之后调用该宏以生成特定的文件：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generate_messages()</span><br></pre></td></tr></table></figure><h3 id="重要的前提条件和约束"><a href="#重要的前提条件和约束" class="headerlink" title="重要的前提条件和约束"></a>重要的前提条件和约束</h3><ul><li>以下宏必须在 catkin_package()宏之前出现，以便正常工作</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS ...)</span><br><span class="line">add_message_files(...)</span><br><span class="line">add_service_files(...)</span><br><span class="line">add_action_files(...)</span><br><span class="line">generate_messages(...)</span><br><span class="line">catkin_package(...)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>你的 <code>catkin_package()</code>必须对<code>message_runtime</code>具有<code>CATKIN_DEPENDS</code>依赖性</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">catkin_package(</span><br><span class="line"> ...</span><br><span class="line"> CATKIN_DEPENDS message_runtime ...</span><br><span class="line"> ...)</span><br><span class="line"> ros</span><br></pre></td></tr></table></figure><ul><li>你必须将<code>message_generation</code>添加到 <code>find_package()</code>中，无论是单独使用还是作为 Caktin 组件使用。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(</span><br><span class="line">  catkin REQUIRED COMPONENTS </span><br><span class="line">  message_generation</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>你的 <code>package.xml</code>文件中必须包含<code>构建时依赖message_generation</code>和<code>运行时依赖message_runtime</code>，如果依赖关系是其他包中传递过来的，则没有必要。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果你有一个目标（甚至是过渡性的）依赖于需要构建消息、服务、操作的其他目标，则需要添加对目标的<code>catkin_EXPORTED_TARGETS</code>的显式依赖关系，以便以正确的顺序构建它们。这种情况几乎总是适用的，除非你的程序包确实不适用 ROS 的任何部分，这种依赖性不能自动传播。（<code>some_target</code>是有<code>add_executable()</code>设置的目标名称）：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_dependencies</span>(</span><br><span class="line">  some_target </span><br><span class="line">  <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>如果你具有用于构建消息和服务的程序包，以及适用这些消息和服务的可执行文件，则需要在自动生成消息目标上创建显示依赖项，以便用正确的顺序构建它们。（<code>some_target</code>是有<code>add_executable()</code>设置的目标名称）：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_dependencies</span>(</span><br><span class="line">  some_target </span><br><span class="line">  <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>如果你的包满足上述两种情况，则你需要添加两个显式依赖：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_dependencies</span>(</span><br><span class="line">  some_target </span><br><span class="line">  <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; </span><br><span class="line">  <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="启用-Python-模块支持"><a href="#启用-Python-模块支持" class="headerlink" title="启用 Python 模块支持"></a>启用 Python 模块支持</h2><p>如果你的 ros 包提供了一些 Python 模块，则应创建 setup.py 文件并调用</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_python_setup()</span><br></pre></td></tr></table></figure><p>注意：必须在调用<code>generate_messages()</code>和<code>catkin_package()</code>之前调用</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>Catkin有一个特定的宏，用于处理基于 gtest 的单元测试，称为 <code>catkin_add_target()</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(CATKIN_ENABLE_TESTING)</span><br><span class="line">  catkin_add_gtest(myUnitTest <span class="keyword">test</span>/utest.cpp)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> CMakeLists </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package.xml 详解</title>
      <link href="/2019/b979b152.html"/>
      <url>/2019/b979b152.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>修改自 ros 官方 wiki</p><p><a href="http://wiki.ros.org/catkin/package.xml">http://wiki.ros.org/catkin/package.xml</a></p></blockquote><p><code>package.xml</code>文件定义了包的属性，包括软件名称，版本号，作者，维护者，以及依赖关系。</p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>每个<code>package.xml</code>文件都以&lt;package&gt;标记作为根标记</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">format</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="必备标签"><a href="#必备标签" class="headerlink" title="必备标签"></a>必备标签</h2><table><thead><tr><th>No</th><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>&lt;name&gt;</td><td>包名</td></tr><tr><td>2</td><td>&lt;version&gt;</td><td>版本号（必须为 3 个点分隔的整数）</td></tr><tr><td>3</td><td>&lt;description&gt;</td><td>包内容的描述</td></tr><tr><td>4</td><td>&lt;maintainer&gt;</td><td>负责维护包裹的人员名称</td></tr><tr><td>5</td><td>&lt;license&gt;</td><td>许可，例如 GPL，BSD，ASL</td></tr></tbody></table><a id="more"></a><h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><table><thead><tr><th>名称</th><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>构建依赖关系</td><td>&lt;build_depend&gt;</td><td>指定构建此软件包所需要的软件包</td></tr><tr><td>导出依赖关系</td><td>&lt;build_export_depend&gt;</td><td>指定针对该软件包构建库所需的软件包</td></tr><tr><td>执行依赖关系</td><td>&lt;exec_depend&gt;</td><td>指定运行该软件包中代码所需的软件包</td></tr><tr><td>测试依赖</td><td>&lt;test_depend&gt;</td><td>指定单元测试的其他依赖项</td></tr><tr><td>构建依赖工具</td><td>&lt;buildtool_depend&gt;</td><td>指定此软件包自行构建所需的构建系统工具，通常只需要 <code>catkin</code>。</td></tr><tr><td>文档工具依赖</td><td>&lt;doc_depend&gt;</td><td>指定此软件包生成文档所需的文档工具</td></tr></tbody></table><p>特殊标签：&lt;depend&gt; 该标签相当于构建，导出，执行依赖关系。</p><h2 id="原包（Metapackages）"><a href="#原包（Metapackages）" class="headerlink" title="原包（Metapackages）"></a>原包（Metapackages）</h2><p>将多个软件包分组为一个软件软件包，通过 <code>metapackages</code> 完成，标签如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">export</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">metapackage</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">export</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原包的 <code>CMakeLists.txt</code> 文件中必须包括</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">3</span>)</span><br><span class="line"><span class="keyword">project</span>(&lt;PACKAGE_NAME&gt;)</span><br><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED)</span><br><span class="line">catkin_metapackage()</span><br></pre></td></tr></table></figure><h2 id="附加标签"><a href="#附加标签" class="headerlink" title="附加标签"></a>附加标签</h2><ol><li>&lt;url&gt; 有关包信息的 url</li><li>&lt;author&gt; 包作者信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS 工作空间和包</title>
      <link href="/2019/ros-ws-pkg.html"/>
      <url>/2019/ros-ws-pkg.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境说明</p><p>ROS版本：ROS Kinetic Kame </p><p>Ubuntu版本：Ubuntu 16.04.6 LTS，（<code>lsb_release -a</code>）</p><p>Python版本：Python 2.7.12</p><p>CMake 版本：3.5.1</p></blockquote><h2 id="工作空间（workspace）"><a href="#工作空间（workspace）" class="headerlink" title="工作空间（workspace）"></a>工作空间（workspace）</h2><h3 id="1-创建工作空间"><a href="#1-创建工作空间" class="headerlink" title="1. 创建工作空间"></a>1. 创建工作空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p cakin_ws/src</span><br></pre></td></tr></table></figure><p><code>cakin_ws</code>为工作空间名。<code>src</code>为固定目录，不可更改。</p><h3 id="2-编译工作空间"><a href="#2-编译工作空间" class="headerlink" title="2. 编译工作空间"></a>2. 编译工作空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> cakin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><p>来到之前创建好的工作空间目录下，使用<code>catkin_make</code>命令，将编译工作空间。</p><p>此时，我们的工作空间就创建完毕</p><a id="more"></a><h3 id="3-初始化工作空间遇到的坑"><a href="#3-初始化工作空间遇到的坑" class="headerlink" title="3. 初始化工作空间遇到的坑"></a>3. 初始化工作空间遇到的坑</h3><h4 id="conda-环境问题"><a href="#conda-环境问题" class="headerlink" title="conda 环境问题"></a>conda 环境问题</h4><p>如果之前安装好，并且初始化了 conda 环境，可能会出现该问题，在错误信息中心会出现一些与 python 有关，带有 conda 的路径的一些信息。</p><h5 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h5><ol><li>conda默认激活，python 路径为 conda 中的 python</li><li>ros 的库都默认安装在了系统的 python2 中，导致<code>catkin_make</code>的时候，找不到 ros 需要的库</li></ol><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ol><li>完全退出 conda 环境</li><li>测试是否退出，使用命令 <code>which python</code>，打印的是不带 <code>conda</code>的路径，一般为<code>/usr/bin/python</code></li><li>删除工作空间目录下的出 <code>src</code> 之外的所有文件，因为之前生成的会带有 Python 路径缓存。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf `ls | grep -v src`</span><br></pre></td></tr></table></figure><ol start="4"><li>再一次 <code>catkin_make</code>即可</li></ol><h2 id="包（Package）"><a href="#包（Package）" class="headerlink" title="包（Package）"></a>包（Package）</h2><blockquote><p> 以下内容默认你已经创建了一个名为<code>catkin_ws</code>的工作空间，且编译成功。</p></blockquote><h3 id="创建一个包"><a href="#创建一个包" class="headerlink" title="创建一个包"></a>创建一个包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 进入 src 目录</span></span><br><span class="line"><span class="built_in">cd</span> catkin_ws/src</span><br><span class="line"><span class="comment"># 2. 创建名为 hello_ros 的包</span></span><br><span class="line">catkin_create_pkg hello_ros rospy roscpp std_msgs</span><br></pre></td></tr></table></figure><p><code>catkin_create_pkg</code>就是创建包的命令了，其语法为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_create_pkg &lt;package_name&gt; [depend1] [depend2] ... [dependn] </span><br></pre></td></tr></table></figure><p>创建完成后，在 <code>src</code>目录下会生成<code>hello_ros</code>文件夹，该文件夹中包含两个文件<code>package.xml</code>和<code>CMakeLists.txt</code>，两个文件夹<code>src</code>和<code>include/hello_ros</code></p><ol><li><code>package.xml</code>包的一些描述信息</li><li><code>CMakeLists.txt</code> cmake 配置文件</li><li><code>src</code> 存放 C++源代码的文件夹</li><li><code>include/hello_ros</code>存放 C++头文件的文件夹</li></ol><h3 id="编译一个包"><a href="#编译一个包" class="headerlink" title="编译一个包"></a>编译一个包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在catkin工作空间下</span></span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><blockquote><p>catkin_make 以后会做更详细的介绍，此处我们使用<code>catkin_make</code>编译整个工作空间即可。 </p></blockquote><h3 id="包的依赖关系"><a href="#包的依赖关系" class="headerlink" title="包的依赖关系"></a>包的依赖关系</h3><h4 id="一级依赖"><a href="#一级依赖" class="headerlink" title="一级依赖"></a>一级依赖</h4><p>一级依赖就是直接依赖，在创建的时候，跟在包名之后的依赖都是该包的一级依赖，可以通过 <code>rospack depends1 &lt;package_name&gt;</code> 来查看一级依赖</p><h4 id="间接依赖"><a href="#间接依赖" class="headerlink" title="间接依赖"></a>间接依赖</h4><p>间接依赖就是，包的依赖包，还依赖着别的包，该包就是间接依赖。</p><p>查看所有依赖的命令<code>rospack depends &lt;package_name&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS 安装</title>
      <link href="/2019/ROS-Install.html"/>
      <url>/2019/ROS-Install.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装日期：2019-10-10</p><p>ROS版本：ROS Kinetic Kame </p><p>Ubuntu版本：Ubuntu 16.04.6 LTS，（<code>lsb_release -a</code>）</p><p>ROS源：Tsinghua University</p><p>Python版本：Python 2.7.12</p><p>CMake 版本：3.5.1</p></blockquote><h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://gitee.com/askeynil/AskConfiguration/raw/master/ros.sh | bash</span><br></pre></td></tr></table></figure><p>一些常用的 Ubuntu 自动化脚本：</p><ol><li><a href="https://gitee.com/askeynil/AskConfiguration">码云</a></li><li><a href="https://github.com/askeynil/AskConfiguration">GitHub</a></li></ol><a id="more"></a><h2 id="手动安装方式"><a href="#手动安装方式" class="headerlink" title="手动安装方式"></a>手动安装方式</h2><blockquote><p>来源：<a href="http://wiki.ros.org/cn/kinetic/Installation/Ubuntu">ros 安装官方教程</a></p></blockquote><h3 id="更新-Ubuntu-为-Tsinghua-源"><a href="#更新-Ubuntu-为-Tsinghua-源" class="headerlink" title="更新 Ubuntu 为 Tsinghua 源"></a>更新 Ubuntu 为 Tsinghua 源</h3><blockquote><p>来源： <a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">Tsinghua 源</a></p></blockquote><ol><li>备份原有源文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p>将 sources.list 备份一份为sources.list.bak</p><ol start="2"><li>将以下文件覆盖 <code>sources.list</code> 里面的内容</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line"><span class="string">deb</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</span> <span class="string">xenial</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</span> <span class="string">xenial-updates</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</span> <span class="string">xenial-backports</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</span> <span class="string">xenial-security</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><ol start="3"><li>更新源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="添加-ros-源"><a href="#添加-ros-源" class="headerlink" title="添加 ros 源"></a>添加 ros 源</h3><ol><li>添加 Tsinghua 的 ROS 源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置秘钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver <span class="string">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure><ol start="3"><li>更新源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="安装-ros"><a href="#安装-ros" class="headerlink" title="安装 ros"></a>安装 ros</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-kinetic-desktop-full</span><br></pre></td></tr></table></figure><h3 id="初始化-rosdep"><a href="#初始化-rosdep" class="headerlink" title="初始化 rosdep"></a>初始化 rosdep</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure><h3 id="添加环境配置"><a href="#添加环境配置" class="headerlink" title="添加环境配置"></a>添加环境配置</h3><p>如果使用 bash，则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>如果使用 zsh，则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/kinetic/setup.zsh&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="构建工厂依赖"><a href="#构建工厂依赖" class="headerlink" title="构建工厂依赖"></a>构建工厂依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Kinetic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib 常用整理</title>
      <link href="/2019/matplotlib-common-method.html"/>
      <url>/2019/matplotlib-common-method.html</url>
      
        <content type="html"><![CDATA[<h2 id="导入Matplotlib"><a href="#导入Matplotlib" class="headerlink" title="导入Matplotlib"></a>导入Matplotlib</h2><p>约定俗成的以 plt 为 Matplotlib 简称的导入方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>魔法配置，让表格显示在 jupyter 里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib notebook</span><br></pre></td></tr></table></figure><h2 id="中文字体支持配置"><a href="#中文字体支持配置" class="headerlink" title="中文字体支持配置"></a>中文字体支持配置</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><ol><li>打印所有系统字体</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sorted([f.name <span class="keyword">for</span> f <span class="keyword">in</span> mpl.font_manager.fontManager.ttflist]):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ol start="2"><li>找到一个可以显示中文的字体</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如我使用的 Songti SC</span></span><br><span class="line"><span class="comment"># 将其设置为当前字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=[<span class="string">&#x27;Songti SC&#x27;</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><ol><li>找到自定义字体文件夹</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font_dirs = [<span class="string">&#x27;/Users/askeynil/Desktop/学习/numpy/fonts&#x27;</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>将自定义字体文件夹导入到 Matplotlib 的字体库中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> font_manager</span><br><span class="line">font_dirs = [<span class="string">&#x27;/Users/askeynil/Desktop/学习/numpy/fonts&#x27;</span>]</span><br><span class="line">font_files = font_manager.findSystemFonts(fontpaths=font_dirs)</span><br><span class="line">font_list = font_manager.createFontList(font_files)</span><br><span class="line">font_manager.fontManager.ttflist.extend(font_list)</span><br></pre></td></tr></table></figure><ol start="3"><li>然后使用方式一找到导入的字体，然后设置为 family 即可。</li></ol><h2 id="绘制折线图"><a href="#绘制折线图" class="headerlink" title="绘制折线图"></a>绘制折线图</h2><ol><li>创建一个图形实例</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br></pre></td></tr></table></figure><ol start="2"><li>获取 y 值，x 值默认从 0 开始，依次累加 1</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><ol start="3"><li>设置 x，y 轴标签</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>) <span class="comment">#x轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>) <span class="comment">#y轴标签</span></span><br></pre></td></tr></table></figure><ol start="4"><li>绘制图形</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="指定绘制图形的大小"><a href="#指定绘制图形的大小" class="headerlink" title="指定绘制图形的大小"></a>指定绘制图形的大小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">4</span>), dpi=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>参数解释：</p><ol><li><p>figsize：图形尺寸，英寸为单位</p></li><li><p>dpi：每英寸的点数</p></li></ol><h2 id="绘制三角函数"><a href="#绘制三角函数" class="headerlink" title="绘制三角函数"></a>绘制三角函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导入 numpy</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 2. 获取 x 轴的值</span></span><br><span class="line">x = np.linspace(-np.pi, np.pi, <span class="number">100</span>) <span class="comment"># -pi 到 pi 中 100 个点</span></span><br><span class="line"><span class="comment"># 3. 获取 cos 函数的 y 值</span></span><br><span class="line">c = np.cos(x)</span><br><span class="line"><span class="comment"># 4. 获取 sin 函数的 y 值</span></span><br><span class="line">s = np.sin(x)</span><br><span class="line"><span class="comment"># 5. 获取绘图实例</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment"># 6. 绘制 cos 的图形</span></span><br><span class="line">plt.plot(x, c)</span><br><span class="line"><span class="comment"># 7. 绘制 sin 的图形</span></span><br><span class="line">plt.plot(x, s)</span><br><span class="line"><span class="comment"># 8. 显示图形</span></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><h3 id="指定线宽和颜色"><a href="#指定线宽和颜色" class="headerlink" title="指定线宽和颜色"></a>指定线宽和颜色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">plt.plot(x, c, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">2</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">&#x27;blue&#x27;</span>, linewidth=<span class="number">3</span>, linestyle=<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p>参数解释：</p><ol><li>color：线的颜色，可以是 RGB16 进制的数值，也可以是一些默认的预定义颜色字符串</li><li>linewidth：线宽</li><li>linestyle：线的形状<ul><li>‘-‘ 或 ‘solid’：实线</li><li>‘–’ 或 ‘dashed’：短划线</li><li>‘-.’ 或 ‘dashdot’：点虚线</li><li>‘:’ 或 ‘dotted’：虚线</li></ul></li></ol><h3 id="指定-x-和-y-轴的范围和标签的内容"><a href="#指定-x-和-y-轴的范围和标签的内容" class="headerlink" title="指定 x 和 y 轴的范围和标签的内容"></a>指定 x 和 y 轴的范围和标签的内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">plt.plot(x, c, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">-4</span>, <span class="number">4</span>)                <span class="comment"># 指定 x 轴的范围</span></span><br><span class="line">plt.ylim(<span class="number">-1.1</span>, <span class="number">1.1</span>)        <span class="comment"># 指定 y 轴的范围</span></span><br><span class="line"><span class="comment"># 设置 x 轴的标签内容</span></span><br><span class="line">plt.xticks(np.linspace(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">9</span>, endpoint=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 设置 y 轴的标签内容</span></span><br><span class="line">plt.yticks(np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">5</span>, endpoint=<span class="literal">True</span>))</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><h3 id="内联-LaTeX-表达式"><a href="#内联-LaTeX-表达式" class="headerlink" title="内联 LaTeX 表达式"></a>内联 LaTeX 表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">plt.plot(x, c, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">-4</span>, <span class="number">4</span>)                <span class="comment"># 指定 x 轴的范围</span></span><br><span class="line">plt.ylim(<span class="number">-1.1</span>, <span class="number">1.1</span>)        <span class="comment"># 指定 y 轴的范围</span></span><br><span class="line"><span class="comment"># 设置 x 轴的标签内容</span></span><br><span class="line">plt.xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi], [<span class="string">r&#x27;$-\pi$&#x27;</span>, <span class="string">r&#x27;$-\frac&#123;\pi&#125;&#123;2&#125;$&#x27;</span>, <span class="string">r&#x27;$0$&#x27;</span>,<span class="string">r&#x27;$\frac&#123;\pi&#125;&#123;2&#125;$&#x27;</span>, <span class="string">r&#x27;$\pi$&#x27;</span>])</span><br><span class="line"><span class="comment"># 字符串前面加 r 表示使用原始字符串，不转义。</span></span><br><span class="line"><span class="comment"># 设置 y 轴的标签内容</span></span><br><span class="line">plt.yticks(np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">5</span>, endpoint=<span class="literal">True</span>))</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><h3 id="修改坐标轴的位置"><a href="#修改坐标轴的位置" class="headerlink" title="修改坐标轴的位置"></a>修改坐标轴的位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">plt.plot(x, c, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">-4</span>, <span class="number">4</span>)                <span class="comment"># 指定 x 轴的范围</span></span><br><span class="line">plt.ylim(<span class="number">-1.1</span>, <span class="number">1.1</span>)        <span class="comment"># 指定 y 轴的范围</span></span><br><span class="line"><span class="comment"># 设置 x 轴的标签内容</span></span><br><span class="line">plt.xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi], [<span class="string">r&#x27;$-\pi$&#x27;</span>, <span class="string">r&#x27;$-\frac&#123;\pi&#125;&#123;2&#125;$&#x27;</span>, <span class="string">r&#x27;$0$&#x27;</span>,<span class="string">r&#x27;$\frac&#123;\pi&#125;&#123;2&#125;$&#x27;</span>, <span class="string">r&#x27;$\pi$&#x27;</span>])</span><br><span class="line"><span class="comment"># 字符串前面加 r 表示使用原始字符串，不转义。</span></span><br><span class="line"><span class="comment"># 设置 y 轴的标签内容</span></span><br><span class="line">plt.yticks(np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">5</span>, endpoint=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 获取当前的坐标轴 gca == get current axes</span></span><br><span class="line">axes = plt.gca()</span><br><span class="line"><span class="comment"># 设置右坐标轴颜色为 none 即隐藏右坐标轴</span></span><br><span class="line">axes.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置上坐标轴颜色为 none 即隐藏上坐标轴</span></span><br><span class="line">axes.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="comment"># 将左坐标轴移动到原点</span></span><br><span class="line">axes.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 将下坐标轴移动到原点</span></span><br><span class="line">axes.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><h3 id="添加函数描述"><a href="#添加函数描述" class="headerlink" title="添加函数描述"></a>添加函数描述</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">plt.plot(x, c, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;cos&#x27;</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;sin&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)  <span class="comment"># Add the legend</span></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p>参数解释：</p><ol><li>label：函数的描述</li><li>plt.legend：<ol><li>loc：位置<ol><li>‘best’：最好的</li><li>‘upper right’：右上</li><li>‘upper left’：左上</li><li>‘lower left’：左下</li><li>‘lower right’：右下</li><li>‘right’：右</li><li>‘center left’：中左</li><li>‘center right’：中右</li><li>‘lower center’：下中</li><li>‘upper center’：上中</li><li>‘center’：中心</li></ol></li></ol></li></ol><h3 id="添加关键点标注"><a href="#添加关键点标注" class="headerlink" title="添加关键点标注"></a>添加关键点标注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">plt.plot([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])  </span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.annotate(<span class="string">&#x27;转折点&#x27;</span>,</span><br><span class="line">             xy=(<span class="number">1</span>, <span class="number">3</span>),  xytext=(+<span class="number">10</span>, +<span class="number">30</span>),</span><br><span class="line">             textcoords=<span class="string">&#x27;offset points&#x27;</span>, fontsize=<span class="number">12</span>,</span><br><span class="line">             arrowprops=dict(arrowstyle=<span class="string">&quot;-&gt;&quot;</span>))</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><code>plt.annotate</code></p><p>参数解释：</p><ol><li>s：显示的文本</li><li>xy：标注点</li><li>xytext：放置文本的位置，默认为 xy</li><li>textcoords：文本点的描述</li><li>fontsize：字体大小</li><li>arrowprops：箭头参数，dict</li></ol><h2 id="绘制多图"><a href="#绘制多图" class="headerlink" title="绘制多图"></a>绘制多图</h2><ol><li>准备表格数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X = np.linspace(-np.pi, np.pi, <span class="number">15</span>)</span><br><span class="line">C = np.cos(X)</span><br><span class="line">S = np.sin(X)</span><br></pre></td></tr></table></figure><ol start="2"><li>绘制两个表格</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(X, C)</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(X, S)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ol start="3"><li>设置网格</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">4</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(X, C)</span><br><span class="line">plt.grid(<span class="literal">False</span>)</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(X, S)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>参数解释：</p><ol><li><p><code>subplot(nrows, ncols, index, **kwargs)</code></p><ol><li>nrows：行数</li><li>ncols：列数</li><li>index：索引</li><li>kwargs：可选参数</li></ol></li><li><p><code>subplot(pos, **kwargs)</code></p><ol><li>pos：100 &lt;= pos &lt;= 999<ol><li>第一个数字代表行</li><li>第二个数字代表列</li><li>第三个数字代表索引</li></ol></li></ol></li><li><p><code>subplot(ax)</code></p><ol><li>ax：axes，之前 subplot 返回的值，在同一图内，再次绘制。</li></ol></li><li><p><code>grid()</code></p><ul><li>表格的配置信息</li></ul></li></ol><h2 id="格子布局"><a href="#格子布局" class="headerlink" title="格子布局"></a>格子布局</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入布局头文件</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment"># 创建布局管理器</span></span><br><span class="line">gs = gridspec.GridSpec(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 绘制在 第 0 行所有列</span></span><br><span class="line">ax1 = plt.subplot(gs[<span class="number">0</span>, :])</span><br><span class="line">plt.plot(X, C)</span><br><span class="line"><span class="comment"># 绘制在第 1 行前两列 </span></span><br><span class="line">ax2 = plt.subplot(gs[<span class="number">1</span>, :<span class="number">-1</span>])</span><br><span class="line">plt.plot(X, S)</span><br><span class="line"><span class="comment"># 绘制在最后一行，第 0 列</span></span><br><span class="line">ax3 = plt.subplot(gs[<span class="number">-1</span>, <span class="number">0</span>])</span><br><span class="line">plt.plot(X, -C)</span><br><span class="line"><span class="comment"># 绘制在最后一行，第 1 列</span></span><br><span class="line">ax4 = plt.subplot(gs[<span class="number">-1</span>, <span class="number">-2</span>])</span><br><span class="line">plt.plot(X, -S)</span><br><span class="line"><span class="comment"># 绘制在第 1，2 行，最后一列</span></span><br><span class="line">ax5 = plt.subplot(gs[<span class="number">1</span>:, <span class="number">-1</span>])</span><br><span class="line">plt.plot(X, (C+S)/<span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SymPy 常用整理</title>
      <link href="/2019/ee3e502e.html"/>
      <url>/2019/ee3e502e.html</url>
      
        <content type="html"><![CDATA[<p><strong>SymPy</strong>是一个符号计算的Python库。它的目标是成为一个全功能的计算机代数系统，同时保持代码简洁、易于理解和扩展。它完全由Python写成，不依赖于外部库。</p><blockquote><p>以下使用导入并开启漂亮的打印</p><p>import sympy</p><p>sympy.init_printing(pretty_print=True)</p></blockquote><h2 id="有理数-Rationals"><a href="#有理数-Rationals" class="headerlink" title="有理数 Rationals"></a>有理数 Rationals</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.Rational(<span class="number">1</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>out： $\frac{1}{3}$</p><h3 id="特殊的无理数"><a href="#特殊的无理数" class="headerlink" title="特殊的无理数"></a>特殊的无理数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.pi, sympy.E, sympy.oo</span><br></pre></td></tr></table></figure><p>out：$\displaystyle \left( \pi, \  e, \  \infty\right)$</p><a id="more"></a><h2 id="代数运算"><a href="#代数运算" class="headerlink" title="代数运算"></a>代数运算</h2><h3 id="声明一个代数符号"><a href="#声明一个代数符号" class="headerlink" title="声明一个代数符号"></a>声明一个代数符号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = sympy.Symbol(<span class="string">&#x27;x&#x27;</span>) <span class="comment"># 注意，声明一个代数的时候 S 为大写</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure><p>out: $𝑥$    </p><h3 id="声明多个代数符号"><a href="#声明多个代数符号" class="headerlink" title="声明多个代数符号"></a>声明多个代数符号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y = sympy.symbols(<span class="string">&#x27;x y&#x27;</span>)</span><br><span class="line">x, y</span><br></pre></td></tr></table></figure><p>out: $\displaystyle \left( x, \  y\right)$</p><h3 id="声明带下标的代数符号"><a href="#声明带下标的代数符号" class="headerlink" title="声明带下标的代数符号"></a>声明带下标的代数符号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1, x2 = sympy.symbols(<span class="string">&#x27;x1 x2&#x27;</span>)</span><br><span class="line">x1, x2</span><br></pre></td></tr></table></figure><p>out：$\displaystyle \left( x_{1}, \  x_{2}\right)$</p><h3 id="简单的代数运算"><a href="#简单的代数运算" class="headerlink" title="简单的代数运算"></a>简单的代数运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ** <span class="number">2</span> + <span class="number">2</span> * x + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>out：$\displaystyle x^{2} + 2 x + 1$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1 + x2 ** <span class="number">2</span> - x2 + x1 /<span class="number">2</span></span><br></pre></td></tr></table></figure><p>out：$\displaystyle \frac{3 x_{1}}{2} + x_{2}^{2} - x_{2}$</p><h2 id="展开和分解"><a href="#展开和分解" class="headerlink" title="展开和分解"></a>展开和分解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y = sympy.symbols(<span class="string">&#x27;x y&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="展开多项式"><a href="#展开多项式" class="headerlink" title="展开多项式"></a>展开多项式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.expand((x + y) ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>out：$\displaystyle x^{2} + 2 x y + y^{2}$</p><h3 id="展开三角函数"><a href="#展开三角函数" class="headerlink" title="展开三角函数"></a>展开三角函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.expand(sympy.sin(x + y), trig=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>out：$\displaystyle \sin{\left(x \right)} \cos{\left(y \right)} + \sin{\left(y \right)} \cos{\left(x \right)}$</p><h3 id="化简"><a href="#化简" class="headerlink" title="化简"></a>化简</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.simplify((x + x*y) / x)</span><br></pre></td></tr></table></figure><p>out：$\displaystyle y + 1$</p><h2 id="求和运算Sum"><a href="#求和运算Sum" class="headerlink" title="求和运算Sum"></a>求和运算Sum</h2><p>$$<br>\frac{1}{1^2+2\cdot 1} + \frac{1}{2^2+2\cdot 2} + \cdots + \frac{1}{10^2+2\cdot 10}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr = sympy.Sum(<span class="number">1</span>/(x**<span class="number">2</span> + <span class="number">2</span>*x), (x, <span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">expr.doit()</span><br></pre></td></tr></table></figure><p>expr：$\displaystyle \sum_{x=1}^{10} \frac{1}{x^{2} + 2 x}$ out： $\displaystyle \frac{175}{264}$</p><h2 id="乘积运算-Product"><a href="#乘积运算-Product" class="headerlink" title="乘积运算 Product"></a>乘积运算 Product</h2><p>$$<br>\frac{1}{1^2+2\cdot 1} \times \frac{1}{2^2+2\cdot 2} \times \cdots \times \frac{1}{10^2+2\cdot 10}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr &#x3D; sympy.Product(1&#x2F;(x**2 + 2*x), (x, 1, 10))</span><br><span class="line">expr.doit()</span><br></pre></td></tr></table></figure><p>expr：$\displaystyle \prod_{x=1}^{10} \frac{1}{x^{2} + 2 x}$ out：$\displaystyle \frac{1}{869100503040000}$</p><h3 id="极限计算"><a href="#极限计算" class="headerlink" title="极限计算"></a>极限计算</h3><p>$$<br>\lim_{x \rightarrow 0}\frac{\sin x}{x}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.limit(sympy.sin(x)/x, x, <span class="number">0</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>$$<br>\lim_{x \rightarrow \infty} x<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.limit(x, x, sympy.oo)             <span class="comment"># ∞</span></span><br></pre></td></tr></table></figure><p>$$<br>\lim_{x \rightarrow \infty} \frac{1}{x}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.limit(<span class="number">1</span>/x, x, sympy.oo)         <span class="comment"># ∞</span></span><br></pre></td></tr></table></figure><h3 id="左极限和右极限"><a href="#左极限和右极限" class="headerlink" title="左极限和右极限"></a>左极限和右极限</h3><p>$$<br>\lim_{x \rightarrow 0^{-}} \frac{1}{x}，\lim_{x \rightarrow 0^{+}} \frac{1}{x}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sympy.limit(<span class="number">1</span>/x, x, <span class="number">0</span>, dir=<span class="string">&#x27;+&#x27;</span>)        <span class="comment"># ∞</span></span><br><span class="line">sympy.limit(<span class="number">1</span>/x, x, <span class="number">0</span>, dir=<span class="string">&#x27;-&#x27;</span>)        <span class="comment"># −∞</span></span><br></pre></td></tr></table></figure><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.diff(x**<span class="number">2</span>, x)</span><br></pre></td></tr></table></figure><p>out：$\displaystyle 2 x$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.diff(sympy.sin(<span class="number">2</span>*x), x)</span><br></pre></td></tr></table></figure><p>out：$\displaystyle 2 \cos{\left(2 x \right)}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.diff(sympy.sin(x**<span class="number">2</span>+<span class="number">2</span>*x), x)</span><br></pre></td></tr></table></figure><p>out：$\displaystyle \left(2 x + 2\right) \cos{\left(x^{2} + 2 x \right)}$</p><h3 id="多阶导数"><a href="#多阶导数" class="headerlink" title="多阶导数"></a>多阶导数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.diff(x**<span class="number">2</span>, x, <span class="number">2</span>) <span class="comment"># 2(x**2对 x 求二阶导数)</span></span><br></pre></td></tr></table></figure><h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h2><h3 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h3><p>$$<br>\int_{ -\infty }^{ \infty } 6x^5<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.integrate(<span class="number">6</span> * x**<span class="number">5</span>, x)</span><br></pre></td></tr></table></figure><p>out：$x^6$</p><h3 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h3><p>$$<br>\int_{0}^{\frac{\pi}{2}} \sin x<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.integrate(sympy.sin(x), (x, <span class="number">0</span>, sympy.pi/<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>out：1</p><h2 id="解方程"><a href="#解方程" class="headerlink" title="解方程"></a>解方程</h2><h3 id="解一元方程"><a href="#解一元方程" class="headerlink" title="解一元方程"></a>解一元方程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.solve(x**<span class="number">2</span><span class="number">-3</span>*x+<span class="number">2</span>, x)</span><br></pre></td></tr></table></figure><p>out：$\displaystyle \left[ 1, \  2\right]$</p><h3 id="解二元方程"><a href="#解二元方程" class="headerlink" title="解二元方程"></a>解二元方程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.solve([x+<span class="number">5</span>*y<span class="number">-2</span>, <span class="number">-3</span>*x+<span class="number">6</span>*y<span class="number">-15</span>], [x, y])</span><br></pre></td></tr></table></figure><p>out：$\displaystyle \left{ x : -3, \  y : 1\right}$</p><h3 id="代数运算-1"><a href="#代数运算-1" class="headerlink" title="代数运算"></a>代数运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr = x**<span class="number">2</span> + <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">expr</span><br></pre></td></tr></table></figure><p>out：$\displaystyle x^{2} + 2 x + 1$</p><ol><li>令 x = 2</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr.subs(x, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>out：9</p><ol start="2"><li>令 x = y + 1</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr.subs(x, y+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>out：$\displaystyle 2 y + \left(y + 1\right)^{2} + 3$</p><h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = sympy.Symbol(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">a = sympy.factorial(n)</span><br><span class="line">a.subs(n, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>out：120</p><h3 id="多元函数的代数"><a href="#多元函数的代数" class="headerlink" title="多元函数的代数"></a>多元函数的代数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr = x ** <span class="number">3</span> + <span class="number">4</span> * x * y - z</span><br><span class="line">expr</span><br></pre></td></tr></table></figure><p>out：$\displaystyle x^{3} + 4 x y - z$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr.subs([(x, <span class="number">2</span>), (y, <span class="number">4</span>), (z, <span class="number">0</span>)])</span><br></pre></td></tr></table></figure><p>out：40</p><h3 id="字符串转-SymPy-表达式"><a href="#字符串转-SymPy-表达式" class="headerlink" title="字符串转 SymPy 表达式"></a>字符串转 SymPy 表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str_expr = <span class="string">&quot;x**2 + 3*x - 1/2&quot;</span></span><br><span class="line">expr = sympy.sympify(str_expr)</span><br><span class="line">expr</span><br></pre></td></tr></table></figure><p>out：$\displaystyle x^{2} + 3 x - \frac{1}{2}$</p><h2 id="概率论问题"><a href="#概率论问题" class="headerlink" title="概率论问题"></a>概率论问题</h2><p>导入框架<code>import sympy.stats</code></p><h3 id="骰子问题"><a href="#骰子问题" class="headerlink" title="骰子问题"></a>骰子问题</h3><ol><li>创建一个有 6 个面的骰子</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = sympy.stats.Die(<span class="string">&#x27;x&#x27;</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>查看每个面出现的概率</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.stats.density(x).dict</span><br></pre></td></tr></table></figure><p>out：$\displaystyle \left{ 1 : \frac{1}{6}, \  2 : \frac{1}{6}, \  3 : \frac{1}{6}, \  4 : \frac{1}{6}, \  5 : \frac{1}{6}, \  6 : \frac{1}{6}\right}$</p><ol start="3"><li>随机丢一个骰子</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.stats.sample(x)        <span class="comment"># out: 5</span></span><br></pre></td></tr></table></figure><ol start="4"><li>丢出骰子大于 3 的概率</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.stats.P(x &gt; <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="硬币问题"><a href="#硬币问题" class="headerlink" title="硬币问题"></a>硬币问题</h3><ol><li>创建一个硬币</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = sympy.stats.Coin(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>查看每个面出现的概率</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sympy.stats.density(c).dict</span><br></pre></td></tr></table></figure><p>out：$\displaystyle \left{ H : \frac{1}{2}, \  T : \frac{1}{2}\right}$</p><p>与创建两个面的骰子类似</p><h3 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h3><ol><li>创建一个标准正态分布</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z = sympy.stats.Normal(<span class="string">&#x27;z&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>标准正态分布中数据大于 1 的概率</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sympy.stats.P(z &gt; <span class="number">1</span>).evalf()</span><br><span class="line"><span class="comment"># out: 0.158655253931457</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SymPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NumPy 常用整理</title>
      <link href="/2019/a62eab8c.html"/>
      <url>/2019/a62eab8c.html</url>
      
        <content type="html"><![CDATA[<h2 id="导入-numpy"><a href="#导入-numpy" class="headerlink" title="导入 numpy"></a>导入 numpy</h2><p>约定俗成的以 np为numpy简称的导入方式</p><p><code>import numpy as np</code></p><h2 id="numpy-array"><a href="#numpy-array" class="headerlink" title="numpy.array"></a>numpy.array</h2><blockquote><p> 创建一个数组</p></blockquote><ul><li>参数:<ol><li>object：类数组</li><li>dtype：数据类型（data-type），默认为 None</li><li>copy：是否拷贝，默认为 True</li><li>order：内存布局（’K’，’A’，’C’，’F’），默认为 ‘K’</li><li>subok：传递子类还是基类，默认为 False，即传递基类</li><li>ndmin：最小维度，默认为 0</li></ol></li><li>返回值：<ul><li>out：ndarray</li></ul></li></ul><a id="more"></a><h3 id="一些简单的🌰"><a href="#一些简单的🌰" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>创建一个简单一维数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment"># array([1, 2, 3])</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个简单二维数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">          [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="comment"># array([[1, 2],</span></span><br><span class="line"><span class="comment">#        [3, 4]])</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建一个最小维度为 2 的数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], ndmin=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># array([[1, 2, 3]])</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用矩阵创建数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.array(np.mat(<span class="string">&#x27;1 2; 3 4&#x27;</span>))</span><br><span class="line"><span class="comment"># array([[1, 2],</span></span><br><span class="line"><span class="comment">#        [3, 4]])</span></span><br></pre></td></tr></table></figure><ol start="5"><li>使用 array 返回子类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.array(np.mat(<span class="string">&#x27;1 2; 3 4&#x27;</span>), subok=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># matrix([[1, 2],</span></span><br><span class="line"><span class="comment">#         [3, 4]])</span></span><br></pre></td></tr></table></figure><h3 id="ndarray-的一些常用属性"><a href="#ndarray-的一些常用属性" class="headerlink" title="ndarray 的一些常用属性"></a>ndarray 的一些常用属性</h3><table><thead><tr><th>属性</th><th align="left">解释</th></tr></thead><tbody><tr><td>ndim</td><td align="left">秩，即维度的数量</td></tr><tr><td>shape</td><td align="left">数组的形状，即数组的维度</td></tr><tr><td>size</td><td align="left">数组元素的总个数</td></tr><tr><td>dtype</td><td align="left">其内元素类型</td></tr><tr><td>itemsize</td><td align="left">每个元素的大小</td></tr><tr><td>T</td><td align="left">转置</td></tr><tr><td>flat</td><td align="left">数组的一维迭代器</td></tr></tbody></table><h3 id="ndarray-的一些常用方法"><a href="#ndarray-的一些常用方法" class="headerlink" title="ndarray 的一些常用方法"></a>ndarray 的一些常用方法</h3><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>astype()</td><td>将类型转化为指定类型</td></tr><tr><td>ravel()</td><td>将数组展开成一维数组</td></tr><tr><td>sum()</td><td>数组元素求和</td></tr><tr><td>all()</td><td>是不是都为 True</td></tr><tr><td>any()</td><td>是不是存在 True</td></tr><tr><td>argmax()</td><td>最大值的索引</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>argmin()</td><td>最小值的索引</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>argsort()</td><td>排序的索引</td></tr><tr><td>sort()</td><td>排序</td></tr><tr><td>dot()</td><td>矩阵相乘</td></tr><tr><td>fill()</td><td>填充数据</td></tr><tr><td>mean()</td><td>平均值</td></tr><tr><td>reshape()</td><td>更改形状</td></tr><tr><td>std()</td><td>标准差</td></tr><tr><td>var()</td><td>方差</td></tr><tr><td>nonzero()</td><td>获取非零元素的索引</td></tr><tr><td>put()</td><td>用给定的值替换数组的指定元素</td></tr><tr><td>transpose()</td><td>转置，等同于 T</td></tr><tr><td>flatten()</td><td>返回一份拷贝数组</td></tr><tr><td>ptp()</td><td>最大值与最小值的差</td></tr><tr><td>average()</td><td>加权平均值</td></tr></tbody></table><h3 id="数组的运算"><a href="#数组的运算" class="headerlink" title="数组的运算"></a>数组的运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组的四则运算</span></span><br><span class="line"><span class="comment"># 1. shape 相同，对应元素的四则运算</span></span><br><span class="line"><span class="comment"># 2. shape 不同，使用广播机制，然后按 shape 相同的规则计算</span></span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line">np.eye(<span class="number">2</span>) + np.eye(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line">np.eye(<span class="number">2</span>) - np.eye(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line">np.eye(<span class="number">2</span>) * np.eye(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">np.eye(<span class="number">2</span>) / np.eye(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 矩阵相乘</span></span><br><span class="line">np.eye(<span class="number">2</span>) @ np.eye(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 指数运算 2次方</span></span><br><span class="line">np.eye(<span class="number">2</span>) ** <span class="number">2</span> </span><br><span class="line"><span class="comment"># 取余运算</span></span><br><span class="line">np.eye(<span class="number">2</span>) % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个二维数组</span></span><br><span class="line">a = np.eye(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 和</span></span><br><span class="line">a.sum()</span><br><span class="line"><span class="comment"># 平均数</span></span><br><span class="line">a.mean()</span><br><span class="line"><span class="comment"># 加权平均值</span></span><br><span class="line">a.average()</span><br><span class="line"><span class="comment"># 最大值</span></span><br><span class="line">a.max()</span><br><span class="line"><span class="comment"># 最小值</span></span><br><span class="line">a.min()</span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">np.median(a)</span><br><span class="line"><span class="comment"># 最大值与最小值的差</span></span><br><span class="line">a.ptp()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方差</span></span><br><span class="line">a.var()</span><br><span class="line"><span class="comment"># 标准差</span></span><br><span class="line">a.std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三角函数</span></span><br><span class="line"><span class="comment"># sin</span></span><br><span class="line">np.sin(a)</span><br><span class="line"><span class="comment"># cos</span></span><br><span class="line">np.cos(a)</span><br><span class="line"><span class="comment"># tan</span></span><br><span class="line">np.tan(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向下取整</span></span><br><span class="line">np.floor(a)</span><br><span class="line"><span class="comment"># 进一取整</span></span><br><span class="line">np.ceil(a)</span><br></pre></td></tr></table></figure><h2 id="numpy-arange"><a href="#numpy-arange" class="headerlink" title="numpy.arange"></a>numpy.arange</h2><blockquote><p>返回给定间隔内均匀间隔的数组</p></blockquote><ul><li><p>参数</p><ol><li>start：开始值，默认为 0</li><li>stop：结束值</li><li>step：步长，默认为 1</li><li>dtype：数据类型，默认为 None</li></ol></li><li><p>返回值</p><ul><li>out：ndarray</li></ul></li></ul><h3 id="一些简单的🌰-1"><a href="#一些简单的🌰-1" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>创建 0-2 的数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># array([0, 1, 2])</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个 2-7 的数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">2</span>, <span class="number">7</span>)</span><br><span class="line"><span class="comment"># array([2, 3, 4, 5, 6])</span></span><br></pre></td></tr></table></figure><h2 id="numpy-linspace"><a href="#numpy-linspace" class="headerlink" title="numpy.linspace"></a>numpy.linspace</h2><blockquote><p>Return evenly spaced numbers over a specified interval.</p><p>返回指定间隔内的等间隔数字</p></blockquote><ul><li>参数<ol><li>start：开始值</li><li>stop：结束值</li><li>num：数量，默认为 50</li><li>endpoint：是否包含stop 这个数字，默认为 True</li><li>retstep：是否返回间隔数字之间的间隔，默认 False</li><li>dtype：数据类型，默认为 None</li><li>axis：按哪个轴获取。默认为 0</li></ol></li><li>返回值：<ul><li>samples：ndarray</li><li>step：步长，只有当 retstep 为True 时才有该值。</li></ul></li></ul><h3 id="一些简单的🌰-2"><a href="#一些简单的🌰-2" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>创建一个 2.0 到 3.0 之间的 5 个等间距数字数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">2.0</span>, <span class="number">3.0</span>, num=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># array([2.  , 2.25, 2.5 , 2.75, 3.  ])</span></span><br></pre></td></tr></table></figure><ol start="2"><li>上面的例子中，创建不包含结束值的数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">2.0</span>, <span class="number">3.0</span>, num=<span class="number">5</span>, endpoint=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># array([2. , 2.2, 2.4, 2.6, 2.8])</span></span><br></pre></td></tr></table></figure><ol start="3"><li>第一个例子，返回步长</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">2.0</span>, <span class="number">3.0</span>, num=<span class="number">5</span>, retstep=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># (array([2.  , 2.25, 2.5 , 2.75, 3.  ]), 0.25)</span></span><br></pre></td></tr></table></figure><h2 id="numpy-ones-numpy-zeros-numpy-empty"><a href="#numpy-ones-numpy-zeros-numpy-empty" class="headerlink" title="numpy.ones, numpy.zeros, numpy.empty"></a>numpy.ones, numpy.zeros, numpy.empty</h2><blockquote><p>ones：按照形状创建一个元素全为 1 的数组</p><p>zeros：按照形状创建一个元素全为 0 的数组</p><p>empty：按照形状创建一个元素全部无意义的数组</p></blockquote><ul><li>参数：<ol><li>shape：形状</li><li>dtype：数据类型，默认为 None</li><li>order：内存布局（’C’, ‘F’），默认为 C</li></ol></li><li>返回值<ul><li>out：ndarray</li></ul></li></ul><h3 id="一些简单的🌰-3"><a href="#一些简单的🌰-3" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>创建一个形状为 2 的数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.ones(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># array([1., 1.])</span></span><br><span class="line">np.zeros(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># array([0., 0.])</span></span><br><span class="line">np.empty(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># array([0., 0.]) 未初始化的值，无意义</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个形状为 (2, 2) 数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">np.ones((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># array([[1., 1.],</span></span><br><span class="line"><span class="comment">#        [1., 1.]])</span></span><br><span class="line">np.zeros((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># array([[0., 0.],</span></span><br><span class="line"><span class="comment">#        [0., 0.]])</span></span><br><span class="line">np.empty((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># array([[0.25, 0.5 ],</span></span><br><span class="line"><span class="comment">#        [0.75, 1.  ]]) 未初始化的值，无意义</span></span><br></pre></td></tr></table></figure><h2 id="numpy-eye（任意对角线为-1-的数组）"><a href="#numpy-eye（任意对角线为-1-的数组）" class="headerlink" title="numpy.eye（任意对角线为 1 的数组）"></a>numpy.eye（任意对角线为 1 的数组）</h2><blockquote><p>Return a 2-D array with ones on the diagonal and zeros elsewhere.</p><p>返回一个二维数组，对角线为 1，其他都为 0</p></blockquote><ul><li>参数：<ol><li>N：行数</li><li>M：列数，默认等于行</li><li>k：对角线索引，默认为 0，即主对角线，正数往右上平移，负数往左下平移。</li><li>dtype：数据类型</li><li>order：内存布局 （’C’, ‘F’），默认为 C</li></ol></li><li>返回值<ul><li>I：ndarray of shape (N, M)</li></ul></li></ul><h3 id="一些简单的🌰-4"><a href="#一些简单的🌰-4" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>创建一个 2 行 2 列的主对角线为 1 的数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.eye(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># array([[1., 0.],</span></span><br><span class="line"><span class="comment">#        [0., 1.]])</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个3 行 3 列，第 k=1 条对角线为 1 的数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.eye(<span class="number">3</span>, k=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># array([[0., 1., 0.],</span></span><br><span class="line"><span class="comment">#        [0., 0., 1.],</span></span><br><span class="line"><span class="comment">#        [0., 0., 0.]])</span></span><br></pre></td></tr></table></figure><h3 id="numpy-identity（单位数组）"><a href="#numpy-identity（单位数组）" class="headerlink" title="numpy.identity（单位数组）"></a>numpy.identity（单位数组）</h3><blockquote><p>返回单位数组，即主对角线为 1</p><p>该方法等同于 numpy.eye(n, M=n, k=0)</p></blockquote><ul><li>参数：<ol><li>n：行列数</li><li>dtype：数据类型，默认为 None</li></ol></li><li>返回值：<ul><li>out：ndarray</li></ul></li></ul><ol><li>创建一个 2 行 2 列的主对角线为 1 的数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.identity(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># array([[1., 0.],</span></span><br><span class="line"><span class="comment">#        [0., 1.]])</span></span><br></pre></td></tr></table></figure><h2 id="行向量与列向量"><a href="#行向量与列向量" class="headerlink" title="行向量与列向量"></a>行向量与列向量</h2><p>numpy 中一维数组的行向量和列向量没有什么区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">3</span>)</span><br><span class="line">a     <span class="comment"># array([0, 1, 2])</span></span><br><span class="line">a.T <span class="comment"># array([0, 1, 2])</span></span><br></pre></td></tr></table></figure><p>二维的行列向量才有差别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line">a        <span class="comment"># array([[1, 2, 3]])</span></span><br><span class="line">a.T </span><br><span class="line"><span class="comment"># array([[1],</span></span><br><span class="line"><span class="comment">#        [2],</span></span><br><span class="line"><span class="comment">#        [3]])</span></span><br></pre></td></tr></table></figure><p>一维行向量变成二维列向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">3</span>)</span><br><span class="line">a     <span class="comment"># array([0, 1, 2])</span></span><br><span class="line">a.reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># array([[0],</span></span><br><span class="line"><span class="comment">#        [1],</span></span><br><span class="line"><span class="comment">#        [2]])</span></span><br></pre></td></tr></table></figure><p>使用特殊方法创建行列向量</p><ol><li>创建行向量</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.r_[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="comment"># array([1, 2, 3, 4])</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建列向量</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.c_[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="comment"># array([[1],</span></span><br><span class="line"><span class="comment">#        [2],</span></span><br><span class="line"><span class="comment">#        [3]])</span></span><br></pre></td></tr></table></figure><h2 id="数组的切片和索引"><a href="#数组的切片和索引" class="headerlink" title="数组的切片和索引"></a>数组的切片和索引</h2><h3 id="一维数组的切片和索引"><a href="#一维数组的切片和索引" class="headerlink" title="一维数组的切片和索引"></a>一维数组的切片和索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>问</th><th>答</th><th>问</th><th>答</th></tr></thead><tbody><tr><td>索引1</td><td>a[1]</td><td>取[2, 5)</td><td>a[2:5]</td></tr><tr><td>步长 2</td><td>a[::2]</td><td>倒序</td><td>a[::-1]</td></tr></tbody></table><h3 id="二维数组的切片和索引"><a href="#二维数组的切片和索引" class="headerlink" title="二维数组的切片和索引"></a>二维数组的切片和索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/numpy_normal1.png" alt="2d_indexing"></p><table><thead><tr><th>问</th><th>答</th><th>问</th><th>答</th></tr></thead><tbody><tr><td>第一行</td><td>a[1]</td><td>第一列</td><td>a[…,1]或a[:,1]</td></tr><tr><td>取(1, 1)的元素</td><td>a[1, 1]</td><td>紫色区域</td><td>a[…:1]</td></tr><tr><td>红色区域</td><td>a[1, 2:4]</td><td>绿色区域</td><td>a[-2:,-2:]</td></tr><tr><td>黄色区域</td><td>a[::2, 2::2]</td><td>黄色区域</td><td>a[::2, [2, 4]]</td></tr></tbody></table><p><img src="/img/numpy_normal2.png" alt="2d_fancy_indexing"></p><table><thead><tr><th>问</th><th>答</th><th>问</th><th>答</th></tr></thead><tbody><tr><td>红色区域</td><td>a[[0, 2, 4],[0, 2, 4]]</td><td>绿色区域</td><td>a[[1, 3 ,4], 3:]</td></tr><tr><td>黄色区域</td><td>a[2::3, [0, 2, 3]]</td><td>紫色区域</td><td>a[1,1:4]</td></tr></tbody></table><p>还有掩码切割的方式</p><ol><li>黄色区域</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mask = np.array([<span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>])</span><br><span class="line">a[<span class="number">1</span>::<span class="number">3</span>, mask]</span><br></pre></td></tr></table></figure><ol start="2"><li>紫色区域</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mask = np.array([<span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>])</span><br><span class="line">a[<span class="number">1</span>, mask]</span><br></pre></td></tr></table></figure><h3 id="数组拆分"><a href="#数组拆分" class="headerlink" title="数组拆分"></a>数组拆分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><ol><li>按行拆分</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.vsplit(a, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># [array([[0, 1, 2]]), array([[3, 4, 5]]), array([[6, 7, 8]])]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>按列拆分</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">np.hsplit(a, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># [array([[0],</span></span><br><span class="line"><span class="comment">#         [3],</span></span><br><span class="line"><span class="comment">#         [6]]), array([[1],</span></span><br><span class="line"><span class="comment">#         [4],</span></span><br><span class="line"><span class="comment">#         [7]]), array([[2],</span></span><br><span class="line"><span class="comment">#         [5],</span></span><br><span class="line"><span class="comment">#         [8]])]</span></span><br></pre></td></tr></table></figure><h3 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">b = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ol><li>竖直合并</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">np.vstack([a,b])</span><br><span class="line"><span class="comment"># array([[0, 1],</span></span><br><span class="line"><span class="comment">#        [2, 3],</span></span><br><span class="line"><span class="comment">#        [0, 1],</span></span><br><span class="line"><span class="comment">#        [2, 3]])</span></span><br></pre></td></tr></table></figure><ol start="2"><li>水平合并</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.hstack([a,b])</span><br><span class="line"><span class="comment"># array([[0, 1, 0, 1],</span></span><br><span class="line"><span class="comment">#        [2, 3, 2, 3]])</span></span><br></pre></td></tr></table></figure><h2 id="numpy的广播机制"><a href="#numpy的广播机制" class="headerlink" title="numpy的广播机制"></a>numpy的广播机制</h2><p>以下内容来自<a href="https://www.runoob.com/numpy/numpy-broadcast.html">菜鸟教程</a></p><p><strong>广播的规则:</strong></p><ul><li>让所有输入数组都向其中形状最长的数组看齐，形状中不足的部分都通过在前面加 1 补齐。</li><li>输出数组的形状是输入数组形状的各个维度上的最大值。</li><li>如果输入数组的某个维度和输出数组的对应维度的长度相同或者其长度为 1 时，这个数组能够用来计算，否则出错。</li><li>当输入数组的某个维度的长度为 1 时，沿着此维度运算时都用此维度上的第一组值。</li></ul><p><strong>简单理解：</strong>对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足：</p><ul><li>数组拥有相同形状。</li><li>当前维度的值相等。</li><li>当前维度的值有一个是 1。</li></ul><p>若条件不满足，抛出 <strong>“ValueError: frames are not aligned”</strong> 异常。</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NumPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy.random</title>
      <link href="/2019/6a1d78d1.html"/>
      <url>/2019/6a1d78d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="randint（随机整数）"><a href="#randint（随机整数）" class="headerlink" title="randint（随机整数）"></a>randint（随机整数）</h2><blockquote><p>Return random integers from <em>low</em> (inclusive) to <em>high</em> (exclusive).</p><p>从区间 [low, high) 中返回随机的整数数组</p></blockquote><ul><li>参数<ol><li>low：最小值</li><li>high：最大值，默认为 None</li><li>size：个数，默认为None</li><li>dtype：数据类型，默认为’l’</li></ol></li><li>返回值<ul><li>out：整型或者整型数组</li></ul></li></ul><h3 id="一些简单的🌰"><a href="#一些简单的🌰" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>0 到 50 中随机一个数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 26</span></span><br></pre></td></tr></table></figure><ol start="2"><li>10 到 50 中随机一个数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 36</span></span><br></pre></td></tr></table></figure><ol start="3"><li>0 到 50 中随机 10 个数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">50</span>, size=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># array([10, 25, 37, 34, 13, 15, 16, 12, 44,  4])</span></span><br></pre></td></tr></table></figure><ol start="4"><li>10 到 50 中随机 10 个数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">10</span>, <span class="number">50</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># array([40, 46, 27, 44, 30, 46, 15, 41, 18, 23])</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="random-random-sample（随机-0-1-的浮点数）"><a href="#random-random-sample（随机-0-1-的浮点数）" class="headerlink" title="random/random_sample（随机 0-1 的浮点数）"></a>random/random_sample（随机 0-1 的浮点数）</h2><blockquote><p>Return random floats in the half-open interval [0.0, 1.0).</p><p>返回一个在 0-1 之间的随机的浮点数的数组</p></blockquote><ul><li>参数<ol><li>size：大小，默认为 None</li></ol></li><li>返回值<ul><li>out：浮点数或浮点数数组</li></ul></li></ul><h3 id="一些简单的🌰-1"><a href="#一些简单的🌰-1" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>随机返回一个浮点数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.random()     <span class="comment"># 0.939393746883071</span></span><br></pre></td></tr></table></figure><ol start="2"><li>随机返回有一个浮点数的数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.random(<span class="number">1</span>)    <span class="comment"># array([0.70345759])</span></span><br></pre></td></tr></table></figure><ol start="3"><li>随机返回 10 个浮点数的数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.random(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># array([0.84469124, 0.16361142, 0.59353651, 0.80872106, 0.15086249,</span></span><br><span class="line"><span class="comment">#        0.4595056 , 0.5550403 , 0.59146936, 0.07822706, 0.99842643])</span></span><br></pre></td></tr></table></figure><h2 id="rand（随机-0-1-给定形状的浮点数）"><a href="#rand（随机-0-1-给定形状的浮点数）" class="headerlink" title="rand（随机 0-1 给定形状的浮点数）"></a>rand（随机 0-1 给定形状的浮点数）</h2><blockquote><p>Random values in a given shape.</p><p>按照给定的形状返回数据（值为[0, 1) ）</p></blockquote><ul><li>参数<ul><li>d0, d1, …, dn：形状信息，默认为 None，即可以不传数据</li></ul></li><li>返回值<ul><li>out：ndarray</li></ul></li></ul><h3 id="一些简单的🌰-2"><a href="#一些简单的🌰-2" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>不传数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.rand()</span><br><span class="line"><span class="comment"># 0.4506933261729883</span></span><br></pre></td></tr></table></figure><ol start="2"><li>返回一个 2 x 2的随机数组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.rand(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># array([[0.67949434, 0.73498025],</span></span><br><span class="line"><span class="comment">#        [0.21896692, 0.54682848]])</span></span><br></pre></td></tr></table></figure><h2 id="randn（标准正态分布中随机样本）"><a href="#randn（标准正态分布中随机样本）" class="headerlink" title="randn（标准正态分布中随机样本）"></a>randn（标准正态分布中随机样本）</h2><blockquote><p>Return a sample (or samples) from the “standard normal” distribution.</p><p>从标准正态分布返回一个或多个样本</p></blockquote><ul><li>参数：<ol><li>d0, d1, …, dn：形状信息</li></ol></li><li>返回值：<ul><li>Z：浮点型或者浮点型数组</li></ul></li></ul><h3 id="一些简单的🌰-3"><a href="#一些简单的🌰-3" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>不传数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randn() <span class="comment"># 1.5567818373271456</span></span><br></pre></td></tr></table></figure><ol start="2"><li>返回 2 x 5 的标准正态分布样本</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.randn(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># array([[ 1.15218971, -0.19590126,  0.10391749, -0.46857231,  0.58370011],</span></span><br><span class="line"><span class="comment">#        [-0.29639999, -0.73765977, -0.03441631,  0.26545265,  0.25255167]])</span></span><br></pre></td></tr></table></figure><h2 id="normal（正态分布中随机样本）"><a href="#normal（正态分布中随机样本）" class="headerlink" title="normal（正态分布中随机样本）"></a>normal（正态分布中随机样本）</h2><blockquote><p>Draw random samples from a normal (Gaussian) distribution.</p><p>从正态分布中抽取随机样本，默认返回标准正态分布</p></blockquote><ul><li>参数<ol><li>loc：期望值，默认为 0</li><li>scale：标准差，默认为 1</li><li>size：大小，默认为 None</li></ol></li><li>返回值<ul><li>out：浮点型或者浮点型数组</li></ul></li></ul><h3 id="一些简单的🌰-4"><a href="#一些简单的🌰-4" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>不传参数，默认为标准正态分布 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal()    <span class="comment"># 0.39605193328763477</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>期望值为 1，标准差为 2 的正态分布</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal(<span class="number">1</span>, <span class="number">2</span>)    <span class="comment"># 0.9208239350120327</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>获取 10 个期望值为 5，标准差为 2 的正态分布的值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal(<span class="number">5</span>, <span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># array([5.66208783, 3.63723912, 4.4776973 , 5.20380349, 6.0451376 ,</span></span><br><span class="line"><span class="comment">#        4.53452163, 2.34042043, 4.43470636, 6.75530746, 1.95167798])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="choice（从给定数据中随机样本）"><a href="#choice（从给定数据中随机样本）" class="headerlink" title="choice（从给定数据中随机样本）"></a>choice（从给定数据中随机样本）</h2><blockquote><p>Generates a random sample from a given 1-D array</p><p>从给定的一维数组中，生成随机样本</p></blockquote><ul><li>参数：<ol><li>a：随机的参数<ul><li>如果是 ndarray，则从中随机一个数字</li><li>如果是 int，则从 np.arange(a) 中随机一个数组</li></ul></li><li>size：大小，默认为 None</li><li>replace：是否要放回取样，默认为 True</li><li>p：随机选取对应索引的概率</li></ol></li><li>返回值：<ul><li>samples：single item or ndarray</li></ul></li></ul><h3 id="一些简单的🌰-5"><a href="#一些简单的🌰-5" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>从 0-9 中随机选择一个元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(<span class="number">10</span>) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><ol start="2"><li>从 0-9 中不放回取样 10 个数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(<span class="number">10</span>, <span class="number">10</span>, <span class="literal">False</span>)</span><br><span class="line"><span class="comment"># array([8, 9, 5, 0, 1, 4, 3, 6, 7, 2])</span></span><br></pre></td></tr></table></figure><ol start="3"><li>从0 - 1中取样 10 个数据，0 的取样概率为 0.8，1 的取样概率为 0.2</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(<span class="number">2</span>, <span class="number">10</span>, p=[<span class="number">0.8</span>, <span class="number">0.2</span>])</span><br><span class="line"><span class="comment"># array([0, 1, 0, 0, 0, 1, 0, 0, 0, 1])</span></span><br></pre></td></tr></table></figure><h2 id="uniform（均匀分布抽取）"><a href="#uniform（均匀分布抽取）" class="headerlink" title="uniform（均匀分布抽取）"></a>uniform（均匀分布抽取）</h2><blockquote><p>Draw samples from a uniform distribution.</p><p>从均匀分布中抽取样本</p></blockquote><ul><li>参数<ol><li>low：下界，默认为 0</li><li>high：上界，默认为 1</li><li>size：大小，默认为 None</li></ol></li><li>返回值<ul><li>out：ndarray or scalar</li></ul></li></ul><h3 id="一些简单的🌰-6"><a href="#一些简单的🌰-6" class="headerlink" title="一些简单的🌰"></a>一些简单的🌰</h3><ol><li>不传参数，默认 [0, 1) 的均匀分布</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform() <span class="comment"># 0.237545651484531</span></span><br></pre></td></tr></table></figure><ol start="2"><li>获取[2, 10)中均匀分布的一个样本</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform(<span class="number">2</span>, <span class="number">10</span>) <span class="comment"># 3.751506848826293</span></span><br></pre></td></tr></table></figure><h2 id="数据打散"><a href="#数据打散" class="headerlink" title="数据打散"></a>数据打散</h2><h3 id="permutation（不修改原数据）"><a href="#permutation（不修改原数据）" class="headerlink" title="permutation（不修改原数据）"></a>permutation（不修改原数据）</h3><blockquote><p>Randomly permute a sequence, or return a permuted range.</p><p>随机排序一个序列，返回排序的结果</p></blockquote><ul><li>参数<ol><li>x：同 choice 中的 a</li></ol></li><li>返回值<ul><li>out：ndarray</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.permutation(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># array([7, 1, 0, 6, 9, 5, 3, 8, 4, 2])</span></span><br></pre></td></tr></table></figure><h3 id="shuffle（修改原数据）"><a href="#shuffle（修改原数据）" class="headerlink" title="shuffle（修改原数据）"></a>shuffle（修改原数据）</h3><blockquote><p>Modify a sequence in-place by shuffling its contents.</p><p>原地修改一个数组的顺序</p></blockquote><ul><li>参数<ul><li>x</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">np.random.shuffle(a)</span><br><span class="line">a    <span class="comment"># array([4, 3, 9, 5, 6, 1, 8, 0, 2, 7])</span></span><br></pre></td></tr></table></figure><h2 id="随机种子"><a href="#随机种子" class="headerlink" title="随机种子"></a>随机种子</h2><h3 id="seed"><a href="#seed" class="headerlink" title="seed"></a>seed</h3><blockquote><p>seed一旦定下来之后，如果是固定的 seed，则每次随机的结果都是一样的。</p><p><strong>注意：</strong>seed 的有效次数仅为一次</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">2</span>)</span><br><span class="line">np.random.randint(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 40</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NumPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 题解：746. 使用最小花费爬楼梯</title>
      <link href="/2019/leetcode-746.html"/>
      <url>/2019/leetcode-746.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/">点我查看详细原题</a></p></blockquote><blockquote><p><strong>题目大意</strong>：</p><ol><li>数组的每个值对应为一个阶梯数</li><li>每个阶梯数都对应一个体力花费数</li><li>每爬一个阶梯就要消耗相应的体力</li><li>可以选择一次爬一个或者一次爬两个（就是跳过一个阶梯，跳过的阶梯不算体力）</li><li>找到到达目的地的最低体力花费数</li><li>可以从 0 或 1 开始爬</li></ol></blockquote><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: cost &#x3D; [10, 15, 20]</span><br><span class="line">输出: 15</span><br><span class="line"></span><br><span class="line">解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。</span><br></pre></td></tr></table></figure><p> 示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: cost &#x3D; [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]</span><br><span class="line">输出: 6</span><br><span class="line"></span><br><span class="line">解释: 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li><code>cost</code> 的长度将会在 <code>[2, 1000]</code>。</li><li>每一个 <code>cost[i]</code> 将会是一个Integer类型，范围为 <code>[0, 999]</code>。</li></ol><a id="more"></a> <h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="动态规划思想"><a href="#动态规划思想" class="headerlink" title="动态规划思想"></a>动态规划思想</h3><p>按结果分析，最终结果可以从倒数第一个到达和倒数第二个到达</p><ol><li>假设只有两个元素</li></ol><p>此时的结果就是 <code>cost[0]</code> 和 <code>cost[1]</code> 中最小的那个</p><ol start="2"><li><p>假设只有三个元素分别为 1，2，3</p><p>我们可以一眼看出最小的结果即为 2。仔细观察就会发现，我们取了爬到 2 和 3 元素的最小值，因为爬到 2 元素消耗为2，爬到 3 元素消耗为 3。</p><ol><li>为何爬到 3 元素消耗为 3 呢</li></ol><p>因为我们选择了 1 元素为起始点，并且略过了 2 元素</p><ol start="2"><li>爬到 3 元素的表达式怎么写?</li></ol><p><code>min(cost[0], cost[1]) + cost[3]</code></p><ol start="3"><li>比较爬到 3 元素和 2 元素的消耗，不难得出最终登上楼梯的最小消耗为 2</li><li>根据动态规划思想写转移方程</li></ol><p><code>dp[0] = cost[0]</code> 、<code>dp[1] = cost[1]</code>、<code>dp[2] = min(dp[0] + dp[1]) + cost[2]</code></p></li><li><p>将 <code>3</code>  个元素的转移方程推广到 <code>n</code> 个元素</p></li></ol><p><code>dp[n] = min(dp[n-1] + dp[n-2]) + cost[n]</code> 此时 n &gt; 2</p><h4 id="图解如下"><a href="#图解如下" class="headerlink" title="图解如下"></a>图解如下</h4><p>仔细观察就会发现，我们取了跳到 2 和 3 元素的最小值，因为跳到 2 元素消耗为2，跳到 3 元素消耗为 3。</p><p><img src="/img/leetcode%20746.gif" alt="未命名.gif"></p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li></ul><p>因为借用了 dp 数组，所以空间复杂度为 O(n)，此题也可以将 dp 数组修改为 两个变量从而实现空间复杂度为 O(1)的情况。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> LeetCode Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 整理</title>
      <link href="/2019/Basics-of-MySQL.html"/>
      <url>/2019/Basics-of-MySQL.html</url>
      
        <content type="html"><![CDATA[<h2 id="SQL-的分类"><a href="#SQL-的分类" class="headerlink" title="SQL 的分类"></a>SQL 的分类</h2><blockquote><p>SQL： Structrued Query Language 结构化的查询语言</p></blockquote><ol><li><code>DDL</code> ：数据定义语言，定义数据库、表结构<ol><li><code>create</code>        创建</li><li><code>drop</code>        删除</li><li><code>alter</code>          修改</li><li><code>truncate</code>      截断</li></ol></li><li><code>DML</code>： 数据库操纵语言，操作的对象是数据<ol><li><code>insert</code>        插入</li><li><code>update</code>        更新</li><li><code>delete</code>        删除</li></ol></li><li><code>DCL</code> ：数据库控制语言，控制的是权限<ol><li><code>grant</code>         授权</li><li><code>revoke</code>         取消授权</li></ol></li><li><code>DQL</code> ：数据库查询语言，查询数据<ol><li><code>select</code>        查询</li></ol></li></ol><a id="more"></a> <h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用 xxx 为数据库名称创建一个数据库</span><br><span class="line">create database xxx;</span><br></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 删除名称为 xxx 的数据库</span><br><span class="line">drop database xxx;</span><br></pre></td></tr></table></figure><h4 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 修改数据库编码</span><br><span class="line"># 修改 xxx 数据库的编码为 gbk</span><br><span class="line">alter database xxx character set gbk;</span><br><span class="line"></span><br><span class="line"># 一般很少修改数据库，最常用的为修改数据库编码，虽然这也非常少用到。</span><br></pre></td></tr></table></figure><h4 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"># 显示 xxx 数据库创建的语句和编码</span><br><span class="line">show create database xxx;</span><br></pre></td></tr></table></figure><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">语法：</span><br><span class="line">create table 表名（</span><br><span class="line">                            字段名  类型(长度) [约束]，</span><br><span class="line">                            字段名  类型(长度) [约束]，</span><br><span class="line">                            ...）;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line">create table aa (</span><br><span class="line">                        id int primary key auto_increment,</span><br><span class="line">                        username varchar(20));</span><br><span class="line"># 创建表 aa，aa 中有两个字段分别是 int 类型的主键 id 和 varchar 类型的 username</span><br></pre></td></tr></table></figure><h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">drop table 表名</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line">drop table aa;</span><br><span class="line"># 删除表 aa</span><br></pre></td></tr></table></figure><h4 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法</span><br><span class="line">1. 在表中添加列</span><br><span class="line">alter table 表名 add 列名 类型(长度) [约束];</span><br><span class="line">2. 修改表中存在列的类型长度</span><br><span class="line">alter table 表名 modify 列名 类型(长度) [约束];</span><br><span class="line">3. 修改列名</span><br><span class="line">alter table 表名 change 旧列名 新列名 类型(长度) [约束];</span><br><span class="line">4. 删除列</span><br><span class="line">alter table 表名 drop 列名;</span><br><span class="line">5. 修改表名（比较少用）</span><br><span class="line">rename table 表名 to 新表名;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 1. 在 aa 表中添加一列名为 age</span><br><span class="line">alter table aa add age int;</span><br><span class="line"># 2. 将 aa 表中的 username 的长度修改为 30</span><br><span class="line">alter table aa modify username varchar(30);</span><br><span class="line"># 3. 修改 aa 表中 username 的名称为 nickname</span><br><span class="line">alter table aa change username nickname varchar(30);</span><br><span class="line"># 4. 删除 aa 表中的 age 列</span><br><span class="line">alter table aa drop age;</span><br><span class="line"># 5. 修改 aa 的表名为 bb</span><br><span class="line">rename table aa to bb;</span><br></pre></td></tr></table></figure><h4 id="显示数据表"><a href="#显示数据表" class="headerlink" title="显示数据表"></a>显示数据表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前数据库中 所有的数据表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line"># 显示 xxx 表中的具体结构 </span><br><span class="line">desc xxx;</span><br><span class="line"></span><br><span class="line"># 显示 xxx 表的建表结构</span><br><span class="line">show create table xxx;</span><br></pre></td></tr></table></figure><h3 id="DML（数据库操纵语言）"><a href="#DML（数据库操纵语言）" class="headerlink" title="DML（数据库操纵语言）"></a>DML（数据库操纵语言）</h3><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">1. 添加一条记录，对具体的列进行赋值，若是字符或者日期类型需要加 &#39;&#39; 引号</span><br><span class="line">insert into 表名 (列 1, 列 2, 列 3) values(值 1, 值 2, 值 3);</span><br><span class="line">2. 添加一条记录，对表中所有的列进行赋值，按建表语句中的顺序</span><br><span class="line">insert into 表名 values(值 1, 值 2, 值 3)</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 1. 将 username 为 &#39;zhangsan&#39; 数据添加到 aa 表中</span><br><span class="line">insert into aa (username) values(&#39;zhangsan&#39;);</span><br><span class="line"># 2. 将 null, lisi 添加到 aa 数据库中, 因为 id 是 primary key auto_increment 传递 null 给它，其会自增</span><br><span class="line">insert into aa values(null, &#39;lisi&#39;);</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">delete from 表名 [where 条件]</span><br><span class="line">将满足条件的所有表删除，如果不加条件，即为所有都满足，删除所有表记录</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 1. 将表中 username 为 lisi 的记录删除</span><br><span class="line">delete from aa where username&#x3D;&#39;lisi&#39;</span><br><span class="line"># 2. 逐一删除 aa 表中所有记录</span><br><span class="line">delete from aa;</span><br></pre></td></tr></table></figure><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">update 表名 set 字段名1&#x3D;值1，字段名2&#x3D;值2 [where 条件];</span><br><span class="line">将满足条件的数据中的 字段名1 改为 值1 ，字段名2 改为 值2</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 1. 将 aa 数据库中 username 为 zhangsan 的记录的 age 改为 20</span><br><span class="line">update aa set age &#x3D; 20 where username &#x3D; &#39;zhangsan&#39;</span><br><span class="line"># 2. 不带 where, 表中所有记录的 age 都改为 20</span><br><span class="line">update aa set age &#x3D; 20;</span><br></pre></td></tr></table></figure><h3 id="DCL（数据库控制语言）"><a href="#DCL（数据库控制语言）" class="headerlink" title="DCL（数据库控制语言）"></a>DCL（数据库控制语言）</h3><p>MySQL账户体系，根据账户所具有的权限的不同，MySQL 的账户可以分为以下几种</p><ol><li>服务实例级账号：启动一个 mysqld，即为一个数据库的实例，如果某用户如 root，拥有服务实例级分配的权限，那么该账号就可以删除所有的数据库，连同这些库中的表</li><li>数据库级别账号：对特定数据库进行增删改查的操作</li><li>数据表级别账号：对特定表执行增删改查的操作</li><li>字段级别的账号：对某些表的特定字段进行操作</li><li>存储程序级别的账号：对存储程序进行增删改查的操作</li></ol><blockquote><p>！注意：进行账户操作时，需要使用 root 账户登录，这个账户拥有最高的实例权限。账户的操作主要包括创建账户、删除账户、修改密码、授权权限等。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 常用的权限主要有</span><br><span class="line">create、 alter、 drop、 insert、 update、 delete、 select</span><br><span class="line"># 如果分配所有权限 可以使用</span><br><span class="line">all privileges</span><br></pre></td></tr></table></figure><h4 id="创建账户、授权"><a href="#创建账户、授权" class="headerlink" title="创建账户、授权"></a>创建账户、授权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建账户</span><br><span class="line">create user &#39;用户名&#39;@&#39;主机名&#39; identified by &#39;密码&#39;;</span><br><span class="line"></span><br><span class="line"># 授权</span><br><span class="line">grant 权限 on 数据库.表名 to &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 创建 &#39;zhangsan&#39;@&#39;localhost&#39; 账号</span><br><span class="line">create user &#39;zhangsan&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br><span class="line"># 将查询 demo 数据库中 user 表的权限授予 &#39;zhangsan&#39;@&#39;localhost&#39; 账号</span><br><span class="line">grant select on demo.user to &#39;zhangsan&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure><blockquote><ol><li>可以操控<code>demo</code>数据库的 user 表，方式为 <code>demo.user</code></li><li>访问主机通常使用 <code>%</code> 表示此账户可以用任何 ip 的主机登录访问此数据库</li><li>访问主机可以设计为 <code>localhost</code> 或具体的 <code>ip</code> 表示只允许本机和特定的 <code>ip</code> 才可以访问</li></ol></blockquote><h4 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#39;zhangsan&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure><h4 id="删除权限"><a href="#删除权限" class="headerlink" title="删除权限"></a>删除权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">revoke 权限名称 on 数据库.表名 from &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 删除 zhangsan 对 demo 数据中 user 表查询的权限</span><br><span class="line">revoke select on demo.user from &#39;zhangsan&#39;@&#39;localhost&#39;;</span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set password for &#39;用户名&#39;@&#39;主机名&#39; &#x3D; password(&#39;新密码&#39;);</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 将 &#39;zhangsan&#39;@&#39;localhost&#39; 用户密码设置为 123456</span><br><span class="line">set password for &#39;zhangsan&#39;@&#39;localhost&#39; &#x3D; password(&#39;123456&#39;);</span><br></pre></td></tr></table></figure><h4 id="删除账户"><a href="#删除账户" class="headerlink" title="删除账户"></a>删除账户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法 1：</span><br><span class="line">drop user &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line">语法 2：</span><br><span class="line">delete from user where user&#x3D;&#39;用户名&#39;;</span><br><span class="line"></span><br><span class="line">推荐使用语法 1 的方式删除用户，如果语法 1 删除不成功，再使用语法 2 的方式。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 方式 1</span><br><span class="line">drop user &#39;zhangsan&#39;@&#39;localhost&#39;;</span><br><span class="line"># 方式 2</span><br><span class="line">delete from user where user&#x3D;&#39;zhangsan&#39;;</span><br></pre></td></tr></table></figure><h3 id="DQL（数据库查询语言）"><a href="#DQL（数据库查询语言）" class="headerlink" title="DQL（数据库查询语言）"></a>DQL（数据库查询语言）</h3><p>准备工作</p><blockquote><p>为了后面的 🌰 方便，准备了一份数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 准备一张商品分类表(分类ID,分类名称,分类描述)</span><br><span class="line">create table category(</span><br><span class="line">    cid int primary key auto_increment,</span><br><span class="line">      cname varchar(10),</span><br><span class="line">      cdesc varchar(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 准备一张商品表(商品编号,商品名称,商品价格,商品描述,商品分类编号)</span><br><span class="line">create table product(</span><br><span class="line">    pid int primary key auto_increment,</span><br><span class="line">      pname varchar(10),</span><br><span class="line">      price double,</span><br><span class="line">      pdesc varchar(50),</span><br><span class="line">      cno   int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 数据的准备</span><br><span class="line">insert into category values(null,&#39;手机数码&#39;,&#39;小手机&#39;);</span><br><span class="line">insert into category values(null,&#39;鞋靴箱包&#39;,&#39;包包&#39;);</span><br><span class="line">insert into category values(null,&#39;香烟酒水&#39;,&#39;黄鹤楼,茅台&#39;);</span><br><span class="line">insert into category values(null,&#39;馋嘴零食&#39;,&#39;卫龙辣条,周黑鸭&#39;);</span><br><span class="line"></span><br><span class="line">insert into product values(null,&#39;锤子&#39;,2999,&#39;可以砸榴莲的手机&#39;,1);</span><br><span class="line">insert into product values(null,&#39;小米&#39;,1599,&#39;为发烧而生&#39;,1);</span><br><span class="line">insert into product values(null,&#39;李宁&#39;,99,&#39;不走寻常路&#39;,2);</span><br><span class="line">insert into product values(null,&#39;耐克&#39;,399,&#39;just do it&#39;,2);</span><br><span class="line">insert into product values(null,&#39;黄鹤楼&#39;,20,&#39;饭后一根烟,胜做活神仙&#39;,3);</span><br><span class="line">insert into product values(null,&#39;卫龙辣条&#39;,5,&#39;卫龙辣条加料不加价&#39;,4);</span><br><span class="line">insert into product values(null,&#39;老干妈辣椒酱&#39;,9,&#39;永远不变的味道&#39;,4);</span><br><span class="line">insert into product values(null,&#39;老干爹辣椒酱&#39;,19,&#39;永远不变的味道&#39;,4);</span><br><span class="line">insert into product values(null,&#39;黄鹤楼&#39;,20,&#39;饭后一根烟,胜做活神仙&#39;,3);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">基本语法：</span><br><span class="line">select [distinct]*[列名1, 列名2] from 表 [where 条件]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 🌰</span><br><span class="line"># 1. 查询所有商品</span><br><span class="line">select * from product;</span><br><span class="line"># 2. 查询商品名和商品价格</span><br><span class="line">select pname, price from product;</span><br><span class="line"># 3. 别名查询，使用关键字 as，as 可以省略</span><br><span class="line">select * from product as p;                # 表别名</span><br><span class="line">select pname as pn from product;    # 列别名</span><br><span class="line"># 4. 去重复值</span><br><span class="line">select distinct price from product;</span><br></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">where 后的条件写法：</span><br><span class="line">1. 比较运算符：&gt;(大于), &lt;(小于), &#x3D;(等于), &gt;&#x3D;(大于等于), &lt;&#x3D;(小于等于), !&#x3D;(不等于), &lt;&gt;(不等于，老的写法)</span><br><span class="line">2. 逻辑运算符：or(或), and(与)</span><br><span class="line">3. is null        ： 专门用来判断是否为空</span><br><span class="line">4. is not null： 专门用来判断是否非空</span><br><span class="line">5. like 模糊查询：</span><br><span class="line">                        _    ：代表一个字符</span><br><span class="line">                        % ：代表任意个字符</span><br><span class="line">6. in 在某个特定数据中取值</span><br><span class="line">7. between 在给定范围内取值</span><br><span class="line">*&#x2F;</span><br><span class="line"># 1. 查询商品名称为十三香的商品的所有信息</span><br><span class="line">select * from product where pname &#x3D; &#39;十三香&#39;;</span><br><span class="line"># 2. 查询商品价格大于 60 元的所有商品信息</span><br><span class="line">select * from product where price &gt; 60;</span><br><span class="line"># 3. 查询商品价格大于 60 元且分类为 2 的所有商品信息</span><br><span class="line">select * from product where price &gt; 60 and cno &#x3D; 2;</span><br><span class="line"># 4. 查询商品名称中带有 新 字的商品信息</span><br><span class="line">select * from product where pname like &#39;%新%&#39;;</span><br><span class="line"># 5. 查询商品pid 为2,5,8的数据</span><br><span class="line">select * from product where pid in (2, 5, 8)</span><br><span class="line"># 6. 查询商品pid 在 2 与 8 之间的数据</span><br><span class="line">select * from product where pid between 2 and 8;</span><br></pre></td></tr></table></figure><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># asc 升序， desc 降序</span><br><span class="line"># order by 列 [asc|desc]</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 1. 查询所有商品，按价格进行排序，默认升序</span><br><span class="line">select * from product order by price;</span><br><span class="line"># 2. 查询名称含有 新 的商品，且按价格降序排序</span><br><span class="line">select * from product where pname like &#39;%新%&#39; order by price desc;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">sum        ： 和</span><br><span class="line">avg        ： 平均值</span><br><span class="line">max        ：    最大值</span><br><span class="line">min        ：    最小值</span><br><span class="line">count ： 个数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 1. 获取所有商品的价格总和</span><br><span class="line">select sum(price) from product;</span><br><span class="line"># 2. 获取所有商品的平均价格</span><br><span class="line">select avg(price) from product;</span><br><span class="line"># 3. 获取所有商品的个数</span><br><span class="line">select count(*) from product;</span><br></pre></td></tr></table></figure><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># group by 列</span><br><span class="line"># having 关键字可以让我们筛选分组后的各种数据</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 1. 根据 cno 字段分组，分组后统计各组的个数</span><br><span class="line">select cno, count(*) from product group by cno;</span><br><span class="line"># 2. 根据 cno 字段分组，分组后统计各组的平均价格，且平均价格大于 60</span><br><span class="line">select cno, avg(price) from product group by cno having avg(price) &gt; 60;</span><br></pre></td></tr></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># limit ?, ?</span><br><span class="line"># 第一个 ？表示跳过前面的多少条，第二个 ？表示返回多少条</span><br><span class="line"></span><br><span class="line"># 🌰</span><br><span class="line"># 查询从第二条开始的两条商品信息，即跳过第一条，返回两条</span><br><span class="line">select * from product limit 1, 2;</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>准备工作</p><blockquote><p>首先，介绍一下，表之间的关系，约束如何表示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">一共 5 大约束：</span><br><span class="line">    1. 主键约束：primary key 非空且唯一</span><br><span class="line">    2. 唯一约束：unique             唯一可以为空</span><br><span class="line">    3. 非空约束：not null         不能为空</span><br><span class="line">    4. 检查约束：check(条件)     mysql中没有设置检查约束，可以直接忽略</span><br><span class="line">    5. 外键约束：foreign key 约束从表中的记录必须参考主表</span><br><span class="line">    </span><br><span class="line">    1-3 很好理解，4我们不做考虑，简要描述 5 的写法和用法</span><br><span class="line">*&#x2F;</span><br><span class="line"># 下面的建表语句中 该表的 cno 值必须依赖 category 表中的 cid 值</span><br><span class="line">foreign key(cno) references category(cid)</span><br></pre></td></tr></table></figure><blockquote><p>为了后面的 🌰 方便，准备了一份数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"># 用户表 (用户的ID,用户名,密码,手机)</span><br><span class="line">create table user(</span><br><span class="line">      uid int primary key auto_increment,</span><br><span class="line">    name varchar(10),</span><br><span class="line">    password varchar(20),</span><br><span class="line">    mobile varchar(11)</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line"># 订单表 (订单编号,总价,订单时间 外键--&gt;用户的ID)</span><br><span class="line">create table orders(</span><br><span class="line">      oid int primary key auto_increment,</span><br><span class="line">    total double,</span><br><span class="line">    otime timestamp,</span><br><span class="line">    uno int,</span><br><span class="line">    foreign key(uno) references user(uid)</span><br><span class="line">);</span><br><span class="line">  </span><br><span class="line"># 商品分类表(分类ID,分类名称,分类描述)</span><br><span class="line">create table category(</span><br><span class="line">     cid int primary key auto_increment,</span><br><span class="line">    cname varchar(20),</span><br><span class="line">    cdesc varchar(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 商品表 (商品ID, 商品名称,商品价格,商品描述,外键cno)</span><br><span class="line">create table product(</span><br><span class="line">    pid int primary key auto_increment,</span><br><span class="line">    pname varchar(10),</span><br><span class="line">    price double,</span><br><span class="line">    pdesc varchar(50),</span><br><span class="line">     cno int,</span><br><span class="line">     foreign key(cno) references category(cid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 订单项: 中间表(订单ID,商品ID,商品数量,订单项总价)</span><br><span class="line">  create table orderitem(</span><br><span class="line">      ono int,</span><br><span class="line">    pno int,</span><br><span class="line">    num int,</span><br><span class="line">    subtotal double,</span><br><span class="line">  foreign key(ono) references orders(oid),</span><br><span class="line">    foreign key(pno) references product(pid)</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line"># 准备数据: 假设张三用户注册</span><br><span class="line">insert into user values(1,&#39;zs&#39;,&#39;123&#39;,&#39;110&#39;);</span><br><span class="line"></span><br><span class="line"># 准备数据: 插入分类表的数据</span><br><span class="line">insert into category values(1,&#39;手机数码&#39;,&#39;小手机&#39;);</span><br><span class="line">insert into category values(2,&#39;鞋靴箱包&#39;,&#39;包包&#39;);</span><br><span class="line">insert into category values(3,&#39;香烟酒水&#39;,&#39;黄鹤楼,茅台&#39;);</span><br><span class="line">insert into category values(4,&#39;馋嘴零食&#39;,&#39;卫龙辣条,周黑鸭&#39;);</span><br><span class="line">insert into category values(5,&#39;电脑办公&#39;,&#39;联想电脑外星人&#39;);</span><br><span class="line"></span><br><span class="line"># 准备数据 : 插入商品表的数据</span><br><span class="line">insert into product values(1,&#39;锤子&#39;,2999,&#39;可以砸榴莲的手机&#39;,1);</span><br><span class="line">insert into product values(2,&#39;小米&#39;,1599,&#39;为发烧而生&#39;,1);</span><br><span class="line">insert into product values(3,&#39;李宁&#39;,99,&#39;不走寻常路&#39;,2);</span><br><span class="line">insert into product values(4,&#39;耐克&#39;,399,&#39;just do it&#39;,2);</span><br><span class="line">insert into product values(5,&#39;黄鹤楼&#39;,20,&#39;饭后一根烟&#39;,3);</span><br><span class="line">insert into product values(6,&#39;黄鹤楼&#39;,20,&#39;饭后一根烟&#39;,3);</span><br><span class="line">insert into product values(7,&#39;卫龙辣条&#39;,5,&#39;卫龙辣条加料不加价&#39;,4);</span><br><span class="line">insert into product values(8,&#39;老干妈辣椒酱&#39;,9,&#39;永远不变的味道&#39;,4);</span><br><span class="line">insert into product values(9,&#39;老干娘辣椒酱&#39;,null,&#39;永远不变的味道&#39;,4);</span><br><span class="line">insert into product values(10,&#39;热干面&#39;,10,&#39;大武汉热干面&#39;,null);</span><br><span class="line"></span><br><span class="line"># 准备数据: 假设张三在我们的商城下两个订单</span><br><span class="line"> # zs买东西: </span><br><span class="line"> # 1号订单:</span><br><span class="line">      # 锤子: 1  10  29990</span><br><span class="line">      # 李宁: 3  2    198</span><br><span class="line">        # 向 订单表 插入1号订单信息(订单编号,订单总价,订单时间,用户编号)      </span><br><span class="line">insert into orders values(1,30000,null,1);</span><br><span class="line">        # 向 订单项表 插入1号订单包含的商品信息(订单编号,商品编号,商品数量,商品小计)</span><br><span class="line">insert into orderitem values(1,1,10,29990);</span><br><span class="line">insert into orderitem values(1,3,2,198);</span><br><span class="line"></span><br><span class="line"> # 2号订单:</span><br><span class="line">      # 卫龙辣条: 7  10 50</span><br><span class="line">      # 老干妈辣椒酱:8 2 18</span><br><span class="line">      # 李宁: 3  1    99 </span><br><span class="line">        # 向 订单表 插入2号订单信息(订单编号,订单总价,订单时间,用户编号)            </span><br><span class="line">insert into orders values(2,150,null,1);</span><br><span class="line">        # 向 订单项表 插入2号订单所包含的商品信息(订单编号,商品编号,商品数量,商品小计)</span><br><span class="line">insert into orderitem values(2,7,10,50);</span><br><span class="line">insert into orderitem values(2,8,2,18);</span><br><span class="line">insert into orderitem values(2,3,1,99);</span><br></pre></td></tr></table></figure><h4 id="交叉连接查询"><a href="#交叉连接查询" class="headerlink" title="交叉连接查询"></a>交叉连接查询</h4><p>笛卡尔积：两张表的乘积，查询的结果没有什么实际意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># product 表和 category 的笛卡尔积</span><br><span class="line">select * from product, category;</span><br></pre></td></tr></table></figure><h4 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h4><h5 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># product 表中 cno 等于 cateory表中 cid 的数据</span><br><span class="line">select * from product p, category c where p.cno &#x3D; c.cid;</span><br></pre></td></tr></table></figure><h5 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># inner join 关键字 内连接</span><br><span class="line">select * from product p inner join category c on p.cno &#x3D; c.cod;</span><br></pre></td></tr></table></figure><h4 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h4><h5 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h5><p>以左表为基础，将左表中所有的记录都查询出来，如果没有对应的记录，就用 null 填充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from product p left outer join category c on p.cno &#x3D; c.cid;</span><br></pre></td></tr></table></figure><h5 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h5><p>以右表为基础，将右表中所有的记录都查询出来，如果没有对应的记录，就用 null 填充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from product p right outer join category c on p.cno &#x3D; c.cid;</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>为了后面的 🌰 方便，准备了一份数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 员工信息表</span><br><span class="line">create table emp(</span><br><span class="line">    empno int comment &#39;员工编号&#39;,</span><br><span class="line">    ename varchar(50) comment &#39;员工姓名&#39;,</span><br><span class="line">    job varchar(50) comment &#39;员工工作&#39;,</span><br><span class="line">    mgr int comment &#39;员工经理编号&#39;,</span><br><span class="line">    hiredate date comment &#39;员工入职日期&#39;,</span><br><span class="line">    sal decimal(7,2) comment &#39;员工工资&#39;, </span><br><span class="line">    comm decimal(7,2) comment &#39;员工奖金&#39;,</span><br><span class="line">    deptno int comment &#39;员工所处部门&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into emp values(7369,&#39;SMITH&#39;,&#39;CLERK&#39;,7902,&#39;1980-12-17&#39;,800,NULL,20);</span><br><span class="line">insert into emp values(7499,&#39;ALLEN&#39;,&#39;SALESMAN&#39;,7698,&#39;1981-02-20&#39;,1600,300,30);</span><br><span class="line">insert into emp values(7521,&#39;WARD&#39;,&#39;SALESMAN&#39;,7698,&#39;1981-02-22&#39;,1250,500,30);</span><br><span class="line">insert into emp values(7566,&#39;JONES&#39;,&#39;MANAGER&#39;,7839,&#39;1981-04-02&#39;,2975,NULL,20);</span><br><span class="line">insert into emp values(7654,&#39;MARTIN&#39;,&#39;SALESMAN&#39;,7698,&#39;1981-09-28&#39;,1250,1400,30);</span><br><span class="line">insert into emp values(7698,&#39;BLAKE&#39;,&#39;MANAGER&#39;,7839,&#39;1981-05-01&#39;,2850,NULL,30);</span><br><span class="line">insert into emp values(7782,&#39;CLARK&#39;,&#39;MANAGER&#39;,7839,&#39;1981-06-09&#39;,2450,NULL,10);</span><br><span class="line">insert into emp values(7788,&#39;SCOTT&#39;,&#39;ANALYST&#39;,7566,&#39;1987-04-19&#39;,3000,NULL,20);</span><br><span class="line">insert into emp values(7839,&#39;KING&#39;,&#39;PRESIDENT&#39;,NULL,&#39;1981-11-17&#39;,5000,NULL,10);</span><br><span class="line">insert into emp values(7844,&#39;TURNER&#39;,&#39;SALESMAN&#39;,7698,&#39;1981-09-08&#39;,1500,0,30);</span><br><span class="line">insert into emp values(7876,&#39;ADAMS&#39;,&#39;CLERK&#39;,7788,&#39;1987-05-23&#39;,1100,NULL,20);</span><br><span class="line">insert into emp values(7900,&#39;JAMES&#39;,&#39;CLERK&#39;,7698,&#39;1981-12-03&#39;,950,NULL,30);</span><br><span class="line">insert into emp values(7902,&#39;FORD&#39;,&#39;ANALYST&#39;,7566,&#39;1981-12-03&#39;,3000,NULL,20);</span><br><span class="line">insert into emp values(7934,&#39;MILLER&#39;,&#39;CLERK&#39;,7782,&#39;1982-01-23&#39;,1300,NULL,10);</span><br><span class="line">insert into emp values(7981,&#39;MILLER2&#39;,&#39;CLERK&#39;,7788,&#39;1992-01-23&#39;,2600,500,20);</span><br><span class="line"></span><br><span class="line"># 部门信息表</span><br><span class="line">create table dept(</span><br><span class="line">    deptno int comment &#39;部门编号&#39;,</span><br><span class="line">    dname varchar(14) comment &#39;部门的名称&#39;,     </span><br><span class="line">    loc varchar(13) comment &#39;部门所处的位置&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into dept values(10, &#39;ACCOUNTING&#39;, &#39;NEW YORK&#39;);</span><br><span class="line">insert into dept values(20, &#39;RESEARCH&#39;, &#39;DALLAS&#39;);</span><br><span class="line">insert into dept values(30, &#39;SALES&#39;, &#39;CHICAGO&#39;);</span><br><span class="line">insert into dept values(40, &#39;OPERATIONS&#39;, &#39;BOSTON&#39;);</span><br></pre></td></tr></table></figure><h4 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询出高于 10 号部门的平均工资的员工信息</span><br><span class="line">select * from emp where sal &gt; (select avg(sal) from emp where deptno &#x3D; 10);</span><br></pre></td></tr></table></figure><h4 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询出比 20 号部门任何员工工资高的员工信息 in, not in, any, all</span><br><span class="line">select * from emp where sal &gt; all(select sal from emp where deptno &#x3D; 20);</span><br></pre></td></tr></table></figure><h2 id="视图（虚表）"><a href="#视图（虚表）" class="headerlink" title="视图（虚表）"></a>视图（虚表）</h2><ol><li>视图其实就是将一条复杂且常用的 SQL 查询语句封装成一张虚表</li><li>视图本身不存储任何的数据，所有的数据都存放在原来的表中，所以可以把视图看成是一张逻辑上的表</li><li>当原始表数据发生变化的时候，视图中的数据也发生变化</li><li>视图这张虚表也可以进行数据更新操作</li></ol><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create view 视图名称 as 查询语句;</span><br><span class="line"># 1. 视图中的字段名称不能有重复的</span><br><span class="line"># 2. 为了方便区分，建议用 v_ 开头表示视图</span><br></pre></td></tr></table></figure><h3 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 该方法不仅可以看到表，也可以看到视图</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><h3 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h3><p>视图的使用方法与表的使用方法一致</p><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图的名称;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>事务其实就是一系列的 SQL 操作，要么都成功，要么都失败，不允许部分执行成功，部分执行失败的情况发生。</p></blockquote><p>事务的特性 ACID</p><ol><li>原子性(Atomicity)<ul><li>一个事务必须被视为一个不可分割的最小单元。</li></ul></li><li>一致性(Consistency)<ul><li>数据库总是从一个一致性的状态转换到另一个一致性的状态。</li></ul></li><li>隔离性(Isolation)<ul><li>一个事务的执行，不受其他事务的影响。</li></ul></li><li>持久性(Durability)<ul><li>事务一旦提交，则其所做的修改会永远保存到数据库中（此时即使系统崩溃，修改的数据也不会丢失）。</li></ul></li></ol><h3 id="事务的使用"><a href="#事务的使用" class="headerlink" title="事务的使用"></a>事务的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line">begin;</span><br><span class="line"># 提交事务</span><br><span class="line">commit;</span><br><span class="line"># 回滚事务</span><br><span class="line">rollback;</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>索引是一种排好序的快速查找的数据结构，它帮助数据库高效的查询数据</p></blockquote><p>优点：</p><ol><li>提高数据查询的效率，降低数据库的 IO 成本</li><li>通过索引对数据进行排序，降低数据排序成本，降低 CPU 的消耗</li></ol><p>缺点：</p><ol><li>索引本身也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引也要占用空间</li><li>虽然索引大大提高了查询的速度，同时反向影响了增删改的操作效率，因为表中数据变化之后，会导致索引内容不准，所以需要更新索引表信息，增加数据库的工作量。</li><li>随着业务的不断变化，之前建立的索引可能不满足我们的查询需求，需要消耗我们的时间去更新索引</li></ol><h3 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h3><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from 表名;</span><br></pre></td></tr></table></figure><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 如果指定字段是字符串，需要指定长度，长度最好与定义字段时一致</span><br><span class="line"># 字段类型如果不是字符串，可以不填长度</span><br><span class="line">create index 索引名称 on 表名(字段名(长度));</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index 索引名称 on 表名;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5 的学习与使用</title>
      <link href="/2019/29129922.html"/>
      <url>/2019/29129922.html</url>
      
        <content type="html"><![CDATA[<p>PyQt5是一条 Python 的 GUI 开发框架</p><h2 id="PyQt5-的安装"><a href="#PyQt5-的安装" class="headerlink" title="PyQt5 的安装"></a>PyQt5 的安装</h2><ol><li><code>pip3 install PyQt5</code></li><li>在终端中输入 <code>python3</code>进入 python 解释器</li><li>输入以下代码<code>from PyQt5 import QtWidgets</code></li><li>如果显示执行成功，即表示安装完成</li></ol><h2 id="PyQt-的模块介绍"><a href="#PyQt-的模块介绍" class="headerlink" title="PyQt 的模块介绍"></a>PyQt 的模块介绍</h2><p>PyQt 在运行时，有几句固定代码</p><ol><li>导入需要的库<ol><li><code>import sys</code></li><li><code>from PyQt5 import QtWidgets # 这部分导入根据需要使用的框架进行导入 </code></li></ol></li><li>创建和停止应用程序<ol><li><code>app = QtWidgets.QApplication(sys.argv) # 创建应用程序</code></li><li><code>... # 期间是程序需要执行的代码，比如创建界面和各种逻辑</code></li><li><code>sys.exit(app.exec()) # 退出应用程序</code>  </li></ol></li></ol><a id="more"></a> <h3 id="PyQt5的主要模块"><a href="#PyQt5的主要模块" class="headerlink" title="PyQt5的主要模块"></a>PyQt5的主要模块</h3><table><thead><tr><th>模块</th><th>解释</th></tr></thead><tbody><tr><td>QtCore</td><td>包括了核心的非 GUI 的功能。主要和时间、文件、文件夹、各种数据、流、URLS、mime 类文件、进程和线程。</td></tr><tr><td>QtGui</td><td>包括了窗口系统、事件处理、2D 图像、基本绘画、字体和文字类</td></tr><tr><td>QtWidgets</td><td>包括了一系列创建桌面应用的 UI元素</td></tr><tr><td>QtMultimedia</td><td>负责处理多媒体的内容和调用摄像头</td></tr><tr><td>QtBluetooth</td><td>负责查找和连接蓝牙</td></tr><tr><td>QtNetwork</td><td>负责网络编程</td></tr><tr><td>QtPositioning</td><td>负责定位相关</td></tr><tr><td>Enginio</td><td>包含了通过客户端进入和管理 Qt Cloud</td></tr><tr><td>QtWebSockets</td><td>实现了 WebSocket 协议</td></tr><tr><td>QtWebKit</td><td>包含了一个基于 WebKit2 的 web 浏览器</td></tr><tr><td>QtWebKitWidgets</td><td>包含了基于 QtWidgets 的 WebKit1的类</td></tr><tr><td>QtXml</td><td>负责处理 xml</td></tr><tr><td>QtSvg</td><td>负责显示 SVG 内容</td></tr><tr><td>QtSql</td><td>提供了处理数据库的工具</td></tr><tr><td>QtTest</td><td>提供了测试 PyQt5 应用的工具</td></tr></tbody></table><h3 id="设置图标、标题和窗口大小"><a href="#设置图标、标题和窗口大小" class="headerlink" title="设置图标、标题和窗口大小"></a>设置图标、标题和窗口大小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建应用程序</span></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置程序图标</span></span><br><span class="line">app.setWindowIcon(QIcon(<span class="string">&quot;qq.png&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建窗口组件</span></span><br><span class="line">window = QMainWindow()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口大小</span></span><br><span class="line">window.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置程序标题</span></span><br><span class="line">window.setWindowTitle(<span class="string">&quot;这是一个 QMainWindow 案例&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示窗口组件</span></span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出应用程序</span></span><br><span class="line">sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h3 id="屏幕坐标系"><a href="#屏幕坐标系" class="headerlink" title="屏幕坐标系"></a>屏幕坐标系</h3><ol><li>屏幕和窗口都是以坐标确定位置的</li><li>屏幕左上角为坐标原点</li><li>屏幕左上角向右为 x 轴正向</li><li>屏幕左上角向下为 y 轴正向</li><li>窗口在屏幕中的位置坐标是以窗口左上角位置确定的</li></ol><h3 id="将窗口移动到屏幕中心"><a href="#将窗口移动到屏幕中心" class="headerlink" title="将窗口移动到屏幕中心"></a>将窗口移动到屏幕中心</h3><p>窗口需要居中屏幕时 x 和 y的坐标应该为</p><ol><li>x = (屏幕宽度 - 窗口宽度) / 2</li><li>y = (屏幕高度 - 窗口宽度) / 2</li></ol><p>移动到中心的方法</p><table><thead><tr><th>方法</th><th>调用对象</th><th>方法说明</th></tr></thead><tbody><tr><td>screenGeometry()</td><td>QDesktopWidget()</td><td>获取屏幕尺寸</td></tr><tr><td>geometry()</td><td>QWidget()</td><td>获取窗口尺寸</td></tr><tr><td>move(x, y)</td><td>QWidget()</td><td>移动到指定的位置</td></tr></tbody></table><p>移动窗口的核心代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取屏幕尺寸</span></span><br><span class="line">screen = QDesktopWidget().screenGeometry()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取窗口尺寸</span></span><br><span class="line">size = window.geometry()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动到屏幕中心</span></span><br><span class="line">window.move((screen.width() - size.width()) / <span class="number">2</span>,</span><br><span class="line">            (screen.height() - size.height()) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="气泡提示"><a href="#气泡提示" class="headerlink" title="气泡提示"></a>气泡提示</h3><p>在界面设计的时候常常会用到的一个提示气泡，只要对任意一个 widget 设置一个属性就可以做到：<code>setToolTip(msg)</code></p><blockquote><p>msg就是你要设置的气泡提示</p></blockquote><h3 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h3><h4 id="QLabel"><a href="#QLabel" class="headerlink" title="QLabel"></a>QLabel</h4><p>QLabel 可以显示不可编辑的文本或图片，也可以设置一个 gif 动画</p><p>QFont 用来设置字体样式和字体大小</p><p>常用方法：</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>__init__(str, parent: <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtwidgets/qwidget.html">QWidget</a> = None, flags: Union[<a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtcore/qt-windowflags.html">WindowFlags</a>, <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtcore/qt.html#WindowType">WindowType</a>] = Qt.WindowFlags())</td><td>初始化方法，str 也可以不传，初始化之后设置也可以</td></tr><tr><td>setText(str)</td><td>设置文本内容</td></tr><tr><td>setFont(QFont)</td><td>设置字体样式和大小</td></tr><tr><td>setPixmap(QPixmap)</td><td>设置图片</td></tr></tbody></table><h4 id="文本框控件"><a href="#文本框控件" class="headerlink" title="文本框控件"></a>文本框控件</h4><h5 id="QLineEdit"><a href="#QLineEdit" class="headerlink" title="QLineEdit"></a>QLineEdit</h5><p>QLineEdit 是单行文本框控件</p><p>常用方法：</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>setEchoMode(EchoMode)</td><td>QLineEdit.Normal 正常显示所输入字符<br />QLineEdit.NoEcho 不显示任何输入的字符<br />QLineEdit.Password 显示与平台相关的密码掩码字符<br />QLineEdit.PasswordEchoOnEdit 在编辑时显示字符，负责显示密码类型的输入</td></tr><tr><td>setPlaceholderText(str)</td><td>设置文本框占位文字，即当有文字输入时，该文字会消失</td></tr><tr><td>setText(str)</td><td>设置文本框内容</td></tr><tr><td>setMaxLength(int)</td><td>设置文本框所允许输入的最大字符数</td></tr></tbody></table><h5 id="QTextEdit"><a href="#QTextEdit" class="headerlink" title="QTextEdit"></a>QTextEdit</h5><p>QTextEdit 是多行文本框控件</p><ol><li>QTextEdit 可以显示多行文本内容，当文本内容超过控件范围时，会显示水平或者竖直的滚动条</li><li>QTextEdit 不仅可以显示文本，还可以显示 HTML 文档</li></ol><p>常用方法</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>setPlainText(str)</td><td>设置多行文本框的文字内容</td></tr><tr><td>toPlainText() → str</td><td>返回多行文本框的文字内容</td></tr><tr><td>setHtml(str)</td><td>设置文本框的内容为 HTML 文档</td></tr><tr><td>toHtml() → str</td><td>返回多行文本框的 HTML 文档内容</td></tr><tr><td>clear()</td><td>清空多行文本框内容</td></tr></tbody></table><h4 id="按钮控件"><a href="#按钮控件" class="headerlink" title="按钮控件"></a>按钮控件</h4><h5 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h5><p>信号和槽机制是 QT 的核心机制，它是一种高级接口，应用于对象之间的通信，它是 QT 的核心特性</p><p>信号和槽是用来在对象间传递数据的方法：当一个特定事件发生的时候，<code>signal</code> 会被<code>emit</code>出来，<code>slot</code>调用是用来响应对应的 <code>signal</code>的</p><blockquote><p>Qt 对象已经包含了很多预定义的 signal，Qt 对象也包含了很多预定义的槽函数</p></blockquote><h6 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h6><ul><li>当对象的状态发生改变的时候，信号就由该对象发射出去</li><li>当一个信号被发射、与其关联的槽函数被立刻执行，发射该信号的对象并不知道是哪个在接收在这个信号。再这样保证了对象与对象之间的低耦合。</li><li>如果信号和多个槽函数相关联，当信号被发射时，这些槽函数的执行顺序将会是随机的，不确定的。</li></ul><h6 id="槽"><a href="#槽" class="headerlink" title="槽"></a>槽</h6><ul><li>用于接收信号，而且槽只是普通的成员函数。当和槽连接的信号被发射时，槽就会被调用。</li><li>一个槽并不知道时候有任何信号与自己相连。</li></ul><h6 id="信号和槽的绑定"><a href="#信号和槽的绑定" class="headerlink" title="信号和槽的绑定"></a>信号和槽的绑定</h6><p>通过调用 <code>QObject</code> 对象的 <code>connect</code> 函数来将对象的信号与另外一个对象的槽函数相关联，当发射者发射信号时，接受者的槽函数将被调用。</p><blockquote><ol><li><p>信号和槽连接通过 <code>connect</code> 方法</p></li><li><p>槽函数可以是成员方法或者 lambda 表达式</p></li></ol></blockquote><h5 id="QPushButton"><a href="#QPushButton" class="headerlink" title="QPushButton"></a>QPushButton</h5><p>QPushButton是一种普通的按钮，可以响应一些事件</p><h5 id="QRadionButton"><a href="#QRadionButton" class="headerlink" title="QRadionButton"></a>QRadionButton</h5><p>QRadionButton是单选按钮，它提供了一组可供选择的按钮和文本标签，用户可以选择其中一个选项</p><p>标签用于显示对应的文本信息</p><p>单选框选中的信号时：<code>toggled</code></p><h5 id="QCheckBox"><a href="#QCheckBox" class="headerlink" title="QCheckBox"></a>QCheckBox</h5><p>QCheckBox 提供一组带文本标签的复选框，用户可以选择多个选项</p><p>复选框选中的信号也为：<code>toggled</code></p><h4 id="对话框控件"><a href="#对话框控件" class="headerlink" title="对话框控件"></a>对话框控件</h4><p>对话框是为了更好的实现人与程序的交互</p><h5 id="QMessageBox"><a href="#QMessageBox" class="headerlink" title="QMessageBox"></a>QMessageBox</h5><p>reply = QMessageBox.information()</p><p>reply = QMessageBox.question()</p><p>两个提示框参数一模一样，唯一的差别就是提示框上显示的图片不一样</p><h5 id="QInputDialog"><a href="#QInputDialog" class="headerlink" title="QInputDialog"></a>QInputDialog</h5><p>QInputDialog是一个标准对话框，由一个文本框和两个按钮(OK按钮和 Cancel 按钮组成)</p><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p>一个窗口中可以有多个控件，所谓布局，就是将多个控件按我们需要的方式展示出来</p><p>布局大致可以分为：绝对布局，水平布局，竖直布局，网格布局，表单布局。</p><h5 id="布局方法"><a href="#布局方法" class="headerlink" title="布局方法"></a>布局方法</h5><ol><li>布局中可以添加控件，使用 <code>addWidget()</code> 方法</li><li>布局中可以添加布局，使用 <code>addLayout()</code>方法</li></ol><h5 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h5><p>绝对布局就是通过在窗口程序中指定每一个控件的显示坐标和大小来实现的</p><ol><li>优点：<ul><li>可以直接定位每一个控件的位置</li></ul></li><li>缺点<ul><li>如果改变窗口大小，控件的大小和位置不会随之改变</li><li>如果修改布局，比如新增一个控件，必须全部重新布局，很繁琐</li></ul></li></ol><h5 id="水平布局"><a href="#水平布局" class="headerlink" title="水平布局"></a>水平布局</h5><p>在水平布局中，按照从左往右的顺序添加控件。使用 QHBoxLayout 进行布局</p><h5 id="竖直布局"><a href="#竖直布局" class="headerlink" title="竖直布局"></a>竖直布局</h5><p>在竖直布局中，按照从上往下的方式添加控件。使用 QVBoxLayout 进行布局</p><h5 id="表单布局"><a href="#表单布局" class="headerlink" title="表单布局"></a>表单布局</h5><p>表单布局是 <code>label-field</code> 式的表单布局，顾名思义，就是实现表单方式的布局，添加控件的方法为<code>addRow(label, widget)</code></p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础2</title>
      <link href="/2019/cc28d4d3.html"/>
      <url>/2019/cc28d4d3.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>所谓函数，就是把一个具有独立功能的代码块组织成一个整体，在需要的时候调用。</p><p>函数的使用一般包含两个步骤：</p><ol><li>定义函数：在函数中编写代码、实现功能</li><li>调用函数：执行编写的代码</li></ol><p>好的函数，可以提高代码编写的效率，以及代码的复用性。</p><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名():</span></span><br><span class="line">  执行的代码    </span><br></pre></td></tr></table></figure><p>函数的定义规范：</p><ol><li><code>def</code>是<code>define</code>的缩写</li><li>函数的名称应该能简单明确的表明函数的功能，比如 <code>min()</code>很清晰的表达了该函数就是用来求最小值的</li><li>函数名称的命名应该符合标识符的命名规则：<ul><li>只能由<code>字母</code>、<code>数字</code>和<code>下划线</code>组成</li><li>不能以数字开头</li><li>不能跟关键字重名</li></ul></li></ol><h3 id="函数的执行过程"><a href="#函数的执行过程" class="headerlink" title="函数的执行过程"></a>函数的执行过程</h3><ol><li>代码执行到函数定义时，不会走到函数的内部，只是将该函数名作为一个标识符，添加到内存中</li><li>当调用函数时，才会从内存中去查询该函数，并执行函数内部的相关代码</li></ol><a id="more"></a> <h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>函数的参数，可以在调用函数时传递给函数内部进行使用，参数的作用就是为了增加函数的通用型，增强函数的功能。</p><h4 id="参数的定义以及调用格式"><a href="#参数的定义以及调用格式" class="headerlink" title="参数的定义以及调用格式"></a>参数的定义以及调用格式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数</span>):</span></span><br><span class="line">  执行的代码</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用</span></span><br><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><h4 id="函数参数可以用多个"><a href="#函数参数可以用多个" class="headerlink" title="函数参数可以用多个"></a>函数参数可以用多个</h4><p>在函数定义的时候，可以有多个参数传递，同时也接收多个参数</p><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p><strong>形参</strong>的全称为“形式参数”，由于它不是实际存在的变量，所以又称为<strong>虚拟变量</strong>。形参就是在函数被调用的时候用来接收实参的数据的变量</p><p><strong>实参</strong>全称为“实际参数”，是在调用时传递给函数的参数。</p><blockquote><ol><li>在调用函数时，实参将赋值给形参。因而，必须注意实参的个数、类型与形参一一对应，并且实参必须要有确定的值</li><li>实参可以是常量、变量、表达式、函数等，无论实参是何种类型，在函数进行调用的时候，它们都必须有一个具体确定的值。</li></ol></blockquote><h5 id="形参的作用域"><a href="#形参的作用域" class="headerlink" title="形参的作用域"></a>形参的作用域</h5><blockquote><p>​    作用域，通常来说，一段程序代码中所用到的名字并不中是有效、可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域</p></blockquote><ul><li>形参的作用域只在定义函数的代码块中，一旦超出该范围就不能继续使用了</li><li>不同的函数中，可以使用相同的形参名，不会相互影响</li><li>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突</li><li>函数间的形参是不能相互使用的</li></ul><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><p>在实际开发中，有时候我们希望一段函数在执行结束后，能告诉调用者一个结果，以便调用者根据这个结果进行下一步的处理。</p><p>在函数中我们使用 <code>return</code> 关键字来返回结果，调用函数的一方，可以使用变量来接收函数的返回结果</p><h4 id="函数的四种类型"><a href="#函数的四种类型" class="headerlink" title="函数的四种类型"></a>函数的四种类型</h4><ol><li>无参数，无返回值</li><li>无参数，有返回值</li><li>有参数，无返回值</li><li>有参数，有返回值</li></ol><h4 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h4><p>在一个函数内，我们又调用了另一个函数，这就是函数的嵌套调用。</p><h4 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h4><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><ul><li>局部变量就是定义在函数内部的变量</li><li>在不同的函数中，可以定义相同的名字的局部变量，但是各用个的不会产生影响</li><li>局部变量的作用域只在该函数内部</li><li>局部变量的目的是为了存储需要临时保存的数据</li></ul><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><ul><li>全局变量是定义在所以函数外的变量</li><li>全局变量在整个 py 文件中都可以访问的</li><li>函数内修改全局变量之前需要用 <code>global</code>进行声明，否则会出错</li></ul><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul><li>模块是 Python 程序框架中一个核心概念</li><li>模块就好比是工具包，要想使用该工具包中的工具，就需要用 <code>import</code>来导入整个模块</li><li>每一个以.py 结尾的 Python 源代码文件都是一个模块</li><li>在模块中定义的全局变量、函数都是模块能提供给外界直接使用的工具</li></ul><h3 id="模块的命名规则"><a href="#模块的命名规则" class="headerlink" title="模块的命名规则"></a>模块的命名规则</h3><ol><li>只能由字母、数字和下划线组成</li><li>不能以数字开头</li><li>不能以关键字重名</li></ol><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>函数可以作为函数的参数，也可以作为函数的返回值，这就是函数式编程。</p><p>常见的编程范式：</p><ol><li>OOP 面向对象编程</li><li>FP 函数式编程</li><li>POP 面向过程编程</li></ol><p>Python支持函数式编程，支持高阶函数和 lambda 表达式</p><h3 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h3><p>lambda也称为匿名函数，这种函数得名于省略了用 def 声明函数的标准步骤</p><p>用法：</p><p><code>lambda 参数: 表达式</code></p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高级函数的意思就是把函数当成参数传递的一种函数。</p><p>Python 系统内置的高阶函数有：</p><ol><li>sort()</li><li>map()</li><li>filter()</li><li>reduce()</li></ol><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>定义：</p><p><code>sort(*, key=None, reverse=False)</code></p><p>该函数根据 key 中的函数来进行排序</p><p>eg:</p><p>q：元素按长度从小到大排序</p><p>a：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">&quot;abd&quot;</span>, <span class="string">&quot;dsad&quot;</span>, <span class="string">&quot;ds&quot;</span>, <span class="string">&quot;fafas&quot;</span>,<span class="string">&quot;dasdsad&quot;</span>]</span><br><span class="line">l.sort(key=<span class="keyword">lambda</span> item: len(item))</span><br><span class="line">print(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台打印如下</span></span><br><span class="line">[<span class="string">&#x27;ds&#x27;</span>, <span class="string">&#x27;abd&#x27;</span>, <span class="string">&#x27;dsad&#x27;</span>, <span class="string">&#x27;fafas&#x27;</span>, <span class="string">&#x27;dasdsad&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>定义：</p><p><code>map(function, iterable, ...)</code></p><p>该函数将每个 iterable 进行 funtion 中的操作</p><p>q：将列表中的元素编程它的平方</p><p>a：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">l = map(<span class="keyword">lambda</span> item: item ** <span class="number">2</span>, l)</span><br><span class="line">print(list(l))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台打印如下</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>定义：</p><p><code>filter(function, iterable)</code></p><p>该函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>q：找出列表中所有的 1</p><p>a：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">l = filter(<span class="keyword">lambda</span> item: item == <span class="number">1</span>, l)</span><br><span class="line">print(list(l))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台打印如下</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>定义：</p><p><code>reduce(function, iterable[, initializer])</code></p><p>该函数会对参数序列中元素进行累积</p><p>q：求列表所有元素的和</p><p>a：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> *</span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">l = reduce(<span class="keyword">lambda</span> x, y: x + y, l)</span><br><span class="line">print(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台打印如下</span></span><br><span class="line"><span class="number">45</span></span><br></pre></td></tr></table></figure><blockquote><p>注意在 Python3 中移除了 reduce，需要在 functools 包中导入才能使用</p></blockquote><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><ul><li><p>切片就是根据步长从原序列中取出一部分元素组成的新序列</p></li><li><p>切片只适用于字符串、列表、元组</p></li><li><p>切片的格式：<code>需要切片的元素[开始索引:结束索引:步长]</code></p></li><li><p>切片的注意事项：</p><ol><li>指定的区间属于左闭右开区间，包括开始索引，不包括结束索引</li><li>步长默认为 1，可以省略</li><li>步长也可以是负数，代表了逆序切片</li><li>从头开始，开始索引可以省略，冒号不能省略</li><li>到末尾结束，结束索引可以省略，冒号不能省略</li></ol></li></ul><p>🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 123456789 切出 123</span></span><br><span class="line">str1 = <span class="string">&quot;123456789&quot;</span></span><br><span class="line">str1 = str1[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="number">123</span>    </span><br></pre></td></tr></table></figure><blockquote><p> 我们正常使用的即为正序索引，倒序索引指的是从右往左计算索引，最右边的索引值为-1，依次递减</p></blockquote><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><h3 id="列表的推导式"><a href="#列表的推导式" class="headerlink" title="列表的推导式"></a>列表的推导式</h3><p>所谓列表的推导式，就是指轻量级循环创建列表</p><p>列表推导式的格式如下：</p><p><code>l = [计算公式 for 循环 if 判断]</code></p><p>🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个1 到 100 数据的数组</span></span><br><span class="line">l = [item <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>)]</span><br></pre></td></tr></table></figure><h3 id="集合的推导式"><a href="#集合的推导式" class="headerlink" title="集合的推导式"></a>集合的推导式</h3><p>所谓集合的推导式，就是指轻量级循环创建集合</p><p>列表推导式的格式如下：</p><p><code>l = &#123;计算公式 for 循环 if 判断&#125;</code></p><p>🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个1 到 100 数据的集合</span></span><br><span class="line">l = &#123;item <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="字典的推导式"><a href="#字典的推导式" class="headerlink" title="字典的推导式"></a>字典的推导式</h3><p>所谓字典的推导式，就是指轻量级循环创建字典</p><p>列表推导式的格式如下：</p><p><code>l = &#123;key: value for 循环 if 判断&#125;</code></p><p>🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 &#123;1:1, 2:2, ..., 100,100&#125; 的字典</span></span><br><span class="line">l = &#123;item:item <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>)&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型之间的转换"><a href="#数据类型之间的转换" class="headerlink" title="数据类型之间的转换"></a>数据类型之间的转换</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x, [base])</td><td>将 x按照 base 进制转换为整型，默认 10 进制</td></tr><tr><td>float(x)</td><td>将 x转换为一个浮点数</td></tr><tr><td>str(x)</td><td>将 x 转换为一个字符串</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>将序列 s 转换为一个可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典</td></tr><tr><td>frozenset(s)</td><td>将序列 s 转换为一个不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为一个整数</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个 16 进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个 8 进制字符串</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础1</title>
      <link href="/2019/55218569.html"/>
      <url>/2019/55218569.html</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><ol><li>只能有数字，字母，下划线（_）组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ol><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ol><li>下划线命名法  <ul><li><code>my_first_name</code></li><li><code>my_last_name</code></li></ul></li><li>驼峰命名法<ol><li>大驼峰<ul><li><code>MyFirstName</code></li><li><code>MyLastName</code></li></ul></li><li>小驼峰<ul><li><code>myFirstName</code></li><li><code>myLastName</code></li></ul></li></ol></li></ol><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>变量类型分为：<strong>数值型</strong>和<strong>非数值型</strong></p><h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">int</td><td align="left">整型</td></tr><tr><td align="left">float</td><td align="left">浮点型</td></tr><tr><td align="left">bool</td><td align="left">布尔型</td></tr><tr><td align="left">complex</td><td align="left">复数型</td></tr></tbody></table><a id="more"></a> <h4 id="非数值型"><a href="#非数值型" class="headerlink" title="非数值型"></a>非数值型</h4><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>str</td><td>字符串</td></tr><tr><td>list</td><td>列表</td></tr><tr><td>tuple</td><td>元组</td></tr><tr><td>set</td><td>集合</td></tr><tr><td>dict</td><td>字典</td></tr></tbody></table><h4 id="变量类型的特征和获取"><a href="#变量类型的特征和获取" class="headerlink" title="变量类型的特征和获取"></a>变量类型的特征和获取</h4><p>在Python中定义变量不需要指定数据类型，变量的类型可以在使用过程中随时变化，以最后一次<code>=</code>操作为准</p><blockquote><p>当我们需要获取该变量的类型的时候，可以使用 <code>type</code>获取当前变量的类型</p></blockquote><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>//</td><td>取整除</td></tr><tr><td>%</td><td>取余数</td></tr><tr><td>**</td><td>幂</td></tr></tbody></table><h4 id="不同变量类型之间的运算"><a href="#不同变量类型之间的运算" class="headerlink" title="不同变量类型之间的运算"></a>不同变量类型之间的运算</h4><ol><li><strong>数值型变量</strong>之间可以直接计算</li><li><strong>字符串</strong>之间使用<code>+</code>拼接字符串</li><li><strong>字符串变量</strong>和<strong>整型</strong>使用<code>*</code>重复拼接相同的字符串</li><li><strong>数值型变量</strong>和<strong>字符串</strong>不能进行其他计算</li></ol><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>赋值</td></tr><tr><td>+=</td><td>加等于(<code>a += b</code>等同于<code>a = a + b</code>)</td></tr><tr><td>-=</td><td>减等于(<code>a -= b</code>等同于<code>a = a - b</code>)</td></tr><tr><td>*=</td><td>乘等于(<code>a *= b</code>等同于<code>a = a * b</code>)</td></tr><tr><td>/=</td><td>除等于(<code>a /= b</code>等同于<code>a = a / b</code>)</td></tr><tr><td>//=</td><td>整除等于(<code>a //= b</code>等同于<code>a = a // b</code>)</td></tr><tr><td>%=</td><td>模等于(<code>a %= b</code>等同于<code>a = a % b</code>)</td></tr><tr><td>**=</td><td>幂等于(<code>a **= b</code>等同于<code>a = a ** b</code>)</td></tr></tbody></table><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td></tr><tr><td>or</td><td>逻辑或</td></tr><tr><td>not</td><td>逻辑非</td></tr></tbody></table><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><ol><li>单目运算符：只需要一个数据运算的运算符，比如 not</li><li>双目运算符：需要两个数据运算的运算符</li><li>总的来说：单目运算符的优先级高于双目运算符</li></ol><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>幂（最高优先级）</td></tr><tr><td>* / % //</td><td>乘、除、取余数、取整除</td></tr><tr><td>+ -</td><td>加、减</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>== !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>not or and</td><td>逻辑运算符</td></tr></tbody></table><h2 id="输入输出操作"><a href="#输入输出操作" class="headerlink" title="输入输出操作"></a>输入输出操作</h2><h3 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h3><ol><li>普通输出</li><li>格式化输出</li></ol><p><code>print()</code>函数</p><h4 id="格式化输出格式"><a href="#格式化输出格式" class="headerlink" title="格式化输出格式"></a>格式化输出格式</h4><table><thead><tr><th>格式化字符串</th><th>含义</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>有符号的十进制整数，%06d表示不足 6 位以 0 补齐</td></tr><tr><td>%f</td><td>浮点数，%.2f 表示小数后只显示两位</td></tr><tr><td>%%</td><td>输出%</td></tr></tbody></table><p>###输入函数</p><p>获取用户从键盘上输入的信息，需要使用 <code>input</code>函数，不管用户输入了任何内容，Python 都会认为是一个<strong>字符串</strong></p><h4 id="转换输入函数"><a href="#转换输入函数" class="headerlink" title="转换输入函数"></a>转换输入函数</h4><p>使用强制转换来使得用户输入的字符串转换为我们需要的数据类型</p><ol><li><code>float()</code>转换为浮点类型</li><li><code>int()</code>转换为整型</li></ol><h2 id="条件控制语句if"><a href="#条件控制语句if" class="headerlink" title="条件控制语句if"></a>条件控制语句if</h2><ul><li><p>程序满足特定的条件才能执行的特定代码</p></li><li><p>条件控制语句使用 <code>if</code> 关键字</p></li></ul><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件为真时，要做的事情</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  条件为假时，要做的事情</span><br></pre></td></tr></table></figure><p><code>if...elif...else</code> 格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>为真时，要做的事情</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">1</span>为假且条件<span class="number">2</span>为真时，要做的事情</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    以上条件均为假时，要做的事情</span><br></pre></td></tr></table></figure><h4 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h4><p>在实际开发中，有多个条件判断的需求，就需要使用 if 嵌套</p><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">  <span class="keyword">if</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">1</span>，条件<span class="number">2</span>均为真时，要做的事情</span><br></pre></td></tr></table></figure><h2 id="循环控制语句-while和-for"><a href="#循环控制语句-while和-for" class="headerlink" title="循环控制语句 while和 for"></a>循环控制语句 while和 for</h2><p>循环的作用就是让代码执行指定的重复的代码</p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while循环 主要用在遍历指定次数的时候使用</p><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">  条件为真时，要做的事情</span><br><span class="line">  ...</span><br><span class="line">  修改条件</span><br></pre></td></tr></table></figure><p>条件主要控制循环何时结束，注意如果条件一直不能为假，则该循环就为死循环，死循环会一直执行该重复的指令，无法终止。</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环 主要用在遍历容器类中的元素的时候使用</p><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 容器:</span><br><span class="line">  循环满足条件需要执行的代码</span><br></pre></td></tr></table></figure><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p><code>range()</code>可以理解为数学中左闭右开的区间，常常使用在 for 语句中</p><h3 id="break-和-continue语句"><a href="#break-和-continue语句" class="headerlink" title="break 和 continue语句"></a>break 和 continue语句</h3><p><code>break</code>语句和 <code>continue</code>语句是专门在循环中使用的关键字</p><ol><li>当某一条件满足时，执行了 break 语句，这层循环将不在进行，会直接退出当层循环（后面会讲到循环嵌套，break 只会跳出一层循环）</li><li>当某一条件满足时，执行了 continue 语句，会直接跳过该次循环，直接到下一次循环中（在循环嵌套中，同样只会跳到该层循环的下次循环中，其他层次的循环不会受到影响）</li></ol><h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><p>循环嵌套的意思就是循环中还有循环</p><h3 id="循环结合-else"><a href="#循环结合-else" class="headerlink" title="循环结合 else"></a>循环结合 else</h3><p>循环后面跟了一个 else 语句，该语句会在循环正常结束后执行，但是如果循环是通过 <code>break语句</code>进行结束的，该 else 中的语句就不会执行了</p><h2 id="高级数据类型"><a href="#高级数据类型" class="headerlink" title="高级数据类型"></a>高级数据类型</h2><p>所有的<code>非数值型变量</code>都有以下特点：</p><ol><li>都是一个序列 <code>sequence</code>，也可以理解为容器</li><li>都可以取值[0] （集合除外）</li><li>都可以用 <code>for ... in ...</code> 遍历</li><li>计算长度、最大/最小值、比较、删除</li><li>连接<code>+</code>和重复<code>*</code></li><li>切片</li></ol><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>字符串就是一串字符，是编程语言中表示文本的数据类型</li><li>在Python 中可以使用<code>一对双引号 &quot;&quot; </code>或<code>一对单引号 &#39;&#39; </code>来定义一个字符串<ul><li>虽然有转义字符帮助我们转义<code>&quot;</code>和<code>&#39;</code>，但是在开发中<ul><li>在字符串内部有使用<code>&quot;</code>的需求，一般使用<code>&#39;</code>来定义字符串</li><li>在字符串内部有使用<code>&#39;</code>的需求，一般使用<code>&quot;</code>来定义字符串</li></ul></li></ul></li><li>可以使用索引来获取字符串指定位置的字符，索引从 0 开始</li></ul><p>Python 中可以使用多行字符串，多行字符串的定义方式与多行注释的方式一致，使用三个<code>&quot;&quot;&quot;</code>进行定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是一个多行字符串的🌰</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><h5 id="判断操作"><a href="#判断操作" class="headerlink" title="判断操作"></a>判断操作</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>isalpha()</td><td>如果一个字符串所有字符都是字母的时候，返回 True</td></tr><tr><td>isdecimal()</td><td>如果一个字符串所有字符都是数字的时候，返回 True</td></tr><tr><td>islower()</td><td>如果一个字符串所有字符都是小写字母的时候，返回 True</td></tr><tr><td>isupper()</td><td>如果一个字符串所有字符都是大写字母的时候，返回 True</td></tr><tr><td>startwith(str)</td><td>检查一个字符串是以 str 开头的时候，返回 True</td></tr><tr><td>endswith(str)</td><td>检查一个字符串是以 str 结尾的时候，返回 True</td></tr></tbody></table><h5 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>find(str, start = 0, end = len(string))</td><td>查找 str 是否在这个字符串中，如果在则返回开始的索引值，查不到则返回-1</td></tr><tr><td>rfind(str, start = 0, end = len(string))</td><td>类似find()，但是是从右边开始查找</td></tr><tr><td>index(str, start = 0, end = len(string))</td><td>跟find()类似，但是查不到会抛出异常</td></tr><tr><td>rindex(str, start = 0, end = len(string))</td><td>跟rfind()类似，但是是从右边开始查找</td></tr><tr><td>replace(old_str, new_str, num=string.count(old))</td><td>返回一个新的字符串，把 old_str 替换成 new_str</td></tr></tbody></table><h5 id="拆分和连接"><a href="#拆分和连接" class="headerlink" title="拆分和连接"></a>拆分和连接</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>partition(str)</td><td>返回一个元组，把字符串根据 str 分隔成 3 元素的元组</td></tr><tr><td>rpartition(str)</td><td>类似partition()，但是是从右边开始查找</td></tr><tr><td>split(str, num)</td><td>根据 str 分隔字符串到一个列表中，num 是分隔的次数</td></tr><tr><td>splitlines()</td><td>返回列表，根据行分隔</td></tr><tr><td>string1 + string2</td><td>拼接两个字符串</td></tr><tr><td>join(seq)</td><td>返回一个字符串，以 str作为分隔符，将 seq 中所有元素合并成一个新的字符串</td></tr></tbody></table><h5 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>lower()</td><td>将所有字符转化为小写</td></tr><tr><td>upper()</td><td>将所有字符转化为大写</td></tr></tbody></table><h5 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>ljust(width)</td><td>返回一个新字符串，在左边填充直到字符串长度为 width，默认填充空格</td></tr><tr><td>rjust(width)</td><td>返回一个新字符串，在右边填充直到字符串长度为 width，默认填充空格</td></tr><tr><td>center(width)</td><td>返回一个新字符串，在两边填充直到字符串长度为 width，默认填充空格</td></tr></tbody></table><h5 id="去除空白符"><a href="#去除空白符" class="headerlink" title="去除空白符"></a>去除空白符</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>lstrip()</td><td>返回新字符串，截掉左边的空白字符，或指定字符</td></tr><tr><td>rstrip()</td><td>返回新字符串，截掉右边的空白字符，或指定字符</td></tr><tr><td>strip()</td><td>返回新字符串，截掉两边的空白字符，或指定字符</td></tr></tbody></table><h3 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h3><p>list列表将是我们学习 Python 中使用最频繁的一个数据类型，该类型用来存储一串数据，存储的数据我们称之为<code>元素</code></p><h4 id="列表的定义"><a href="#列表的定义" class="headerlink" title="列表的定义"></a>列表的定义</h4><ol><li>列表用<code>[]</code>定义，元素之间用<code>,</code>分隔开即可</li><li>列表中可以有不同的数据类型，每个元素可以是任意类型</li></ol><h4 id="列表的访问"><a href="#列表的访问" class="headerlink" title="列表的访问"></a>列表的访问</h4><p>访问列表一般通过索引的方式，这里要注意的是，索引是从 0 开始的，即列表中的第一个元素的索引为 0</p><blockquote><p>当然，我们最常用的还是用循环去遍历列表中的元素，通过 for 和 while 都可以，建议使用 for，看起来会更加简洁，但是在一些需要知道索引的情况下，while 也不失为一种优秀的选择。while 的循环条件比 for 来的更加灵活</p></blockquote><h4 id="列表的操作"><a href="#列表的操作" class="headerlink" title="列表的操作"></a>列表的操作</h4><h5 id="增加操作"><a href="#增加操作" class="headerlink" title="增加操作"></a>增加操作</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>append(item)</td><td>在末尾追加item</td></tr><tr><td>insert(index, item)</td><td>在 index 位置插入 item</td></tr><tr><td>extend(Iterable)</td><td>将可迭代对象中的元素添加到列表中</td></tr></tbody></table><h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>del List(index)</td><td>删除List的指定 index 的元素</td></tr><tr><td>remove(item)</td><td>删除第一个出现的指定item</td></tr><tr><td>pop()</td><td>删除末尾数据，并返回被删除的元素</td></tr><tr><td>pop(index)</td><td>删除指定索引的元素，返回被删除的元素</td></tr><tr><td>clear()</td><td>清空列表</td></tr></tbody></table><h5 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h5><blockquote><p>List[index] = item    # 修改 List中指定 index 的元素为 item</p></blockquote><h5 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>List[index]</td><td>查询 List指定 index 的元素，index 不存在时将会抛出异常</td></tr><tr><td>index(item)</td><td>根据 item 查找指定 List 中的该 item 的位置，没查到的时候会抛出异常</td></tr><tr><td>count(item)</td><td>item在列表中出现的次数</td></tr><tr><td>len(List)</td><td>List 的长度</td></tr><tr><td>if item in List:</td><td>检查List 中是否包含 item</td></tr></tbody></table><h5 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>sort()</td><td>升序</td></tr><tr><td>sort(reverse = True)</td><td>降序</td></tr><tr><td>reverse()</td><td>逆序，反转</td></tr></tbody></table><h5 id="最值操作"><a href="#最值操作" class="headerlink" title="最值操作"></a>最值操作</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>max()</td><td>最大值</td></tr><tr><td>min()</td><td>最小值</td></tr></tbody></table><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>列表嵌套和上文讲到的循环嵌套类似，即在列表中还有列表，即列表的元素还是一个列表，这就是列表嵌套，在实际使用中经常出现，eg:<code>a = [[1,2,3],[4,5,6],[7,8,9]]</code>这就是一个简单的两个列表嵌套</p><h3 id="tuple-元组"><a href="#tuple-元组" class="headerlink" title="tuple 元组"></a>tuple 元组</h3><p>元组和列表类似，不同的地方在与元组不允许对内部的元素进行修改</p><ol><li>元素用()定义</li><li>用于存储一串数据，元素之间用<code>,</code>分隔</li><li>元组的索引从 0 开始</li><li>元组的类型：<code>tuple</code></li></ol><h4 id="元组的定义"><a href="#元组的定义" class="headerlink" title="元组的定义"></a>元组的定义</h4><p><code>info_tuple = (1, 2, 3, 4)</code></p><blockquote><p>注意，如果元组中只有一个元素的时候需要在后加一个<code>,</code></p><p>eg：</p><p>a = (10)  # 如果这样定义一个一元素元组是错误的，次数的 a 为 int 类型而不是tuple</p><p>a = (10,) #一元素元组的正确定义方式</p></blockquote><p><strong>元组最大的特点就是不能修改</strong></p><h4 id="元组的操作"><a href="#元组的操作" class="headerlink" title="元组的操作"></a>元组的操作</h4><p>元组的操作和数组的操作类似，只是没有数组的增加，删除，修改，排序操作。</p><h4 id="元素的使用场景"><a href="#元素的使用场景" class="headerlink" title="元素的使用场景"></a>元素的使用场景</h4><ol><li>作为自动组包的默认类型</li><li>自动解包</li><li>交换数据</li><li>格式化输出</li><li>让列表不可被修改，保护数据安全</li></ol><h3 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h3><p>集合是无序的，且集合中的元素是唯一的</p><p>集合一般用来对列表或元组进行去重操作，<strong>注意：如果用 set 进行了去重操作，列表或元组中的元素位置将变化，因为 set 是无序的</strong></p><blockquote><p>创建空集合的方式 set1 = set()</p></blockquote><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>add()</td><td>添加一个元素到集合中</td></tr><tr><td>update()</td><td>将传入数据拆分，然后添加到集合中</td></tr><tr><td>remove()</td><td>删除集合中一个元素，如果没有，程序抛出异常</td></tr><tr><td>pop()</td><td>随机删除一个元素，如果没有元素，程序将抛出异常</td></tr><tr><td>discard()</td><td>元素存在直接删除，不存在不做任何操作</td></tr></tbody></table><h4 id="集合的交集、子集、超集、并集、异或、差集"><a href="#集合的交集、子集、超集、并集、异或、差集" class="headerlink" title="集合的交集、子集、超集、并集、异或、差集"></a>集合的交集、子集、超集、并集、异或、差集</h4><table><thead><tr><th>方法</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>s1.issubset(s2)</td><td>s1 &lt; s2</td><td>s1 是否是 s2 的子集</td></tr><tr><td>s1.issuperset(s2)</td><td>s1 &gt; s2</td><td>s1 是否是 s2 的超集</td></tr><tr><td>s1.union(s2)</td><td>s1 &amp; s2</td><td>s1 和 s2 的并集</td></tr><tr><td>s1.intersection(s2)</td><td>s1 &amp; s2</td><td>s1 和 s2 的交集</td></tr><tr><td>s1.difference(s2)</td><td>s1 - s2</td><td>s1 和 s2 的差集</td></tr><tr><td>s1.symmetric_difference(s2)</td><td>s1 ^ s2</td><td>s1 和 s2 的异或</td></tr></tbody></table><h3 id="dict-字典"><a href="#dict-字典" class="headerlink" title="dict 字典"></a>dict 字典</h3><p>dict 是除列表以外 Python 中最灵活的数据类型</p><ul><li>字典可以用来存储多个数据</li><li>字典用<code>&#123;&#125;</code>定义</li><li>字典使用<code>键值对</code>存储数据，键值对之间的关系用<code>,</code>分隔<ul><li><code>键 key</code>是索引</li><li><code>值 value</code>是数据</li><li><code>键</code>和<code>值</code>用<code>:</code>进行分隔</li><li><code>值</code>可以是任何数据类型，但<code>键</code>只能是<code>字符串、数字或元组</code></li><li><code>键</code>必须唯一</li></ul></li></ul><h4 id="字典的操作"><a href="#字典的操作" class="headerlink" title="字典的操作"></a>字典的操作</h4><table><thead><tr><th>分类</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>增加</td><td>dict[key] = value</td><td>键不存在时，会添加键值对；键存在时，会修改键值对</td></tr><tr><td></td><td>dic.setdefault(key, value)</td><td>键不存在时，会添加键值对；键存在时，不做任何处理</td></tr><tr><td>删除</td><td>del dict[key]</td><td>删除指定键值对</td></tr><tr><td></td><td>dict.pop(key)</td><td>删除指定键值对，并返回被删除的值</td></tr><tr><td></td><td>dict.clear()</td><td>清空字典</td></tr><tr><td>修改</td><td>dict[key] = value</td><td>键不存在时，会添加键值对；键存在时，会修改键值对</td></tr><tr><td></td><td>dict.update(key=value)</td><td>键不存在时，会添加键值对；键存在时，会修改键值对</td></tr><tr><td>查询</td><td>dict[key]</td><td>根据键取出值，键不存在时，会抛出异常</td></tr><tr><td></td><td>dict.get(key)</td><td>根据键取出值，键不存在时，不会抛出异常</td></tr><tr><td></td><td>dict.keys()</td><td>可进行遍历，获取所有键</td></tr><tr><td></td><td>dict.values()</td><td>可进行遍历，获取所有值</td></tr><tr><td></td><td>dict.items()</td><td>可进行遍历，获取所有（键，值）</td></tr></tbody></table><h3 id="公共语法"><a href="#公共语法" class="headerlink" title="公共语法"></a>公共语法</h3><h4 id="Python-内置函数"><a href="#Python-内置函数" class="headerlink" title="Python 内置函数"></a>Python 内置函数</h4><table><thead><tr><th>函数</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del item</td><td>删除变量</td><td></td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td>字典只比较 key</td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td>字典只比较 key</td></tr></tbody></table><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td>+</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td>*</td><td>重复</td><td>字符串、列表、元组</td></tr><tr><td>in</td><td>是否存在（字典中判断键）</td><td>字符串、列表、元组、集合、字典</td></tr><tr><td>not in</td><td>是否不存在（字典中判断键）</td><td>字符串、列表、元组、集合、字典</td></tr><tr><td>&gt; &gt;= == &lt; &lt;=</td><td>比较</td><td>字符串、列表、元组</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
