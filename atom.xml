<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AskeyNil</title>
  
  
  <link href="https://www.askeynil.com/atom.xml" rel="self"/>
  
  <link href="https://www.askeynil.com/"/>
  <updated>2020-09-02T02:36:03.000Z</updated>
  <id>https://www.askeynil.com/</id>
  
  <author>
    <name>AskeyNil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ROS2 CLI Tools</title>
    <link href="https://www.askeynil.com/2020/ROS2-CLI-Tools.html"/>
    <id>https://www.askeynil.com/2020/ROS2-CLI-Tools.html</id>
    <published>2020-08-26T11:34:31.000Z</published>
    <updated>2020-09-02T02:36:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>系统版本：MacOS 10.15.6（官方写的是支持 10.14）</p><p>ROS版本：Foxy</p><p>shell：zsh</p><p>Mac：<code>MacBook Pro (13-inch, 2016, Four Thunderbolt 3 Ports)</code></p></blockquote><p>该文章总结了 ROS2 官网的 <a href="https://index.ros.org/doc/ros2/Tutorials/#beginner-cli-tools">CLI Tools</a> 介绍，如果需要更为详细的介绍请移步官网。且 Windows 不在文本讨论范围内。</p><p>本文主要介绍如下：</p><ol><li><a href="https://index.ros.org/doc/ros2/Tutorials/Configuring-ROS2-Environment/">配置 ROS2 环境</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Understanding-ROS2-Nodes/">ROS 2 nodes</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Topics/Understanding-ROS2-Topics/">ROS 2 topics</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Services/Understanding-ROS2-Services/">ROS 2 services</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Understanding-ROS2-Actions/">ROS 2 actions</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Parameters/Understanding-ROS2-Parameters/">ROS 2 parameters</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Launch-Files/Creating-Launch-Files/">创建 launch 文件</a></li><li><a href="https://index.ros.org/doc/ros2/Tutorials/Ros2bag/Recording-And-Playing-Back-Data/">记录和回放数据</a></li><li>ROS1 和 ROS2 命令行工具的差异</li></ol><p>全文篇幅可能较长，尽可能使用更精简的方式描述。</p><a id="more"></a><h2 id="配置-ROS2-环境"><a href="#配置-ROS2-环境" class="headerlink" title="配置 ROS2 环境"></a>配置 ROS2 环境</h2><h3 id="1-加载核心-ROS-配置文件"><a href="#1-加载核心-ROS-配置文件" class="headerlink" title="1.加载核心 ROS 配置文件"></a>1.加载核心 ROS 配置文件</h3><p>与 ROS1 一样，使用 ROS2 也需要加载 setup 配置文件</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. ~/ros2_foxy/ros2-osx/setup.zsh</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：我的 <code>shell</code> 是 <code>zsh</code>，请使用你对应的 <code>shell</code> 的 <code>setup</code>，且路径请以你安装路径为准。</p><h3 id="2-添加核心配置文件到-shell-的启动脚本中"><a href="#2-添加核心配置文件到-shell-的启动脚本中" class="headerlink" title="2. 添加核心配置文件到 shell 的启动脚本中"></a>2. 添加核心配置文件到 <code>shell</code> 的启动脚本中</h3><p>官网的做法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;. ~/ros2_foxy/ros2-osx/setup.zsh&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>我不太建议这种做法，如果是完全学习 ROS2，可以采取这种方式。这种方式的好处是你全局都可以使用 ROS2 的命令，坏处就是你也不知道何时你的其他程序会加载到 ROS2 环境中的库，然而实际情况这个库不是我想要的。所以我更建议下面这种方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;alias ros2_source=&#x27;. ~/ros2_foxy/ros2-osx/setup.zsh&#x27;&quot; &gt;&gt; ~/.zshrc    </span><br></pre></td></tr></table></figure><p>当我需要加载 ROS2 环境的时候，手动使用 <code>ros2_source</code> 命令即可。</p><h3 id="3-检查环境变量"><a href="#3-检查环境变量" class="headerlink" title="3. 检查环境变量"></a>3. 检查环境变量</h3><p>使用 <code>printenv | grep -i ROS</code> 命令查看当前的所有环境变量，如果设置正确至少应该会打印如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ROS_DISTRO=foxy</span><br><span class="line">ROS_PYTHON_VERSION=3</span><br><span class="line">ROS_VERSION=2</span><br></pre></td></tr></table></figure><p>设置 <code>ROS_DOMAIN_ID</code> 确保局域网不同域的 ROS 数据不会误访问，我使用的 id 为 2。官网要求该数字必须是 0-232 之间的整数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;export ROS_DOMAIN_ID=2&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="ROS-Node"><a href="#ROS-Node" class="headerlink" title="ROS Node"></a>ROS Node</h2><p><code>ROS Node</code> 包含的命令如下：  </p><ol><li>list</li><li>info</li></ol><blockquote><p>前提条件运行了如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. ~/ros2_foxy/ros2-osx/setup.zsh</span><br><span class="line">ros2 run turtlesim turtlesim_node</span><br></pre></td></tr></table></figure></blockquote><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>ros2 node list</code> 显示所有正在运行的节点。</p><p>当前运行 <code>ros2 node list</code> 显示如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/turtlesim</span><br></pre></td></tr></table></figure><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><p>用法：<code>ros2 node info &lt;node_name&gt;</code></p><p>例如当前有一个 <code>/turtlesim</code> 节点，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 node info /turtlesim</span><br></pre></td></tr></table></figure><p>显示的结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/turtlesim</span><br><span class="line">  Subscribers:</span><br><span class="line">    /parameter_events: rcl_interfaces/msg/ParameterEvent</span><br><span class="line">    /turtle1/cmd_vel: geometry_msgs/msg/Twist</span><br><span class="line">  Publishers:</span><br><span class="line">    /parameter_events: rcl_interfaces/msg/ParameterEvent</span><br><span class="line">    /rosout: rcl_interfaces/msg/Log</span><br><span class="line">    /turtle1/color_sensor: turtlesim/msg/Color</span><br><span class="line">    /turtle1/pose: turtlesim/msg/Pose</span><br><span class="line">  Service Servers:</span><br><span class="line">    /clear: std_srvs/srv/Empty</span><br><span class="line">    /kill: turtlesim/srv/Kill</span><br><span class="line">    /reset: std_srvs/srv/Empty</span><br><span class="line">    /spawn: turtlesim/srv/Spawn</span><br><span class="line">    /turtle1/set_pen: turtlesim/srv/SetPen</span><br><span class="line">    /turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute</span><br><span class="line">    /turtle1/teleport_relative: turtlesim/srv/TeleportRelative</span><br><span class="line">    /turtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters</span><br><span class="line">    /turtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes</span><br><span class="line">    /turtlesim/get_parameters: rcl_interfaces/srv/GetParameters</span><br><span class="line">    /turtlesim/list_parameters: rcl_interfaces/srv/ListParameters</span><br><span class="line">    /turtlesim/set_parameters: rcl_interfaces/srv/SetParameters</span><br><span class="line">    /turtlesim/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically</span><br><span class="line">  Service Clients:</span><br><span class="line"></span><br><span class="line">  Action Servers:</span><br><span class="line">    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute</span><br><span class="line">  Action Clients:</span><br></pre></td></tr></table></figure><p><strong>注：</strong><code>Subscribers</code>、<code>Publishers</code>、<code>Service Servers</code>、<code>Service Clients</code>、<code>Action Servers</code> 和 <code>Action Clients</code> 的含义后面再进行介绍。</p><h3 id="与-ROS1-的比较"><a href="#与-ROS1-的比较" class="headerlink" title="与 ROS1 的比较"></a>与 ROS1 的比较</h3><table><thead><tr><th>命令</th><th>ROS1</th><th>ROS2</th></tr></thead><tbody><tr><td>show</td><td><code>rosnode list</code></td><td><code>ros2 node list</code></td></tr><tr><td>list</td><td><code>rosnode show &lt;node_name&gt;</code></td><td><code>ros2 node show &lt;node_name&gt;</code></td></tr></tbody></table><p>使用起来几乎一致，但是有一些 ROS1 的命令 ROS2 没有，比如 <code>kill</code>、<code>ping</code>，在实际开发中这些命令也较少用到，不做讨论。</p><h2 id="ROS-Topic"><a href="#ROS-Topic" class="headerlink" title="ROS Topic"></a>ROS Topic</h2><table><thead><tr><th>命令</th><th>ROS1</th><th>ROS2</th><th>含义</th></tr></thead><tbody><tr><td><code>echo</code></td><td><code>rostopic echo /topic</code></td><td><code>ros2 topic echo /topic</code></td><td>打印某个 topic 的内容</td></tr><tr><td><code>find</code></td><td><code>rostopic find /topic</code></td><td><code>ros2 topic find /topic</code></td><td>查找使用某个 topic 的节点</td></tr><tr><td><code>info</code></td><td><code>rostopic info /topic</code></td><td><code>ros2 topic info /topic</code></td><td>显示某个 topic 的发布者和订阅者的数量</td></tr><tr><td><code>list</code></td><td><code>rostopic list</code></td><td><code>ros2 topic list</code></td><td>显示当前 topic 的清单</td></tr><tr><td><code>pub</code></td><td><code>rostopic pub /topic &quot;msg&quot;</code></td><td><code>ros2 topic pub /topic &quot;msg&quot;</code></td><td>发送消息到一个指定的 topic 中</td></tr></tbody></table><h2 id="ROS-Service"><a href="#ROS-Service" class="headerlink" title="ROS Service"></a>ROS Service</h2><table><thead><tr><th>命令</th><th>ROS1</th><th>ROS2</th><th>含义</th></tr></thead><tbody><tr><td><code>call</code></td><td><code>rosservice call /service_name /service_type [values]</code></td><td><code>ros2 service call /service_name /service_type [values]</code></td><td>给指定的服务端发送特定消息</td></tr><tr><td><code>find</code></td><td><code>rosservice find /service_type</code></td><td><code>ros2 service find /service_type</code></td><td>查找使用某个 Service 的节点</td></tr><tr><td><code>list</code></td><td><code>rosservice list</code></td><td><code>ros2 service list</code></td><td>显示当前 Service 的清单</td></tr></tbody></table><h2 id="ROS-Action"><a href="#ROS-Action" class="headerlink" title="ROS Action"></a>ROS Action</h2><p>在 ROS1 中 ros action 的 cli 不存在。故不作对比，使用方式与前面两者非常相似。</p><table><thead><tr><th>命令</th><th>ROS Foxy</th><th>含义</th></tr></thead><tbody><tr><td><code>info</code></td><td><code>ros2 action info /action_name</code></td><td>显示某个 action 中 client 和 server 的数量</td></tr><tr><td><code>list</code></td><td><code>ros2 action list</code></td><td>显示当前所有 action 的清单</td></tr><tr><td><code>send_goal</code></td><td><code>ros2 action send_goal /action_name /action_type [goal]</code></td><td>发送一个 goal 到指定 action 中</td></tr></tbody></table><h2 id="ROS-parameters"><a href="#ROS-parameters" class="headerlink" title="ROS parameters"></a>ROS parameters</h2><p><code>param</code> 参数是节点所需的配置设置，可以是整数，浮点数，布尔值，字符串或列表。在 ros2 中参数是基于 service 构建的。依旧用表格的方式描述 ROS1 和 ROS2 中参数设计的差异。<strong>注：</strong>ROS2 的参数是存储在节点中的，ROS1 的参数是存储在 ROS Master 中的，所有在使用的时候一般会有一个节点名称的差距。</p><table><thead><tr><th>命令</th><th>ROS1</th><th>ROS2</th><th>含义</th></tr></thead><tbody><tr><td><code>delete</code></td><td><code>rosparam delete /parameter_name</code></td><td><code>ros2 param delete /node_name /parameter_name</code></td><td>删除参数</td></tr><tr><td><code>dump</code></td><td><code>rosparam dump file [namespace]</code></td><td><code>ros2 param dump /node_name</code></td><td>保存参数</td></tr><tr><td><code>get</code></td><td><code>rosparam get /parameter_name</code></td><td><code>ros2 param get /node_name /parameter_name</code></td><td>获取参数</td></tr><tr><td><code>list</code></td><td><code>rosparam list</code></td><td><code>ros2 param list [node_name]</code></td><td>查看参数列表</td></tr><tr><td><code>set</code></td><td><code>rosparam set /parameter_name value</code></td><td><code>ros2 param set /node_name /parameter_name value</code></td><td>设置参数</td></tr></tbody></table><h2 id="ROS-Interface"><a href="#ROS-Interface" class="headerlink" title="ROS Interface"></a>ROS Interface</h2><p><code>interface</code> 是 ROS2 中将 ROS1 中的 <code>rosmsg</code> 和 <code>rossrv</code> 命令合并以后的命令，使用起来更为统一且简洁。先看看 <code>rosmsg</code> 和 <code>rossrv</code></p><ol><li>执行 <code>rosmsg -v</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rosmsg is a command-line tool for displaying information about ROS Message types.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">    rosmsg show    Show message description</span><br><span class="line">    rosmsg info    Alias for rosmsg show</span><br><span class="line">    rosmsg list    List all messages</span><br><span class="line">    rosmsg md5    Display message md5sum</span><br><span class="line">    rosmsg package    List messages in a package</span><br><span class="line">    rosmsg packages    List packages that contain messages</span><br><span class="line"></span><br><span class="line">Type rosmsg &lt;command&gt; -h for more detailed usage</span><br></pre></td></tr></table></figure><ol start="2"><li>执行 <code>rossrv -h</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rossrv is a command-line tool for displaying information about ROS Service types.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">    rossrv show    Show service description</span><br><span class="line">    rossrv info    Alias for rossrv show</span><br><span class="line">    rossrv list    List all services</span><br><span class="line">    rossrv md5    Display service md5sum</span><br><span class="line">    rossrv package    List services in a package</span><br><span class="line">    rossrv packages    List packages that contain services</span><br><span class="line"></span><br><span class="line">Type rossrv &lt;command&gt; -h for more detailed usage</span><br></pre></td></tr></table></figure><p>通过 <code>-h</code> 命令可以发现，这两个命令使用方式非常相似 ，结果相似也非常相似。我们在来看看<code>ros2 interface -h</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">usage: ros2 interface [-h] Call `ros2 interface &lt;command&gt; -h` for more detailed usage. ...</span><br><span class="line"></span><br><span class="line">Show information about ROS interfaces</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  list      List all interface types available</span><br><span class="line">  package   Output a list of available interface types within one package</span><br><span class="line">  packages  Output a list of packages that provide interfaces</span><br><span class="line">  proto     Output an interface prototype</span><br><span class="line">  show      Output the interface definition</span><br><span class="line"></span><br><span class="line">  Call `ros2 interface &lt;command&gt; -h` for more detailed usage.</span><br></pre></td></tr></table></figure><p><code>help</code> 中已经将用法讲的很清楚了，这里就不对比了。记录不同类型的打印结果。</p><ol><li><code>ros2 interface show std_msgs/msg/Int8</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> This was originally provided as an example message.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It is deprecated as of Foxy</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It is recommended to create your own semantically meaningful message.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> However <span class="keyword">if</span> you would like to <span class="built_in">continue</span> using this please use the equivalent <span class="keyword">in</span> example_msgs.</span></span><br><span class="line"></span><br><span class="line">int8 data</span><br></pre></td></tr></table></figure><ol start="2"><li><code>ros2 interface show std_srvs/srv/Empty</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><ol start="3"><li><code>ros2 interface show turtlesim/action/RotateAbsolute</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> The desired heading <span class="keyword">in</span> radians</span></span><br><span class="line">float32 theta</span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> The angular displacement <span class="keyword">in</span> radians to the starting position</span></span><br><span class="line">float32 delta</span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> The remaining rotation <span class="keyword">in</span> radians</span></span><br><span class="line">float32 remaining</span><br></pre></td></tr></table></figure><p><strong>注：</strong>msg、srv 和 action 消息的具体写法后面会在进行详细的介绍。 </p><h2 id="ROS-Launch"><a href="#ROS-Launch" class="headerlink" title="ROS Launch"></a>ROS Launch</h2><p>在 ROS1 中 lauch 使用 xml 格式定义，使用的内容相对比较有限。然而在 ROS2 中 launch 重新设计，采用 Python 脚本的形式进行启动，大致模板可以使用如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> launch <span class="keyword">import</span> LaunchDescription</span><br><span class="line"><span class="keyword">from</span> launch_ros.actions <span class="keyword">import</span> Node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_launch_description</span>():</span></span><br><span class="line">    <span class="keyword">return</span> LaunchDescription([</span><br><span class="line">        Node(</span><br><span class="line">            package=<span class="string">&quot;turtlesim&quot;</span>,</span><br><span class="line">            executable=<span class="string">&quot;turtlesim_node&quot;</span>,</span><br><span class="line">            name=<span class="string">&quot;sim&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p><code>LaunchDescription</code> 中传入了一个 <code>Node</code> 的数组，<code>Node</code>代表了所有的节点信息。参数的含义和使用列举如下：</p><table><thead><tr><th>参数名称</th><th>含义</th><th>类型</th><th>举例</th></tr></thead><tbody><tr><td><code>package</code></td><td>包名</td><td><code>str</code></td><td><code>turtlesim</code></td></tr><tr><td><code>executable</code></td><td>可执行文件的名称</td><td><code>str</code></td><td><code>turtlesim_node</code></td></tr><tr><td><code>name</code></td><td>节点名称</td><td><code>str</code></td><td><code>sim</code></td></tr><tr><td><code>namespace</code></td><td>工作空间名称</td><td><code>str</code></td><td><code>turtlesim1</code></td></tr><tr><td><code>parameters</code></td><td>参数列表</td><td><code>[path 或 Map(key, value)]</code></td><td><code>[&#123;&quot;background_r&quot;: 0&#125;]</code> 或 <code>[&quot;./sim.yaml&quot;]</code></td></tr><tr><td><code>remappings</code></td><td>映射名称</td><td><code>[tuple]</code></td><td><code>[(&#39;/turtlesim1/turtle1/pose&#39;, &#39;/turtlesim1/turtle1/pose_remap&#39;)]</code></td></tr></tbody></table><p>假设我们将之前的模板内容写入到 <code>turtlesim_start.launch.py</code> 中，在加载 ros 环境后，只需执行如下命令即可运行 <code>launch</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch turtlesim_start.launch.py</span><br></pre></td></tr></table></figure><p>终端大致打印内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [launch]: All log files can be found below /Users/askeynil/.ros/log/2020-09-02-19-33-18-140633-AskeyNildeMacBook-Pro.local-22416</span><br><span class="line">[INFO] [launch]: Default logging verbosity is set to INFO</span><br><span class="line">[INFO] [turtlesim_node-1]: process started with pid [22418]</span><br><span class="line">[turtlesim_node-1] [INFO] [1599046399.308158593] [sim]: Starting turtlesim with node name /_ros2cli_daemon_1</span><br><span class="line">[turtlesim_node-1] [INFO] [1599046399.342564206] [sim]: Spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000]</span><br></pre></td></tr></table></figure><h2 id="ROS-Bag"><a href="#ROS-Bag" class="headerlink" title="ROS Bag"></a>ROS Bag</h2><p>该命令可以指定录制一段时间内发送的 topic 数据，以便后面在查询问题的时候进行复现。</p><table><thead><tr><th>命令</th><th>ROS1</th><th>ROS2</th><th>含义</th></tr></thead><tbody><tr><td><code>info</code></td><td><code>rosbag info &lt;bag_file_name&gt;</code></td><td><code>ros2 bag info &lt;bag_file_name&gt;</code></td><td>查看 bag 中的详细内容</td></tr><tr><td><code>play</code></td><td><code>rosbag play &lt;bag_file_name&gt;</code></td><td><code>ros2 bag play &lt;bag_file_name&gt;</code></td><td>播放 bag 中的操作</td></tr><tr><td><code>record</code></td><td><code>rosbag record -O &lt;output_name&gt; [topics [topics ...]]</code></td><td><code>ros2 bag record -o &lt;output_name&gt; [topics [topics ...]]</code></td><td>录制指定 topic 操作</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;系统版本：MacOS 10.15.6（官方写的是支持 10.14）&lt;/p&gt;
&lt;p&gt;ROS版本：Foxy&lt;/p&gt;
&lt;p&gt;shell：zsh&lt;/p&gt;
&lt;p&gt;Mac：&lt;code&gt;MacBook Pro (13-inch, 2016, Four Thunderbolt 3 Ports)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该文章总结了 ROS2 官网的 &lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/#beginner-cli-tools&quot;&gt;CLI Tools&lt;/a&gt; 介绍，如果需要更为详细的介绍请移步官网。且 Windows 不在文本讨论范围内。&lt;/p&gt;
&lt;p&gt;本文主要介绍如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Configuring-ROS2-Environment/&quot;&gt;配置 ROS2 环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Understanding-ROS2-Nodes/&quot;&gt;ROS 2 nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Topics/Understanding-ROS2-Topics/&quot;&gt;ROS 2 topics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Services/Understanding-ROS2-Services/&quot;&gt;ROS 2 services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Understanding-ROS2-Actions/&quot;&gt;ROS 2 actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Parameters/Understanding-ROS2-Parameters/&quot;&gt;ROS 2 parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Launch-Files/Creating-Launch-Files/&quot;&gt;创建 launch 文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Ros2bag/Recording-And-Playing-Back-Data/&quot;&gt;记录和回放数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ROS1 和 ROS2 命令行工具的差异&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全文篇幅可能较长，尽可能使用更精简的方式描述。&lt;/p&gt;</summary>
    
    
    
    <category term="ROS" scheme="https://www.askeynil.com/categories/ROS/"/>
    
    <category term="Foxy" scheme="https://www.askeynil.com/categories/ROS/Foxy/"/>
    
    
    <category term="ROS2" scheme="https://www.askeynil.com/tags/ROS2/"/>
    
    <category term="CLI Tools" scheme="https://www.askeynil.com/tags/CLI-Tools/"/>
    
  </entry>
  
  <entry>
    <title>ROS2 Foxy 安装（基于 Mac OS 二进制）</title>
    <link href="https://www.askeynil.com/2020/ROS2-Foxy-macOS-Install-Binary.html"/>
    <id>https://www.askeynil.com/2020/ROS2-Foxy-macOS-Install-Binary.html</id>
    <published>2020-08-21T12:05:51.000Z</published>
    <updated>2020-08-26T11:31:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>系统版本：MacOS 10.15.6（官方写的是支持 10.14）</p><p>ROS版本：Foxy</p><p>shell：zsh</p><p>Mac：<code>MacBook Pro (13-inch, 2016, Four Thunderbolt 3 Ports)</code></p></blockquote><p>安装方式基本与官方的安装方式一致：</p><p><a href="https://index.ros.org/doc/ros2/Installation/Foxy/macOS-Install-Binary/">https://index.ros.org/doc/ros2/Installation/Foxy/macOS-Install-Binary/</a></p><a id="more"></a><p>安装之前建议先将 brew 换用国内镜像源，当然即使更换了源也会出现少数地方比较慢需要科学上网的情况，比如 opencv 的安装。也可以不科学上网，仅仅只是慢，应该能下载成功。</p><h2 id="安装必要依赖"><a href="#安装必要依赖" class="headerlink" title="安装必要依赖"></a>安装必要依赖</h2><ol><li><code>Python3.8</code>：ROS2 Foxy 开始默认支持 Python 3.8</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install python@3.8</span><br><span class="line">brew unlink python</span><br><span class="line">brew link --force python@3.8</span><br></pre></td></tr></table></figure><ol start="2"><li><code>asio</code>、<code>tinyxml2</code>：Fast-RTPS 依赖，用来订阅发布消息的组件。以后会详细介绍 <code>DDS</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install asio tinyxml2</span><br></pre></td></tr></table></figure><ol start="3"><li><code>tinyxml</code>、<code>eigen</code>、<code>pcre</code>、<code>poco</code>：机器人状态发布者的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tinyxml eigen pcre poco</span><br></pre></td></tr></table></figure><ol start="4"><li><code>opencv</code>：非必须，但是视觉常常需要用到。安装它可能需要科学上网。如果没有会比较慢，耐心等待试试。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install opencv</span><br></pre></td></tr></table></figure><ol start="5"><li><code>openssl</code>：用来加密，<code>zshrc</code> 根据你的 <code>shell</code> 进行调整</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl</span><br><span class="line">echo &quot;export OPENSSL_ROOT_DIR=$(brew --prefix openssl)&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><ol start="6"><li>Rviz的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install qt freetype assimp</span><br></pre></td></tr></table></figure><ol start="7"><li><code>rosbag2</code> 需要的组件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install console_bridge</span><br></pre></td></tr></table></figure><ol start="8"><li><code>rcl_logging_log4cxx</code> 的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install log4cxx spdlog</span><br></pre></td></tr></table></figure><ol start="9"><li><code>Cyclone DDS</code> 需要的组件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cunit</span><br></pre></td></tr></table></figure><ol start="10"><li>rqt 的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install sip pyqt5</span><br><span class="line">ln -s /usr/local/share/sip/Qt5 /usr/local/share/sip/PyQt5</span><br><span class="line">brew install graphviz</span><br><span class="line">python3 -m pip install pygraphviz pydot</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 pygraphviz 可能会遇到问题：error: Error locating graphviz。尝试使用下面命令解决</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> python3 -m pip install --install-option=<span class="string">&quot;--include-path=/usr/local/include/&quot;</span> --install-option=<span class="string">&quot;--library-path=/usr/local/lib/&quot;</span> pygraphviz</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="11"><li>SROS2的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install lxml</span><br></pre></td></tr></table></figure><ol start="12"><li>命令行工具的依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install -U argcomplete catkin_pkg colcon-common-extensions coverage cryptography empy flake8 flake8-blind-except flake8-builtins flake8-class-newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-import-order flake8-quotes ifcfg lark-parser lxml mock mypy netifaces nose pep8 pydocstyle pydot pygraphviz pyparsing pytest-mock rosdep setuptools vcstool</span><br></pre></td></tr></table></figure><h2 id="禁用系统完整性保护（sip）"><a href="#禁用系统完整性保护（sip）" class="headerlink" title="禁用系统完整性保护（sip）"></a>禁用系统完整性保护（sip）</h2><ol><li>终端输入  <code>csrutil status</code></li></ol><p>如果显示的是 <code>System Integrity Protection status: disabled.</code>  则表示是禁用的，后面无需进行了。如果是 <code>enabled</code> 则继续往下进行。</p><ol start="2"><li>重启电脑开机的同时按住 <code>command + r</code> 不要松手，直到出现白苹果</li><li>在实用工具中找到终端</li><li>输入命令：<code>csrutil disable</code></li><li>如果得到结果为： <code>Successfully disabled System Integrity Protection. Please restart the machine for the changes to take effect.</code>  则说明禁用成功</li></ol><h2 id="安装-ROS-2"><a href="#安装-ROS-2" class="headerlink" title="安装 ROS 2"></a>安装 ROS 2</h2><ol><li><p>打开下载界面：<a href="https://github.com/ros2/ros2/releases">https://github.com/ros2/ros2/releases</a></p></li><li><p>找到 ros2-foxy-xxx-macos-amd64.tar.bz2，我当前使用的下载链接为 <a href="https://github.com/ros2/ros2/releases/download/release-foxy-20200807/ros2-foxy-20200807-macos-amd64.tar.bz2">ros2-foxy-20200807-macos-amd64.tar.bz2</a></p></li><li><p>下载后解压会有一个 <code>ros2-osx</code> 的文件夹，该文件就是 ros2 的源文件了</p></li><li><p>将其放在任何你想放在的文件夹内，官方将其放在了 <code>~/ros2_foxy</code> 中。</p></li></ol><h2 id="使用简单的例子测试-ros2"><a href="#使用简单的例子测试-ros2" class="headerlink" title="使用简单的例子测试 ros2"></a>使用简单的例子测试 ros2</h2><ol><li>加载环境</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. ~/ros2_foxy/ros2-osx/setup.zsh</span><br></pre></td></tr></table></figure><ol start="2"><li>打开 talker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_nodes_cpp talker</span><br></pre></td></tr></table></figure><ol start="3"><li>打开另一个终端，打开 listener（别忘了加载 ros 环境）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_nodes_py listener</span><br></pre></td></tr></table></figure><blockquote><p>talker 打印如下</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [1598014476.967367729] [talker]: Publishing: &quot;Hello World: 0&quot;</span><br><span class="line">[INFO] [1598014476.967367729] [talker]: Publishing: &quot;Hello World: 1&quot;</span><br></pre></td></tr></table></figure></blockquote><p>linstener 打印如下</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [1598014543.990184042] [listener]: I heard: [Hello World: 67]</span><br><span class="line">[INFO] [1598014543.990184042] [listener]: I heard: [Hello World: 68]</span><br></pre></td></tr></table></figure></blockquote></blockquote><h2 id="安装后出现的问题"><a href="#安装后出现的问题" class="headerlink" title="安装后出现的问题"></a>安装后出现的问题</h2><ol><li><code>. ~/ros2_foxy/ros2-osx/setup.zsh</code> 之后出现如下内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[connext_cmake_module] Warning: The location at which Connext was found when the workspace was built [[&#x2F;Applications&#x2F;rti_connext_dds-5.3.1]] does not point to a valid directory, and the NDDSHOME environment variable has not been set. Support for Connext will not be available.</span><br></pre></td></tr></table></figure><p>暂时将其忽略，没发现影响。</p><ol start="2"><li>运行 <code>rqt_graph</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The &#39;tango_icons_vendor&#39; package was not found - icons will not work</span><br></pre></td></tr></table></figure><p>该报错导致 <code>rqt</code> 工具的图片都无法显示，解决办法暂时没有找到。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;系统版本：MacOS 10.15.6（官方写的是支持 10.14）&lt;/p&gt;
&lt;p&gt;ROS版本：Foxy&lt;/p&gt;
&lt;p&gt;shell：zsh&lt;/p&gt;
&lt;p&gt;Mac：&lt;code&gt;MacBook Pro (13-inch, 2016, Four Thunderbolt 3 Ports)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装方式基本与官方的安装方式一致：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://index.ros.org/doc/ros2/Installation/Foxy/macOS-Install-Binary/&quot;&gt;https://index.ros.org/doc/ros2/Installation/Foxy/macOS-Install-Binary/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ROS" scheme="https://www.askeynil.com/categories/ROS/"/>
    
    <category term="Foxy" scheme="https://www.askeynil.com/categories/ROS/Foxy/"/>
    
    
    <category term="ROS2" scheme="https://www.askeynil.com/tags/ROS2/"/>
    
    <category term="install" scheme="https://www.askeynil.com/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>git submodule 基本使用</title>
    <link href="https://www.askeynil.com/2020/use-of-git-submoudle.html"/>
    <id>https://www.askeynil.com/2020/use-of-git-submoudle.html</id>
    <published>2020-08-19T12:28:45.000Z</published>
    <updated>2020-08-20T13:12:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理比较常用的与 <code>submodule</code> 有关的命令</p><ol><li>添加子仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;repository&gt; [&lt;path&gt;]</span><br></pre></td></tr></table></figure><ol start="2"><li>每个仓库执行指定命令。<code>--recursive</code> 递归查找子仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach [--recursive] &lt;commands&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>删除 submodule 仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule deinit (--all | [--] &lt;path&gt;...)</span><br></pre></td></tr></table></figure><ol start="4"><li>clone 仓库的时候同时下载子仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. --recurse-submodules[=&lt;pathspec&gt;]     可以指定特定的仓库</span></span><br><span class="line"><span class="comment"># 2. --recursive                           递归所有仓库</span></span><br><span class="line">git <span class="built_in">clone</span> [--recurse-submodules[=&lt;pathspec&gt;] | --recursive] &lt;repository&gt; [&lt;directory&gt;]</span><br><span class="line"><span class="comment"># 如果是所有仓库，等同于</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;repository&gt; [&lt;directory&gt;]</span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;整理比较常用的与 &lt;code&gt;submodule&lt;/code&gt; 有关的命令&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加子仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    <category term="Coding" scheme="https://www.askeynil.com/categories/Coding/"/>
    
    <category term="Git" scheme="https://www.askeynil.com/categories/Coding/Git/"/>
    
    
    <category term="Git" scheme="https://www.askeynil.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>因时机械爪驱动</title>
    <link href="https://www.askeynil.com/2019/32569ea8.html"/>
    <id>https://www.askeynil.com/2019/32569ea8.html</id>
    <published>2019-11-17T05:00:00.000Z</published>
    <updated>2019-11-17T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目代码已托管到<code>github</code>上</p><p><a href="https://github.com/AskeyNil/inspire_EG2_4B1">https://github.com/AskeyNil/inspire_EG2_4B1</a></p></blockquote><p>共两个版本</p><ol><li>C++</li><li>Python</li></ol><a id="more"></a><h2 id="C-使用方法"><a href="#C-使用方法" class="headerlink" title="C++ 使用方法"></a>C++ 使用方法</h2><ol><li>将 cpp 文件夹复制到工程下 <code>3rdparty</code> 目录下，并改名为<code>talon</code>（注意，大小写敏感）</li><li>在项目的 <code>CMakeLists.txt</code> 中添加如下代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(CMAKE_MODULE_PATH $&#123;CMAKE_MODULE_PATH&#125; $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;3rdparty&#x2F;talon)</span><br></pre></td></tr></table></figure><ol><li>上一步也可以将<code>cpp</code>中的<code>cmake</code>文件拷贝到你的<code>CMAKE_MODULE_PATH</code>中</li><li>使用<code>find_package(Talon)</code>导入package</li><li>在<code>target_link_libraries</code>中添加<code>Talon</code>，以此来使用代码。</li><li>以上…</li></ol><h2 id="Python-使用方法"><a href="#Python-使用方法" class="headerlink" title="Python 使用方法"></a>Python 使用方法</h2><blockquote><p>直接拖入项目中即可</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;项目代码已托管到&lt;code&gt;github&lt;/code&gt;上&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AskeyNil/inspire_EG2_4B1&quot;&gt;https://github.com/AskeyNil/inspire_EG2_4B1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;共两个版本&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Coding" scheme="https://www.askeynil.com/categories/Coding/"/>
    
    <category term="驱动开发" scheme="https://www.askeynil.com/categories/Coding/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="C++" scheme="https://www.askeynil.com/tags/C/"/>
    
    <category term="Python" scheme="https://www.askeynil.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用 C++ 实现复杂枚举</title>
    <link href="https://www.askeynil.com/2019/cc-complex-enum.html"/>
    <id>https://www.askeynil.com/2019/cc-complex-enum.html</id>
    <published>2019-11-13T12:00:00.000Z</published>
    <updated>2019-11-13T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在实际使用 C++ 的过程中，经常需要使用到枚举，然而在 C++ 中并不能给枚举添加方法，属性等特性，如果要使用这些特性，需要通过一些特殊的办法来做到，对枚举进行一个封装。</p><p>以当前用到的封装移动方式为例</p></blockquote><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URMoveState</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">enum</span> StateEnum &#123;</span><br><span class="line">    MOVEC = <span class="number">0</span>,</span><br><span class="line">    MOVEJ = <span class="number">1</span>,</span><br><span class="line">    MOVEL = <span class="number">2</span>,</span><br><span class="line">    MOVEP = <span class="number">3</span></span><br><span class="line">  &#125;;</span><br><span class="line">  StateEnum _state;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">URMoveState</span><span class="params">(<span class="keyword">const</span> StateEnum &amp;state)</span> : _<span class="title">state</span><span class="params">(state)</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重载等于</span></span><br><span class="line">  <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> URMoveState &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> _state == rhs._state;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> StateEnum &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> _state == rhs;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重载不等于</span></span><br><span class="line">  <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> URMoveState &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> _state != rhs._state;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> StateEnum &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> _state != rhs;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (_state) &#123;</span><br><span class="line">    <span class="keyword">case</span> MOVEC:<span class="keyword">return</span> <span class="string">&quot;movec&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> MOVEJ:<span class="keyword">return</span> <span class="string">&quot;movej&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> MOVEL:<span class="keyword">return</span> <span class="string">&quot;movel&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> MOVEP:<span class="keyword">return</span> <span class="string">&quot;movep&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// and so on ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在实际使用 C++ 的过程中，经常需要使用到枚举，然而在 C++ 中并不能给枚举添加方法，属性等特性，如果要使用这些特性，需要通过一些特殊的办法来做到，对枚举进行一个封装。&lt;/p&gt;
&lt;p&gt;以当前用到的封装移动方式为例&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Coding" scheme="https://www.askeynil.com/categories/Coding/"/>
    
    <category term="C++" scheme="https://www.askeynil.com/categories/Coding/C/"/>
    
    
    <category term="C++" scheme="https://www.askeynil.com/tags/C/"/>
    
    <category term="Enum" scheme="https://www.askeynil.com/tags/Enum/"/>
    
  </entry>
  
  <entry>
    <title>xacro 语法总结</title>
    <link href="https://www.askeynil.com/2019/3f08735f.html"/>
    <id>https://www.askeynil.com/2019/3f08735f.html</id>
    <published>2019-11-09T03:00:00.000Z</published>
    <updated>2019-11-09T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>xacro</code>是为了解决在编写<code>urdf</code>文件过程中，出现的标签内容重复，但又不得不去写。一些值的计算有依赖的问题。为了和<code>urdf</code>文件区分，我们定义的模型文件名后缀为<code>.xacro</code>。</p><p>从功能的角度来说，<code>xacro</code>提供了属性定义，数学运算，条件判断和宏定义等功能。</p><p><strong>注意</strong>：必须在robot标签中加入<code>xmlns:xacro=&quot;http://www.ros.org/wiki/xacro&quot;</code>属性！！</p><p>该文件中注释不能用中文！！！</p><blockquote><p><a href="http://wiki.ros.org/xacro">http://wiki.ros.org/xacro</a></p></blockquote></blockquote><a id="more"></a><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote><p>属性的定义使用<code>&lt;xacro:property&gt;</code>标签完成，使用的时候用<code>$&#123;属性名称&#125;</code>来调用该参数。</p></blockquote><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- define --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;the_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2.1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;the_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4.5&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- use --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">geometry</span> <span class="attr">type</span>=<span class="string">&quot;cylinder&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;the_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;the_length&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><blockquote><p>在变量的大括号中可以使用基本的数学运算，可以使用Python数学模块中的函数和常量</p><p>包括，但不限于以下：</p><ol><li><code>pi</code>：π</li><li><code>sin</code>：正弦函数</li><li><code>cos</code>：余弦函数</li><li><code>tan</code>：正切函数</li><li><code>radians</code>：角度值转弧度制</li></ol></blockquote><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;R&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;alpha&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;30/180*pi&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">circumference</span>=<span class="string">&quot;$&#123;2 * pi * R&#125;&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;$&#123;sin(alpha)&#125; $&#123;cos(alpha)&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">limit</span> <span class="attr">lower</span>=<span class="string">&quot;$&#123;radians(-90)&#125;&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;$&#123;radians(90)&#125;&quot;</span> <span class="attr">effort</span>=<span class="string">&quot;0&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;$&#123;radians(75)&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;&lt;expression&gt;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">...</span> <span class="attr">some</span> <span class="attr">xml</span> <span class="attr">code</span> <span class="attr">here</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:unless</span> <span class="attr">value</span>=<span class="string">&quot;&lt;expression&gt;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">...</span> <span class="attr">some</span> <span class="attr">xml</span> <span class="attr">code</span> <span class="attr">here</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:unless</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>表达式中的结果必须是0、1、true或false，否则将会出现错误。</p><p>在<code>&lt;expression&gt;</code>中任何结果为布尔值的Python表达式都是可以的。</p></blockquote><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;var&quot;</span> <span class="attr">value</span>=<span class="string">&quot;useit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;var == &#x27;useit&#x27;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;var.startswith(&#x27;use&#x27;) and var.endswith(&#x27;it&#x27;)&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;allowed&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;[1,2,3]&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;1 in allowed&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><blockquote><p>宏定义使用<code>xacro:macro</code>来定义一个宏，参数用空格分割，参数可以用<code>:=</code>来添加默认值</p></blockquote><p>语法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- define --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;&lt;name&gt;&quot;</span> <span class="attr">params</span>=<span class="string">&quot;&lt;params&gt;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">...</span> <span class="attr">some</span> <span class="attr">xml</span> <span class="attr">code</span> <span class="attr">here</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- use --&gt;</span></span><br><span class="line">&lt;xacro:&lt;name&gt; &lt;params&gt;=&quot;&quot; /&gt;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;ak_axis_x&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 0 0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;ak_link&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name type:=box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;type == &#x27;box&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 2 3&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xacro:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;type == &#x27;cylinder&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">&quot;1&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xacro:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">xacro:if</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;type == &#x27;sphere&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xacro:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:ak_axis_x</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:ak_link</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:ak_link</span> <span class="attr">name</span>=<span class="string">&quot;my_cylinder&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cylinder&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>标签</th><th>解释</th><th>属性</th></tr></thead><tbody><tr><td><code>&lt;xacro:property&gt;</code></td><td>属性</td><td><code>name</code>、<code>value</code></td></tr><tr><td><code>&lt;xacro:if&gt;</code></td><td>如果</td><td><code>value</code></td></tr><tr><td><code>&lt;xacro:unless&gt;</code></td><td>如果不</td><td><code>value</code></td></tr><tr><td><code>&lt;xacro:macro&gt;</code></td><td>宏定义</td><td><code>name</code>、<code>params</code></td></tr></tbody></table><ol><li>数学运算的时候可以使用Python中Math里面的函数</li><li>if判断的时候可以使用Python中所有能得到bool值的判断，比如<code>in</code></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;xacro&lt;/code&gt;是为了解决在编写&lt;code&gt;urdf&lt;/code&gt;文件过程中，出现的标签内容重复，但又不得不去写。一些值的计算有依赖的问题。为了和&lt;code&gt;urdf&lt;/code&gt;文件区分，我们定义的模型文件名后缀为&lt;code&gt;.xacro&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;从功能的角度来说，&lt;code&gt;xacro&lt;/code&gt;提供了属性定义，数学运算，条件判断和宏定义等功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：必须在robot标签中加入&lt;code&gt;xmlns:xacro=&amp;quot;http://www.ros.org/wiki/xacro&amp;quot;&lt;/code&gt;属性！！&lt;/p&gt;
&lt;p&gt;该文件中注释不能用中文！！！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.ros.org/xacro&quot;&gt;http://wiki.ros.org/xacro&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="ROS" scheme="https://www.askeynil.com/categories/ROS/"/>
    
    <category term="Kinetic" scheme="https://www.askeynil.com/categories/ROS/Kinetic/"/>
    
    
    <category term="ROS" scheme="https://www.askeynil.com/tags/ROS/"/>
    
    <category term="URDF" scheme="https://www.askeynil.com/tags/URDF/"/>
    
    <category term="xacro" scheme="https://www.askeynil.com/tags/xacro/"/>
    
  </entry>
  
  <entry>
    <title>URDF 中 link、joint 属性总结</title>
    <link href="https://www.askeynil.com/2019/bcc307b4.html"/>
    <id>https://www.askeynil.com/2019/bcc307b4.html</id>
    <published>2019-11-08T00:00:00.000Z</published>
    <updated>2019-11-08T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此文用于记录URDF模型中最重要和最常用的两个标签，文章的内容大部分都来自官方</p><p><a href="http://wiki.ros.org/urdf/XML/link">http://wiki.ros.org/urdf/XML/link</a></p><p><a href="http://wiki.ros.org/urdf/XML/joint">http://wiki.ros.org/urdf/XML/joint</a></p><p>对于各个标签的理解和使用，不定时更新。</p></blockquote><a id="more"></a><h2 id="link"><a href="#link" class="headerlink" title="link"></a><a href="http://wiki.ros.org/urdf/XML/link">link</a></h2><h3 id="各标签"><a href="#各标签" class="headerlink" title="各标签"></a>各标签</h3><table><thead><tr><th>子标签或属性<br />（带&lt;&gt;为标签，不带为属性）</th><th>子标签和属性</th><th>描述</th><th>是否理解</th></tr></thead><tbody><tr><td><code>name</code>（必填）</td><td></td><td>用于描述 <code>link</code> 的名称</td><td>√</td></tr><tr><td><code>&lt;inertial&gt;</code>（可选）</td><td></td><td>物理惯性</td><td></td></tr><tr><td></td><td><code>&lt;origin&gt;</code> （可选）</td><td>位置和姿态</td><td></td></tr><tr><td></td><td><code>&lt;mass&gt;</code></td><td>质量</td><td></td></tr><tr><td></td><td><code>&lt;inertia&gt;</code></td><td>3x3的旋转惯性矩阵</td><td></td></tr><tr><td><code>&lt;visual&gt;</code>（可选）</td><td></td><td>连杆的外观，可存在多个</td><td>√</td></tr><tr><td></td><td><code>name</code>（可选）</td><td>名称</td><td>√</td></tr><tr><td></td><td><code>&lt;origin&gt;</code> （可选）</td><td>位置和姿态</td><td>√</td></tr><tr><td></td><td><code>&lt;geometry&gt;</code>（必填）</td><td>形状</td><td>√</td></tr><tr><td></td><td><code>&lt;material&gt;</code>（可选）</td><td>纹理外观</td><td>√</td></tr><tr><td><code>&lt;collision&gt;</code>（可选）</td><td></td><td>碰撞，可存在多个</td><td></td></tr><tr><td></td><td><code>name</code>（可选）</td><td>名称</td><td></td></tr><tr><td></td><td><code>&lt;origin&gt;</code> （可选）</td><td>位置和姿态</td><td></td></tr><tr><td></td><td><code>&lt;geometry&gt;</code>（必填）</td><td>形状</td><td></td></tr></tbody></table><blockquote><p>针对上面的第二列中的子标签描述，同名的意义相同，只描述一次</p></blockquote><table><thead><tr><th>子标签或属性<br />（带&lt;&gt;为标签，不带为属性）</th><th>子标签和属性</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;origin&gt;</code>（可选）</td><td></td><td>位置和姿态</td></tr><tr><td></td><td><code>xyz</code>（可选）</td><td>x、y、z的偏移，以米为单位。</td></tr><tr><td></td><td><code>rpy</code>（可选）</td><td>x、y、z的旋转，以弧度为单位</td></tr><tr><td><code>&lt;mass&gt;</code></td><td><code>value</code></td><td>质量</td></tr><tr><td><code>&lt;inertia&gt;</code></td><td><code>ixx</code></td><td></td></tr><tr><td></td><td><code>ixy</code></td><td></td></tr><tr><td></td><td><code>ixz</code></td><td></td></tr><tr><td></td><td><code>iyy</code></td><td></td></tr><tr><td></td><td><code>iyz</code></td><td></td></tr><tr><td></td><td><code>izz</code></td><td></td></tr><tr><td><code>&lt;geometry&gt;</code>（必填）</td><td></td><td></td></tr><tr><td></td><td><code>&lt;box&gt;</code></td><td>长方体<br /><code>size</code>属性对应长宽高</td></tr><tr><td></td><td><code>&lt;cylinder&gt;</code></td><td>圆柱体<br /><code>radius</code>对应半径<br /><code>length</code>对应高度</td></tr><tr><td></td><td><code>&lt;sphere&gt;</code></td><td>球体<br /><code>radius</code>对应半径</td></tr><tr><td></td><td><code>&lt;mesh&gt;</code></td><td>外部文件引入<br /><code>filename</code>设置外部文件<br /><code>scale</code>设置缩放比例</td></tr><tr><td><code>&lt;material&gt;</code>（可选）</td><td></td><td>纹理外观</td></tr><tr><td></td><td><code>name</code></td><td>名称</td></tr><tr><td></td><td><code>&lt;color&gt;</code></td><td>颜色<br /><code>rgba</code>设置颜色值，取值[0, 1]</td></tr><tr><td></td><td><code>&lt;texture&gt;</code></td><td>外部文件引入<br /><code>filename</code>设置外部文件</td></tr></tbody></table><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="长方体"><a href="#长方体" class="headerlink" title="长方体"></a>长方体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 2 3&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建了一个简单的长方体，长宽高分别为1、2、3。</p></blockquote><h4 id="圆柱"><a href="#圆柱" class="headerlink" title="圆柱"></a>圆柱</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_cylinder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">&quot;1&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建了一个简单的圆柱，长度为<code>1</code>，半径为<code>0.5</code></p></blockquote><h4 id="球体"><a href="#球体" class="headerlink" title="球体"></a>球体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_cylinder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建一个简单的球体，半径为<code>0.5</code>。</p></blockquote><h4 id="Mesh-加载自定义的文件"><a href="#Mesh-加载自定义的文件" class="headerlink" title="Mesh 加载自定义的文件"></a>Mesh 加载自定义的文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_mesh&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">&quot;package://demo_urdf/meshes/bowl.dae&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>从文件中读取形状，使用<code>package</code>开头，一般将对应的纹理文件<code>dae</code>放在文件夹<code>meshes</code>中。</p></blockquote><h4 id="位置和姿势"><a href="#位置和姿势" class="headerlink" title="位置和姿势"></a>位置和姿势</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.1 0.2 0.3&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.57 1.57 1.57&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">origin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 2 3&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>origin</code>的<code>xyz</code>控制位置，<code>rpy</code>控制姿态，旋转遵循<code>右手螺旋法则</code></p></blockquote><h4 id="设置视觉纹理"><a href="#设置视觉纹理" class="headerlink" title="设置视觉纹理"></a>设置视觉纹理</h4><ol><li>内部设置的方式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 2 3&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 0 0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>外部设置的方式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 0 0 1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 2 3&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>建议使用第二种方式，因为一个颜色很有可能在多个地方需要使用。</p></blockquote><h2 id="joint"><a href="#joint" class="headerlink" title="joint"></a><a href="http://wiki.ros.org/urdf/XML/joint">joint</a></h2><h3 id="各标签-1"><a href="#各标签-1" class="headerlink" title="各标签"></a>各标签</h3><table><thead><tr><th>子标签或属性<br />（带&lt;&gt;为标签，不带为属性）</th><th>子标签和属性</th><th>描述</th><th>是否理解</th></tr></thead><tbody><tr><td><code>name</code>（必填）</td><td></td><td>用于描述<code>joint</code>的名称</td><td>√</td></tr><tr><td><code>type</code>（必填）</td><td></td><td>用于描述<code>joint</code>的类型：<br />1. <code>fixed</code>：固定关节<br />2. <code>revolute</code>：限制旋转关节<br />3. <code>continuous</code>：无限旋转关节<br />4. <code>prismatic</code>：滑动关节<br />5. <code>floating</code>：悬浮关节<br />6. <code>planar</code>：2T1R</td><td>√</td></tr><tr><td><code>&lt;origin&gt;</code>（可选）</td><td></td><td>位置和姿态</td><td>√</td></tr><tr><td></td><td><code>xyz</code>（可选）</td><td>x、y、z的偏移，以米为单位。</td><td>√</td></tr><tr><td></td><td><code>rpy</code>（可选）</td><td>x、y、z的旋转，以弧度为单位</td><td>√</td></tr><tr><td><code>&lt;parent&gt;</code>（必填）</td><td></td><td>被连接的那个<code>link</code></td><td>√</td></tr><tr><td></td><td><code>link</code></td><td><code>link</code>的名称</td><td>√</td></tr><tr><td><code>&lt;child&gt;</code>（必填）</td><td></td><td>连接的<code>link</code></td><td>√</td></tr><tr><td></td><td><code>link</code></td><td><code>link</code>的名称</td><td>√</td></tr><tr><td><code>&lt;axis&gt;</code>（可选）</td><td></td><td>指定的关节轴</td><td>√</td></tr><tr><td></td><td><code>xyz</code>（必填）</td><td>x、y、z 偏移或旋转</td><td>√</td></tr><tr><td><code>&lt;calibration&gt;</code>（可选）</td><td></td><td>校准位置</td><td></td></tr><tr><td></td><td><code>rising</code>（可选）</td><td>上升沿</td><td></td></tr><tr><td></td><td><code>falling</code>（可选）</td><td>下降沿</td><td></td></tr><tr><td><code>&lt;dynamics&gt;</code>（可选）</td><td></td><td>动力</td><td></td></tr><tr><td></td><td><code>damping</code>（可选）</td><td>物理阻尼</td><td></td></tr><tr><td></td><td><code>friction</code>（可选）</td><td>物理静摩擦力</td><td></td></tr><tr><td><code>&lt;limit&gt;</code><br />(可选，<code>revolute</code>和<code>prismatic</code>必填)</td><td></td><td>限制约束</td><td>√</td></tr><tr><td></td><td><code>lower</code>（可选）</td><td>下限</td><td>√</td></tr><tr><td></td><td><code>upper</code>（可选）</td><td>上限</td><td>√</td></tr><tr><td></td><td><code>effort</code>（必填）</td><td>最大承受力</td><td>√</td></tr><tr><td></td><td><code>velocity</code>（必填）</td><td>最大速度</td><td>√</td></tr><tr><td><code>&lt;mimic&gt;</code>（可选）</td><td></td><td>模拟现有一个关节<br /><code>value = multi * joint + offset</code></td><td></td></tr><tr><td></td><td><code>joint</code>（必填）</td><td>要模拟的关节</td><td></td></tr><tr><td></td><td><code>multiplier</code><br />（可选）</td><td>乘法因子</td><td></td></tr><tr><td></td><td><code>offset</code>（可选）</td><td>偏移量</td><td></td></tr><tr><td><code>&lt;safety_controller&gt;</code>（可选）</td><td></td><td>安全控制器</td><td></td></tr><tr><td></td><td><code>soft_lower_limit</code><br />（可选）</td><td>限制关节位置的下关节边界</td><td></td></tr><tr><td></td><td><code>soft_upper_limit</code><br />（可选）</td><td>限制关节位置的上关节边界</td><td></td></tr><tr><td></td><td><code>k_position</code><br />（可选）</td><td></td><td></td></tr><tr><td></td><td><code>k_velocity</code><br />（必填）</td><td></td><td></td></tr></tbody></table><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><blockquote><p>在上面的表格中共有六种类型，实际使用中只有4中能使用，<code>fixed</code>、<code>revolute</code>、<code>continuous</code>、<code>prismatic</code>。</p><p>以下都定义了两个link，从而展示例子，只写关节部分代码</p><p>以下为公共区域代码，<code>...</code>表示加入后面的关节代码</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 0 0 1.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;green&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0 1.0 0 1.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.1 0.2 1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;link1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.1 0.2 1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;green&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>关节1的名字为<code>base_link</code>，颜色为红色</li><li>关节2的名字为<code>link1</code>，颜色为绿色</li></ol><h4 id="fixed关节"><a href="#fixed关节" class="headerlink" title="fixed关节"></a>fixed关节</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint0&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 1&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;link1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>该关节仅仅起到连接作用</p></blockquote><h4 id="revolute-关节"><a href="#revolute-关节" class="headerlink" title="revolute 关节"></a>revolute 关节</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint0&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 1&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;link1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;30&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;-3.14&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;3.14&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>旋转关节，必须要加上限制约束，因为该关节有限制条件。</p></blockquote><h4 id="continuous-关节"><a href="#continuous-关节" class="headerlink" title="continuous 关节"></a>continuous 关节</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;joint0&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 1&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;link1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>旋转关节，没有限制约束，无限旋转</p></blockquote><h4 id="prismatic-关节"><a href="#prismatic-关节" class="headerlink" title="prismatic 关节"></a>prismatic 关节</h4><joint name="joint0" type="prismatic">    <origin xyz="0 0 1" rpy="0 0 0"/>    <axis xyz="1 0 0"/>    <parent link="base_link"/>    <child link="link1"/><p>​    <limit effort="30" velocity="1.0" lower="-10" upper="10" /><br></joint>-</p><blockquote><p>平移关节，必须加限制约束。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>如果需要多自由度，可以加入多关节，必须说6自由度，可以加3个旋转和3个平移，分别对应x、y、z三个不同的方向即可。</p><h2 id="launch-启动文件"><a href="#launch-启动文件" class="headerlink" title="launch 启动文件"></a>launch 启动文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> <span class="attr">default</span>=<span class="string">&quot;geometry_box.urdf&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;rvizconfig&quot;</span> <span class="attr">default</span>=<span class="string">&quot;$(find demo_urdf)/rviz/urdf.rviz&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro --inorder $(find demo_urdf)/urdf/$(arg model)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;use_gui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg gui)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(arg rvizconfig)&quot;</span> <span class="attr">required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>arg</code>：大致相当于设置变量</li><li><code> find</code>：查找package</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;此文用于记录URDF模型中最重要和最常用的两个标签，文章的内容大部分都来自官方&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.ros.org/urdf/XML/link&quot;&gt;http://wiki.ros.org/urdf/XML/link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.ros.org/urdf/XML/joint&quot;&gt;http://wiki.ros.org/urdf/XML/joint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于各个标签的理解和使用，不定时更新。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="ROS" scheme="https://www.askeynil.com/categories/ROS/"/>
    
    <category term="Kinetic" scheme="https://www.askeynil.com/categories/ROS/Kinetic/"/>
    
    
    <category term="ROS" scheme="https://www.askeynil.com/tags/ROS/"/>
    
    <category term="roslaunch" scheme="https://www.askeynil.com/tags/roslaunch/"/>
    
    <category term="URDF" scheme="https://www.askeynil.com/tags/URDF/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 和 ROS 一起使用的一些坑</title>
    <link href="https://www.askeynil.com/2019/e4bbffed.html"/>
    <id>https://www.askeynil.com/2019/e4bbffed.html</id>
    <published>2019-11-06T12:00:00.000Z</published>
    <updated>2019-11-07T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>单独使用OpenCV的时候遇到了之前因为安装 ROS 而导致的一些坑点。</p><p>故记录下来。</p></blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p> 使用了 <code>Anaconda</code> 的虚拟环境，并且确认已经安装过 OpenCV</p><p>运行 Python，直接 xxx（不可描述）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;home&#x2F;askeynil&#x2F;Desktop&#x2F;cv&#x2F;class&#x2F;1. demo.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    import cv2 as cv</span><br><span class="line">ImportError: &#x2F;opt&#x2F;ros&#x2F;kinetic&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;cv2.so: undefined symbol: PyCObject_Type</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>若只想看解决办法，请直接<a href="#%E6%80%BB%E7%BB%93">点我</a></p></blockquote><h2 id="问题研究"><a href="#问题研究" class="headerlink" title="问题研究"></a>问题研究</h2><ol><li>查看问题</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　错误信息</span></span><br><span class="line">ImportError: /opt/ros/kinetic/lib/python2.7/dist-packages/cv2.so: undefined symbol: PyCObject_Type</span><br></pre></td></tr></table></figure><ol start="2"><li><p>很明显，ROS 在干坏事。</p></li><li><p>可是明明用了 Anaconda 的虚拟环境，为何会引用ROS的库，而且使用的是Python3为何会使用Python2.7里面的库。</p></li><li><p>回想ROS干过啥</p></li><li><p>在 <code>~/.zshrc</code> 中添加了一句话 <code>source /opt/ros/kinetic/setup.zsh</code> （我使用的是 <code>zsh</code> ，如果使用<code>bash</code>，应该是在 <code>~/.bashrc</code> 中添加了 <code>source /opt/ros/kinetic/setup.bash</code> ，一个道理）</p></li><li><p>然后又是 <code>Python</code> 找库找的不对，这时候应该想到 <code>PYTHONPATH</code> 环境变量</p></li></ol><blockquote><p>解释一下， <code>PYTHONPATH</code> 环境变量就是 <code>Python</code> 去 import 的时候的搜索路径。</p></blockquote><ol start="7"><li>首先打印一下当前的 <code>PYTHONPATH</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PYTHONPATH</span></span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line"><span class="comment"># /opt/ros/kinetic/lib/python2.7/dist-packages</span></span><br></pre></td></tr></table></figure><ol start="8"><li>果然，ROS就没干好事。。</li><li>解决方法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 在 ~/.zshrc 或 ~/.bashrc 中将 PYTHONPATH 置为空</span></span><br><span class="line">PYTHONPATH=</span><br><span class="line"><span class="comment"># 2. 或者果断点，将 source /opt/ros/kinetic/setup.zsh 或 source /opt/ros/kinetic/setup.bash 删掉</span></span><br></pre></td></tr></table></figure><blockquote><p>因为我还想着使用 ROS，所以我采用了方式1，因为用了方式2，ROS肯定就用不了啦。</p></blockquote><h2 id="问题再现"><a href="#问题再现" class="headerlink" title="问题再现"></a>问题再现</h2><blockquote><p>使用 <code>roscore</code> ，出现了问题。</p><p>提示如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/opt/ros/kinetic/bin/roscore&quot;</span>, line 36, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from rosmaster.master_api import NUM_WORKERS</span><br><span class="line">ImportError: No module named rosmaster.master_api</span><br></pre></td></tr></table></figure><h2 id="问题再探"><a href="#问题再探" class="headerlink" title="问题再探"></a>问题再探</h2><ol><li>好吧，这会轮到找不到 ROS 的依赖库了。</li><li>这可咋办，我作为一个懒人代表，不想每次使用都去注释一下。</li><li>ROS 需要自己的依赖库，也就是 <code>/opt/ros/kinetic/lib/python2.7/dist-packages</code> 这里面的东西。</li><li>解决办法很简单，只要在 <code>roscore</code> 之前将它加上就行。</li><li>起初想法是写一个脚本，然后取添加 <code>source</code> ，感觉过于麻烦。</li><li>然后想到大名鼎鼎的 <code>alias</code> 命令。</li><li>然后便有了以下的解决办法。</li><li>在 <code>~/.zshrc</code> 或 <code>~/.bashrc</code> 中添加如下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> roscore=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;roscore&#x27;</span></span><br></pre></td></tr></table></figure><ol start="9"><li>此后，<code>roscore</code> 的使用毫无问题了。</li><li>但是，新建一个终端的时候，我不可能再一次 <code>roscore</code> 吧，我要使用 <code>rosrun</code> 或者 <code>catkin_make</code> 怎么办？</li><li>那就都加上就好了，所以命令变成了如下的三句话：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> roscore=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;roscore&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> catkin_make=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;catkin_make&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rosrun=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;rosrun&#x27;</span></span><br></pre></td></tr></table></figure><ol start="12"><li><p>大功告成。</p></li><li><p>最后，突然想到，在日常使用的时候，经常需要在 <code>catkin_make</code> 之后使用 <code>source devel/setup.zsh</code></p></li><li><p>懒人做到底。。然后就又改成了如下三句话：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> roscore=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;roscore&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> catkin_make=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;catkin_make;source devel/setup.zsh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rosrun=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;rosrun&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="问题又现"><a href="#问题又现" class="headerlink" title="问题又现"></a>问题又现</h2><h3 id="catkin-make-help异常"><a href="#catkin-make-help异常" class="headerlink" title="catkin_make --help异常"></a><code>catkin_make --help</code>异常</h3><ol><li><p>解决办法：</p><p>删掉 <code>alias catkin_make=&#39;source /opt/ros/kinetic/setup.zsh;catkin_make;source devel/setup.zsh&#39;</code> 中的 <code>;source devel/setup.zsh</code></p></li><li><p>总结：</p><p>还是不能太偷懒啊。。。</p></li></ol><h3 id="rosrun-一直出现找不到-package"><a href="#rosrun-一直出现找不到-package" class="headerlink" title="rosrun 一直出现找不到 package"></a>rosrun 一直出现找不到 package</h3><ol><li>查看 <code>PYTHONPATH</code> 发现 <code>rosrun</code> 之后只有一个 <code>PYTHONPATH</code></li><li>发现 <code>source /opt/ros/kinetic/setup.zsh</code> 会将当前工作工作空间的 <code>PYTHONPATH</code> 环境给删除掉，ROS很傻吊</li></ol><p>解决办法：</p><p>删掉原本的 <code>alias rosrun</code></p><p>更改命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> rosrun=<span class="string">&#x27;echo $PYTHONPATH | grep -q &quot;ros&quot; || source /opt/ros/kinetic/setup.bash;rosrun&#x27;</span></span><br><span class="line"><span class="comment"># 为了以防万一，添加下面这句话</span></span><br><span class="line"><span class="built_in">alias</span> rossource=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ROS 和 OpenCV 的坑使用以下方式就可以完美解决</p><ol><li><p>删掉原本在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 中的 <code>source /opt/ros/kinetic/setup.bash</code> 或 <code>source /opt/ros/kinetic/setup.zsh</code></p></li><li><p>在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 中添加如下代码：(<strong>注意选择对应版本</strong>)</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zsh 版本</span></span><br><span class="line"><span class="built_in">alias</span> roscore=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh;roscore&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> catkin_make=<span class="string">&#x27;echo $PYTHONPATH | grep -q &quot;ros&quot; || source /opt/ros/kinetic/setup.zsh;catkin_make&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rosrun=<span class="string">&#x27;echo $PYTHONPATH | grep -q &quot;ros&quot; || source /opt/ros/kinetic/setup.zsh;rosrun&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rossource=<span class="string">&#x27;source /opt/ros/kinetic/setup.zsh&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bash 版本</span></span><br><span class="line"><span class="built_in">alias</span> roscore=<span class="string">&#x27;source /opt/ros/kinetic/setup.bash;roscore&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> catkin_make=<span class="string">&#x27;echo $PYTHONPATH | grep -q &quot;ros&quot; || source /opt/ros/kinetic/setup.bash;catkin_make&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rosrun=<span class="string">&#x27;echo $PYTHONPATH | grep -q &quot;ros&quot; || source /opt/ros/kinetic/setup.bash;rosrun&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rossource=<span class="string">&#x27;source /opt/ros/kinetic/setup.bash&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>万事大吉，重启终端！</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;单独使用OpenCV的时候遇到了之前因为安装 ROS 而导致的一些坑点。&lt;/p&gt;
&lt;p&gt;故记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; 使用了 &lt;code&gt;Anaconda&lt;/code&gt; 的虚拟环境，并且确认已经安装过 OpenCV&lt;/p&gt;
&lt;p&gt;运行 Python，直接 xxx（不可描述）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File &amp;quot;&amp;#x2F;home&amp;#x2F;askeynil&amp;#x2F;Desktop&amp;#x2F;cv&amp;#x2F;class&amp;#x2F;1. demo.py&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    import cv2 as cv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ImportError: &amp;#x2F;opt&amp;#x2F;ros&amp;#x2F;kinetic&amp;#x2F;lib&amp;#x2F;python2.7&amp;#x2F;dist-packages&amp;#x2F;cv2.so: undefined symbol: PyCObject_Type&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="BugFix" scheme="https://www.askeynil.com/categories/BugFix/"/>
    
    
    <category term="ROS" scheme="https://www.askeynil.com/tags/ROS/"/>
    
    <category term="OpenCV" scheme="https://www.askeynil.com/tags/OpenCV/"/>
    
    <category term="Python" scheme="https://www.askeynil.com/tags/Python/"/>
    
    <category term="Anaconda" scheme="https://www.askeynil.com/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 之特征匹配</title>
    <link href="https://www.askeynil.com/2019/b1861ead.html"/>
    <id>https://www.askeynil.com/2019/b1861ead.html</id>
    <published>2019-11-06T08:00:00.000Z</published>
    <updated>2019-11-06T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文所有代码，只使用<code>C++</code>实现，Python类似，甚至更加简单，暂不做实现。</p></blockquote><h2 id="特征检测"><a href="#特征检测" class="headerlink" title="特征检测"></a>特征检测</h2><p>特征检测常用的算法有:</p><ol><li>SIFT（尺度不变特征变换）</li><li>SURF（加速鲁棒特征）</li><li>ORB</li></ol><blockquote><p><code>SIFT</code>和<code>SURF</code>已经申请了专利，在OpenCV中使用需要付费，所以不做讨论。</p></blockquote><a id="more"></a><p>以下为ORB的基本用法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Mat src = imread(<span class="string">&quot;./img/blox.jpg&quot;</span>), gray;</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line"><span class="comment">// 创建 orb 检测器</span></span><br><span class="line"><span class="keyword">auto</span> orb = ORB::create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orb 查找特征点</span></span><br><span class="line"><span class="built_in">vector</span>&lt;KeyPoint&gt; keyPoints;</span><br><span class="line">orb-&gt;detect(gray, keyPoints);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orb 计算描述符</span></span><br><span class="line">Mat desc;</span><br><span class="line">orb-&gt;compute(gray, keyPoints, desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找特征点和计算描述符也可以归为一步</span></span><br><span class="line"><span class="comment">// orb-&gt;detectAndCompute(src, Mat(), keyPoints, desc);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制特征点</span></span><br><span class="line">drawKeypoints(src, keyPoints, src);</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line">waitKey();</span><br><span class="line">destroyAllWindows();</span><br></pre></td></tr></table></figure><p><img src="/img/OpenCV/orb.jpg" alt="orb"></p><blockquote><p>以上几乎为固定写法，如果是多图，<code>detect</code>和<code>compute</code>可以传多个数据进行匹配。得到多个<code>keyPoints</code>和<code>desc</code></p></blockquote><h2 id="特征匹配之BFMatcher"><a href="#特征匹配之BFMatcher" class="headerlink" title="特征匹配之BFMatcher"></a>特征匹配之BFMatcher</h2><blockquote><p>Brute-Force Matcher（BF Matcher）可以翻译成野蛮匹配器，它的步骤是先选取第一个图片特征集合的一个特征描述符，然后匹配另一个集合的所有特征，通过一些距离算法得到一个最近的距离distance。</p></blockquote><h3 id="查找特征点和描述符"><a href="#查找特征点和描述符" class="headerlink" title="查找特征点和描述符"></a>查找特征点和描述符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mat img1 = imread(<span class="string">&quot;./img/box.png&quot;</span>), gray1;</span><br><span class="line">Mat img2 = imread(<span class="string">&quot;./img/box_in_scene.png&quot;</span>), gray2;</span><br><span class="line">cvtColor(img1, gray1, COLOR_BGR2GRAY);</span><br><span class="line">cvtColor(img2, gray2, COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 orb 检测器</span></span><br><span class="line"><span class="keyword">auto</span> orb = ORB::create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orb 查找特征点和计算描述符</span></span><br><span class="line"><span class="built_in">vector</span>&lt;KeyPoint&gt; keyPoints1, keyPoints2;</span><br><span class="line">Mat desc1, desc2;</span><br><span class="line">orb-&gt;detectAndCompute(img1, Mat(), keyPoints1, desc1);</span><br><span class="line">orb-&gt;detectAndCompute(img2, Mat(), keyPoints2, desc2);</span><br></pre></td></tr></table></figure><h3 id="创建并使用BFMatcher"><a href="#创建并使用BFMatcher" class="headerlink" title="创建并使用BFMatcher"></a>创建并使用BFMatcher</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建 BFMatcher，开启crossCheck获取更精确的结果</span></span><br><span class="line"><span class="keyword">auto</span> matcher = BFMatcher::create(NORM_HAMMING, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// BFMatcher::create 函数需要两个参数，第一个是normType，第二个为crossCheck</span></span><br><span class="line"><span class="comment">// 1. normType</span></span><br><span class="line"><span class="comment">// 指定距离测量的规则，默认值是NORM_L2，该值一般与NORM_L1用在SIFT和SURF检测中。</span></span><br><span class="line"><span class="comment">// 如果我们使用ORB检测，我们需要将该值设置为 NORM_HAMMING2。</span></span><br><span class="line"><span class="comment">// 2. crossCheck</span></span><br><span class="line"><span class="comment">// 交叉检查，默认为 false，设置该值为 true 来获取更精确的结果。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比两张图的特征，进行匹配</span></span><br><span class="line"><span class="built_in">vector</span>&lt;DMatch&gt; matches;</span><br><span class="line">matcher-&gt;match(desc1, desc2, matches);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据评分排序，从小到大，因为越小越精确</span></span><br><span class="line">sort(matches.<span class="built_in">begin</span>(), matches.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除较差的匹配结果，只保留前百分之15的结果</span></span><br><span class="line"><span class="keyword">double</span> percent = <span class="number">0.15</span>;</span><br><span class="line"><span class="keyword">int</span> num = matches.<span class="built_in">size</span>() * percent;</span><br><span class="line"><span class="comment">// 至少保留十个结果</span></span><br><span class="line">num = <span class="built_in">max</span>(num, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 matches 进行裁剪</span></span><br><span class="line">matches.assign(matches.<span class="built_in">begin</span>(), matches.<span class="built_in">begin</span>() + num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制图形</span></span><br><span class="line">Mat dst;</span><br><span class="line">drawMatches(img1, keyPoints1, img2, keyPoints2, matches, dst);</span><br><span class="line"><span class="comment">// 绘制图形的时候，可以将最后一个参数，flags</span></span><br><span class="line"><span class="comment">// 设置为 DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS 从而只显示匹配成功的点。</span></span><br></pre></td></tr></table></figure><blockquote><p><code>DMatch</code>类的一些参数</p><ol><li><code>distance</code>：描述符之间的距离，值越小越好</li><li><code>trainIdx</code>：描述符在<code>train</code>图片中的索引</li><li><code>queryIdx</code>：描述符在<code>query</code>图片中的索引</li><li><code>imgIdx</code>：<code>train</code>图片的索引</li></ol></blockquote><p><img src="/img/OpenCV/bf.jpg" alt="bf"></p><h2 id="特征匹配之FLANN"><a href="#特征匹配之FLANN" class="headerlink" title="特征匹配之FLANN"></a>特征匹配之FLANN</h2><blockquote><p>FLANN是Fast Library for Approximate Nearest Neighbors.的缩写。快速近似最近邻搜索库。 它包含一组算法，这些算法针对大型数据集中的快速最近邻搜索和高维特征进行了优化。对于大型数据集，它的运行速度比BFMatcher更快。</p></blockquote><h3 id="查找特征点和描述符-1"><a href="#查找特征点和描述符-1" class="headerlink" title="查找特征点和描述符"></a>查找特征点和描述符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mat img1 = imread(<span class="string">&quot;./img/box.png&quot;</span>), gray1;</span><br><span class="line">Mat img2 = imread(<span class="string">&quot;./img/box_in_scene.png&quot;</span>), gray2;</span><br><span class="line">cvtColor(img1, gray1, COLOR_BGR2GRAY);</span><br><span class="line">cvtColor(img2, gray2, COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 orb 检测器</span></span><br><span class="line"><span class="keyword">auto</span> orb = ORB::create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 orb 查找特征点和计算描述符</span></span><br><span class="line"><span class="built_in">vector</span>&lt;KeyPoint&gt; keyPoints1, keyPoints2;</span><br><span class="line">Mat desc1, desc2;</span><br><span class="line">orb-&gt;detectAndCompute(img1, Mat(), keyPoints1, desc1);</span><br><span class="line">orb-&gt;detectAndCompute(img2, Mat(), keyPoints2, desc2);</span><br></pre></td></tr></table></figure><h3 id="创建并使用FLANN"><a href="#创建并使用FLANN" class="headerlink" title="创建并使用FLANN"></a>创建并使用FLANN</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 indexPar 和 searchPar</span></span><br><span class="line"><span class="comment">// 当前使用 ORB 检测器，indexPar 使用LshIndexParams 参数默认给6,12，1</span></span><br><span class="line"><span class="keyword">auto</span> indexPar = makePtr&lt;flann::LshIndexParams&gt;(<span class="number">6</span>, <span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 检索参数，数值越大越准确，但是也越耗时</span></span><br><span class="line"><span class="keyword">auto</span> searchPar = makePtr&lt;flann::SearchParams&gt;(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 使用 indexpar 和 searchPar 创建 flannMatcher</span></span><br><span class="line"><span class="function">FlannBasedMatcher <span class="title">flannMatcher</span><span class="params">(indexPar, searchPar)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;DMatch&gt;&gt; matches;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; matchesMask;</span><br><span class="line"><span class="comment">// 本例子使用 knnMatch， k 设置为 2</span></span><br><span class="line">flannMatcher.knnMatch(desc1, desc2, matches, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matches.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    DMatch first = matches[i][<span class="number">0</span>], last = matches[i][<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 第一个小于第二个的百分之80，舍去该值。这个比例根据不同的图片要进行一些微调。</span></span><br><span class="line">    <span class="keyword">if</span> (first.distance &lt; <span class="number">0.8</span> * last.distance) &#123;</span><br><span class="line">        matchesMask.push_back(&#123;<span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        matchesMask.push_back(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mat dst;</span><br><span class="line"><span class="comment">// 使用 Mask 掩码来输出图像</span></span><br><span class="line">drawMatches(img1, keyPoints1, img2, keyPoints2, matches, dst,</span><br><span class="line">            Scalar::all(<span class="number">-1</span>), Scalar::all(<span class="number">-1</span>), matchesMask,</span><br><span class="line">            DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS);</span><br></pre></td></tr></table></figure><p><img src="/img/OpenCV/flann.jpg" alt="flann"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文所有代码，只使用&lt;code&gt;C++&lt;/code&gt;实现，Python类似，甚至更加简单，暂不做实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;特征检测&quot;&gt;&lt;a href=&quot;#特征检测&quot; class=&quot;headerlink&quot; title=&quot;特征检测&quot;&gt;&lt;/a&gt;特征检测&lt;/h2&gt;&lt;p&gt;特征检测常用的算法有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SIFT（尺度不变特征变换）&lt;/li&gt;
&lt;li&gt;SURF（加速鲁棒特征）&lt;/li&gt;
&lt;li&gt;ORB&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;SIFT&lt;/code&gt;和&lt;code&gt;SURF&lt;/code&gt;已经申请了专利，在OpenCV中使用需要付费，所以不做讨论。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Coding" scheme="https://www.askeynil.com/categories/Coding/"/>
    
    <category term="OpenCV" scheme="https://www.askeynil.com/categories/Coding/OpenCV/"/>
    
    
    <category term="OpenCV" scheme="https://www.askeynil.com/tags/OpenCV/"/>
    
    <category term="C++" scheme="https://www.askeynil.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 之角点检测</title>
    <link href="https://www.askeynil.com/2019/b202f100.html"/>
    <id>https://www.askeynil.com/2019/b202f100.html</id>
    <published>2019-11-04T02:00:00.000Z</published>
    <updated>2019-11-04T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哈里斯角点检测"><a href="#哈里斯角点检测" class="headerlink" title="哈里斯角点检测"></a>哈里斯角点检测</h2><blockquote><p>克里斯·哈里斯（Chris Harris）和迈克·史蒂芬斯（Mike Stephens）在1988年的论文《组合式拐角和边缘检测器》（《A Combined Corner and Edge Detector》）中做了一次找到这些拐角的尝试，所以现在将其称为哈里斯拐角检测器。这篇论文把这个简单的想法变成了数学形式。它基本上找到了在所有方向上位移的强度差异。</p></blockquote><p><a href="https://docs.opencv.org/3.4.2/dd/d1a/group__imgproc__feature.html#gac1fc3598018010880e370e2f709b4345">官方api解释直达</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cornerHarris(src, dst, blockSize, ksize, k)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：必须是单通道灰度图</li><li><code>dst</code>：返回类型是<code>CV_32FC1</code>，大小与 <code>src</code> 相同。</li><li><code>blockSize</code>：角点检测考虑的领域大小，<code>int类型</code></li><li><code>kszie</code>：Sobel算子的大小，<code>int类型</code></li><li><code>k</code>：自由度参数，值越小检测出的结果越多。<code>double类型</code></li></ol><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mat gray, points;</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">cornerHarris(gray, points, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0.04</span>);</span><br><span class="line"><span class="keyword">double</span> points_max;</span><br><span class="line">src.copyTo(dst);</span><br><span class="line">minMaxLoc(points, <span class="literal">nullptr</span>, &amp;points_max);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dst.<span class="built_in">size</span>().<span class="built_in">height</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dst.<span class="built_in">size</span>().<span class="built_in">width</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (points.at&lt;<span class="keyword">float</span>&gt;(i, j) &gt; <span class="number">0.01</span> * points_max) &#123;</span><br><span class="line">            dst.at&lt;Vec3b&gt;(i, j) = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/OpenCV/harris.jpg" alt="harris"></p><h3 id="史-托马斯角点检测"><a href="#史-托马斯角点检测" class="headerlink" title="史-托马斯角点检测"></a>史-托马斯角点检测</h3><blockquote><p>J. Shi 和 C. Tomasi 在其论文 <strong>《Good Features to Track》</strong> 中对其进行了小的修改，与Harris Corner Detector相比，该方法表现出出更好的结果。</p></blockquote><p><a href="https://docs.opencv.org/3.4.2/dd/d1a/group__imgproc__feature.html#ga1d6bb77486c8f92d79c8793ad995d541">官方api解释直达</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goodFeaturesToTrack(src, corners, maxCorners, qualityLevel, minDistance)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：8位单通道或者32位浮点单通道图像</li><li><code>corners</code>：检测到的角的点集，类型为<code>vector&lt;Point&gt;</code></li><li><code>maxCorners</code>：最大角数</li><li><code>qualityLevel</code>：最低接收的质量百分比</li><li><code>minDistance</code>：点之间的最小距离</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Mat gray;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; points;</span><br><span class="line">src.copyTo(dst);</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">goodFeaturesToTrack(gray, points, <span class="number">25</span>, <span class="number">0.01</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    <span class="built_in">circle</span>(dst, points[i], <span class="number">3</span>, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>&#125;, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/OpenCV/shiTomasi.jpg" alt="shiTomasi"></p><blockquote><p>完整代码：<a href="https://github.com/AskeyNil/BlogCode/blob/master/OpenCV/cc/CornerDetector.cc">https://github.com/AskeyNil/BlogCode/blob/master/OpenCV/cc/CornerDetector.cc</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;哈里斯角点检测&quot;&gt;&lt;a href=&quot;#哈里斯角点检测&quot; class=&quot;headerlink&quot; title=&quot;哈里斯角点检测&quot;&gt;&lt;/a&gt;哈里斯角点检测&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;克里斯·哈里斯（Chris Harris）和迈克·史蒂芬斯（Mike Stephens）在1988年的论文《组合式拐角和边缘检测器》（《A Combined Corner and Edge Detector》）中做了一次找到这些拐角的尝试，所以现在将其称为哈里斯拐角检测器。这篇论文把这个简单的想法变成了数学形式。它基本上找到了在所有方向上位移的强度差异。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.opencv.org/3.4.2/dd/d1a/group__imgproc__feature.html#gac1fc3598018010880e370e2f709b4345&quot;&gt;官方api解释直达&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cornerHarris(src, dst, blockSize, ksize, k)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;：必须是单通道灰度图&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dst&lt;/code&gt;：返回类型是&lt;code&gt;CV_32FC1&lt;/code&gt;，大小与 &lt;code&gt;src&lt;/code&gt; 相同。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blockSize&lt;/code&gt;：角点检测考虑的领域大小，&lt;code&gt;int类型&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kszie&lt;/code&gt;：Sobel算子的大小，&lt;code&gt;int类型&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;k&lt;/code&gt;：自由度参数，值越小检测出的结果越多。&lt;code&gt;double类型&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Coding" scheme="https://www.askeynil.com/categories/Coding/"/>
    
    <category term="OpenCV" scheme="https://www.askeynil.com/categories/Coding/OpenCV/"/>
    
    
    <category term="OpenCV" scheme="https://www.askeynil.com/tags/OpenCV/"/>
    
    <category term="C++" scheme="https://www.askeynil.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Shell 命令之查找</title>
    <link href="https://www.askeynil.com/2019/fafe7b6d.html"/>
    <id>https://www.askeynil.com/2019/fafe7b6d.html</id>
    <published>2019-11-03T02:00:00.000Z</published>
    <updated>2019-11-03T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下所有命令仅仅只做常见用法的介绍，不做详细的参数介绍</p><p>如需详细介绍，可到 <a href="https://man.linuxde.net/">https://man.linuxde.net</a> 查阅</p><p>以下的显示结果均为使用 <code>oh-my-zsh</code> 的显示结果，如果是使用 <code>bash</code> 可能略有差异</p><blockquote><p><strong>注意</strong>：zsh 默认情况下不支持<code>*</code>通配符匹配，需要在<code>~/.zshrc</code>中添加<code>setopt nonomatch</code>即可。</p></blockquote></blockquote><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><blockquote><p><strong>which命令</strong>用于查找并显示给定命令的绝对路径，环境变量PATH中保存了查找命令时需要遍历的目录。</p></blockquote><p>一般使用过程中直接使用<code>which 命令</code>即可：</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> python</span><br><span class="line"><span class="comment"># /usr/bin/python</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><blockquote><p><strong>whereis命令</strong>用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径</p><p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p></blockquote><p>一般用来查找都在哪些目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">where</span> bash</span><br><span class="line"><span class="comment"># bash: /bin/bash /etc/bash.bashrc /usr/share/man/man1/bash.1.gz</span></span><br></pre></td></tr></table></figure><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><blockquote><p><strong>grep</strong>是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p></blockquote><ol><li>在文件中查找一个字符串（在 <code>main.cc</code> 中查找 <code>binary</code>）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;binary&quot;</span> main.cc</span><br><span class="line"><span class="comment">#    Mat binary; （注意：此时的binary会标红显示）</span></span><br><span class="line"><span class="comment"># 如果是多个文件，后面添加文件名即可，在查找的位置前方会显示文件查找到文件的名称</span></span><br><span class="line"><span class="comment"># 比如说</span></span><br><span class="line">grep <span class="string">&quot;binary&quot;</span> main.cc demo.cc</span><br><span class="line"><span class="comment"># 类似这样：（在我的 shell 中，前面的 main.cc 标为紫色，binary 标为红色）</span></span><br><span class="line"><span class="comment"># main.cc:    Mat binary;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然 shell 中的 * 语法在这里也是适用的，例如匹配所有以 cc 为后缀的文件</span></span><br><span class="line">grep <span class="string">&quot;binary&quot;</span> *.cc</span><br></pre></td></tr></table></figure><ol start="2"><li>正则匹配（在<code>main.cc</code>中查找<code>&quot;&quot;</code>包裹起来的内容）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正则匹配适用 -E 关键字</span></span><br><span class="line">grep -E <span class="string">&quot;\&quot;.*\&quot;&quot;</span> main.cc</span><br><span class="line"><span class="comment"># #include &quot;opencv2/opencv.hpp&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>只显示匹配到的部分</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -o</span></span><br><span class="line">grep -o <span class="string">&quot;binary&quot;</span> main.cc</span><br><span class="line"><span class="comment"># binary</span></span><br><span class="line"><span class="comment"># 上面这种做法似乎没有意义，计数好像有点用处</span></span><br><span class="line"><span class="comment"># 该参数可以用在正则匹配的时候，直接打印匹配出来的字符串，不需要显示其他的无关信息</span></span><br><span class="line"><span class="comment"># 比如：</span></span><br><span class="line">grep -oE <span class="string">&quot;\&quot;.*\&quot;&quot;</span> main.cc</span><br><span class="line"><span class="comment"># &quot;opencv2/opencv.hpp&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>输出行号，统计行数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出行号 参数 -n</span></span><br><span class="line">grep -nE <span class="string">&quot;\&quot;.*\&quot;&quot;</span> main.cc</span><br><span class="line"><span class="comment"># 在我的 shell 中 1 使用的是绿色数字显示，即行号用绿色数字显示</span></span><br><span class="line"><span class="comment"># 1:#include &quot;opencv2/opencv.hpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计行数 参数 -c</span></span><br><span class="line">grep -cE <span class="string">&quot;\&quot;.*\&quot;&quot;</span> main.cc</span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure><ol start="5"><li>忽略大小写匹配</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -i</span></span><br><span class="line">grep -i <span class="string">&quot;BINARY&quot;</span> main.cc</span><br><span class="line"><span class="comment">#     Mat binary;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>只输出匹配到的文件名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -l</span></span><br><span class="line">grep -l <span class="string">&quot;binary&quot;</span> *.cc</span><br><span class="line"><span class="comment"># main.cc</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><ol start="7"><li>递归文件夹查找（在当前目录递归查找：”binary”）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -r</span></span><br><span class="line">grep -r <span class="string">&quot;binary&quot;</span> .</span><br><span class="line"><span class="comment">#     Mat binary;</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 此时可能会提示一些错误信息，比如当前文件夹下面有一个二进制文件等等，我们要忽略其错误信息</span></span><br><span class="line"><span class="comment"># 忽略错误信息     参数 -s</span></span><br><span class="line"><span class="comment"># 忽略二进制文件   参数 -I</span></span><br></pre></td></tr></table></figure><ol start="8"><li>匹配多个不同的字符串（查找 main.cc 文件中 binary 和 main 字符串）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 通过正则实现</span></span><br><span class="line">grep -E <span class="string">&quot;binary|main&quot;</span> main.cc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 通过参数 -e 实现</span></span><br><span class="line">grep -e <span class="string">&quot;binary&quot;</span> -e <span class="string">&quot;main&quot;</span> main.cc</span><br></pre></td></tr></table></figure><ol start="9"><li>包括和排除指定文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般我们可以是用 *.后缀 来包括指定文件，但是如果在递归操作的时候不足以支持我们的操作</span></span><br><span class="line"><span class="comment"># 我们可以使用三个关键字来进行该操作</span></span><br><span class="line"><span class="comment"># 1. --include 包含...文件</span></span><br><span class="line">grep -Ir <span class="string">&quot;binary&quot;</span> . --include=*.cc</span><br><span class="line"><span class="comment"># 如果是多个</span></span><br><span class="line">grep -Ir <span class="string">&quot;binary&quot;</span> . --include=*.&#123;cc,cmake&#125;</span><br><span class="line"><span class="comment"># 2. --exclude 排除...文件</span></span><br><span class="line">grep -Ir <span class="string">&quot;binary&quot;</span> . --exclude=*.cmake</span><br><span class="line"><span class="comment"># 3. --exclude-dir 排除...文件夹里的文件</span></span><br><span class="line">grep -Ir <span class="string">&quot;binary&quot;</span> . --exclude-dir=build</span><br></pre></td></tr></table></figure><ol start="10"><li>静默输出（一般用来判断是否查找到）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -q</span></span><br><span class="line">grep -q <span class="string">&quot;binary&quot;</span> main.cc</span><br><span class="line"><span class="comment"># 该参数一般用来条件测试，成功返回0，失败返回非0</span></span><br></pre></td></tr></table></figure><h3 id="整理归类"><a href="#整理归类" class="headerlink" title="整理归类"></a>整理归类</h3><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>-E</code></td><td>正则匹配</td></tr><tr><td><code>-o</code></td><td>只显示匹配到的部分</td></tr><tr><td><code>-n</code></td><td>输出行号</td></tr><tr><td><code>-c</code></td><td><code>统计行数</code></td></tr><tr><td><code>-i</code></td><td>忽略大小写</td></tr><tr><td><code>-l</code></td><td>只输出匹配到的文件名</td></tr><tr><td><code>-r</code></td><td>递归查找</td></tr><tr><td><code>-s</code></td><td>忽略错误信息</td></tr><tr><td><code>-I</code></td><td>忽略二进制文件</td></tr><tr><td><code>-e</code></td><td>匹配多个字符串</td></tr><tr><td><code>--include</code></td><td>包含 … 文件（用等号连接后面的参数）</td></tr><tr><td><code>--exclude</code></td><td>排除 … 文件（用等号连接后面的参数）</td></tr><tr><td><code>--exclude-dir</code></td><td>排除 … 文件夹（用等号连接后面的参数）</td></tr></tbody></table><p>颜色区别：</p><table><thead><tr><th>意义</th><th>颜色</th></tr></thead><tbody><tr><td>匹配到的字符串</td><td>红色</td></tr><tr><td>匹配到的文件名</td><td>紫色</td></tr><tr><td>匹配到的行号</td><td>绿色</td></tr></tbody></table><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><blockquote><p><strong>find命令</strong>用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p></blockquote><ol><li>列出当前目录及子目录下所有文件和文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . </span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>/home</code>目录下查找以<code>py</code>为后缀的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /home -name <span class="string">&quot;*.py&quot;</span></span><br><span class="line"><span class="comment"># 与 grep 一样使用可以使用参数 -i 来忽略大小写</span></span><br><span class="line">find /home -iname <span class="string">&quot;*.py&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>当前目录及子目录查找<code>py</code>和<code>cc</code>结尾的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.py&quot;</span> -o -name <span class="string">&quot;*.cc&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>匹配路径字符串</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　参数 -path</span></span><br><span class="line">find . -name <span class="string">&quot;*src*&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>正则文件匹配</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数 -regex </span></span><br><span class="line">find . -regex <span class="string">&quot;.*\(py\|cc\)&quot;</span></span><br><span class="line"><span class="comment"># 也可以使用 -i 进行忽略大小写</span></span><br><span class="line">find . -iregex <span class="string">&quot;.*\(py\|cc\)&quot;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>当前目录不是<code>.py</code>为后缀的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ! 否定匹配</span></span><br><span class="line">find . ! -name <span class="string">&quot;*.py&quot;</span></span><br></pre></td></tr></table></figure><h3 id="整理归类-1"><a href="#整理归类-1" class="headerlink" title="整理归类"></a>整理归类</h3><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>-i</code></td><td>忽略大小写查找</td></tr><tr><td><code>-name</code></td><td>查找文件名称</td></tr><tr><td><code>-regex</code></td><td>正则查找</td></tr><tr><td><code>!</code></td><td>否定匹配</td></tr></tbody></table><h2 id="locate-slocate"><a href="#locate-slocate" class="headerlink" title="locate/slocate"></a>locate/slocate</h2><blockquote><p><strong>locate命令</strong>和<strong>slocate命令</strong>都用来查找文件或目录。</p><p>locate命令其实是<code>find -name</code>的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库<code>/var/lib/locatedb</code>，这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用<code>updatedb</code>命令，手动更新数据库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate <span class="string">&quot;*.cc&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;以下所有命令仅仅只做常见用法的介绍，不做详细的参数介绍&lt;/p&gt;
&lt;p&gt;如需详细介绍，可到 &lt;a href=&quot;https://man.linuxde.net/&quot;&gt;https://man.linuxde.net&lt;/a&gt; 查阅&lt;/p&gt;
&lt;p&gt;以下的显示结果均为使用 &lt;code&gt;oh-my-zsh&lt;/code&gt; 的显示结果，如果是使用 &lt;code&gt;bash&lt;/code&gt; 可能略有差异&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：zsh 默认情况下不支持&lt;code&gt;*&lt;/code&gt;通配符匹配，需要在&lt;code&gt;~/.zshrc&lt;/code&gt;中添加&lt;code&gt;setopt nonomatch&lt;/code&gt;即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;which&quot;&gt;&lt;a href=&quot;#which&quot; class=&quot;headerlink&quot; title=&quot;which&quot;&gt;&lt;/a&gt;which&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;which命令&lt;/strong&gt;用于查找并显示给定命令的绝对路径，环境变量PATH中保存了查找命令时需要遍历的目录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般使用过程中直接使用&lt;code&gt;which 命令&lt;/code&gt;即可：&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# /usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Coding" scheme="https://www.askeynil.com/categories/Coding/"/>
    
    <category term="Shell" scheme="https://www.askeynil.com/categories/Coding/Shell/"/>
    
    
    <category term="Shell" scheme="https://www.askeynil.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>NumPy 之 mgrid、ogrid</title>
    <link href="https://www.askeynil.com/2019/1df81ffb.html"/>
    <id>https://www.askeynil.com/2019/1df81ffb.html</id>
    <published>2019-11-02T14:00:00.000Z</published>
    <updated>2019-11-02T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mgrid"><a href="#mgrid" class="headerlink" title="mgrid"></a>mgrid</h2><blockquote><p>返回密集的多维”网格“实例</p></blockquote><p>用法：<code>np.mgrid[第1维, 第2维, 第3维...]</code></p><p>维度中的写法为<code>a:b:c</code></p><ol><li><code>a</code>，起始索引</li><li><code>b</code>，结束索引</li><li><code>c</code>，步长<ol><li>如果为实数，表示间隔。区间为[a, b)，左闭右开。</li><li>如果为复数，表示个数。区间为[a, b]，左闭右闭。</li></ol></li></ol><a id="more"></a><blockquote><p>网格，顾名思义，就是创建对应点集，下面举例来说明这一点</p></blockquote><h3 id="创建一个一维的索引"><a href="#创建一个一维的索引" class="headerlink" title="创建一个一维的索引"></a>创建一个一维的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.mgrid[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br></pre></td></tr></table></figure><blockquote><p>一维跟arange()其实是一样的，这里就不做过多的介绍了</p></blockquote><h3 id="创建一个二维的索引"><a href="#创建一个二维的索引" class="headerlink" title="创建一个二维的索引"></a>创建一个二维的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">np.mgrid[<span class="number">0</span>:<span class="number">3</span>,<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[[0 0 0]</span></span><br><span class="line"><span class="comment">#   [1 1 1]</span></span><br><span class="line"><span class="comment">#   [2 2 2]]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  [[0 1 2]</span></span><br><span class="line"><span class="comment">#   [0 1 2]</span></span><br><span class="line"><span class="comment">#   [0 1 2]]]</span></span><br></pre></td></tr></table></figure><blockquote><p>其实就是创建了点集</p><ul><li>(0, 0), (0, 1), (0, 2)</li><li>(1, 0), (1, 1), (1, 2)</li><li>(2, 0), (2, 1), (2, 2)</li></ul><p>大概意思就是，第一维所有点映射到二维所有的点。就是所有的一维和二维能形成的全部的点</p></blockquote><h3 id="创建一个三维的索引"><a href="#创建一个三维的索引" class="headerlink" title="创建一个三维的索引"></a>创建一个三维的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">np.mgrid[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># [[[[0 0]</span></span><br><span class="line"><span class="comment">#    [0 0]]</span></span><br><span class="line"><span class="comment">#   [[1 1]</span></span><br><span class="line"><span class="comment">#    [1 1]]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  [[[0 0]</span></span><br><span class="line"><span class="comment">#    [1 1]]</span></span><br><span class="line"><span class="comment">#   [[0 0]</span></span><br><span class="line"><span class="comment">#    [1 1]]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  [[[0 1]</span></span><br><span class="line"><span class="comment">#    [0 1]]</span></span><br><span class="line"><span class="comment">#   [[0 1]</span></span><br><span class="line"><span class="comment">#    [0 1]]]]</span></span><br></pre></td></tr></table></figure><blockquote><p>其实就是创建了点集</p><p>(0, 0, 0), (0, 0,1)</p><p>(0, 1, 0), (0, 1,1)</p><p>(1, 0, 0), (1, 0,1)</p><p>(1, 1, 0), (1, 1,1)</p><p>一维，二维，三维能形成的所有的点</p></blockquote><h3 id="推到到N维"><a href="#推到到N维" class="headerlink" title="推到到N维"></a>推到到N维</h3><blockquote><p>实质上就是创建N维所有能形成的点</p><p>需要注意的是：在所有的例子中没有使用复数的步长，但是要知道的是复数的步长代表将a,b形成的区域等分成若干份，取对应的值，跟实数的每个数相隔的距离不同。</p></blockquote><h2 id="ogrid"><a href="#ogrid" class="headerlink" title="ogrid"></a>ogrid</h2><blockquote><p>返回开放的多维”网格“的实例</p><p>该方法跟mgrid很类似，但不是形成所有的点，而是只形成对应的数据</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.ogrid[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br></pre></td></tr></table></figure><blockquote><p>与上面的一样，没啥好说的。</p></blockquote><h3 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.ogrid[<span class="number">0</span>:<span class="number">3</span>, <span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment"># [array([[0],</span></span><br><span class="line"><span class="comment">#        [1],</span></span><br><span class="line"><span class="comment">#        [2]]), array([[0, 1, 2]])]</span></span><br></pre></td></tr></table></figure><blockquote><p>一共两维，有几维就有几个array，第一个的数据在第一维度，第二个的数据在第二维度，仅仅只有自己维度有数据，推理到多维是一样的。</p></blockquote><p>所以，该方法一般用来创建离散点集或者是离散多个多维数组使用。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;mgrid&quot;&gt;&lt;a href=&quot;#mgrid&quot; class=&quot;headerlink&quot; title=&quot;mgrid&quot;&gt;&lt;/a&gt;mgrid&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;返回密集的多维”网格“实例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用法：&lt;code&gt;np.mgrid[第1维, 第2维, 第3维...]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;维度中的写法为&lt;code&gt;a:b:c&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;，起始索引&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;，结束索引&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;，步长&lt;ol&gt;
&lt;li&gt;如果为实数，表示间隔。区间为[a, b)，左闭右开。&lt;/li&gt;
&lt;li&gt;如果为复数，表示个数。区间为[a, b]，左闭右闭。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Coding" scheme="https://www.askeynil.com/categories/Coding/"/>
    
    <category term="Python" scheme="https://www.askeynil.com/categories/Coding/Python/"/>
    
    
    <category term="Python" scheme="https://www.askeynil.com/tags/Python/"/>
    
    <category term="NumPy" scheme="https://www.askeynil.com/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 之硬币分割</title>
    <link href="https://www.askeynil.com/2019/bae2941.html"/>
    <id>https://www.askeynil.com/2019/bae2941.html</id>
    <published>2019-11-02T05:00:00.000Z</published>
    <updated>2019-11-02T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官方例程：<a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_watershed/py_watershed.html?highlight=coins">https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_watershed/py_watershed.html?highlight=coins</a></p></blockquote><h2 id="简单描述"><a href="#简单描述" class="headerlink" title="简单描述"></a>简单描述</h2><p><img src="/img/OpenCV/coins.jpg" alt="coins"></p><ol><li>获取需要分割的图片</li><li>转化为灰度图</li><li>转化为二值图</li><li>转化为距离图</li><li>分离距离图，转化为二值图</li><li>查找距离二值图的轮廓</li><li>给二值图轮廓中的每个点进行颜色标记，从<code>1</code>开始标记</li><li>将标记的图转化为固定类型的标记图（CV_32S类型）</li><li>在标记图中将二值图黑色的区域对应的位置设置标记为轮廓的数量加<code>1</code>。（非常重要，后面介绍）</li><li>使用分水岭算法将标记的图和原图关联起来。</li><li>给标记图中每块标记区域上色</li></ol><a id="more"></a><blockquote><p>话不多说，先贴代码</p></blockquote><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMarkers</span>(<span class="params">distance_binary, binary, isSystem</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isSystem:</span><br><span class="line">        <span class="comment"># 6-8 步 使用 OpenCV 提供的函数替代</span></span><br><span class="line">        compCount, markers = cv.connectedComponents(distance_binary)</span><br><span class="line">        <span class="comment"># 9. 在标记图中将二值图黑色的区域对应的位置设置标记为轮廓数量加 1</span></span><br><span class="line">        <span class="comment"># 注: connectedComponents 函数的返回值就是轮廓数加1</span></span><br><span class="line">        markers[binary == <span class="number">0</span>] = compCount</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 6. 查找距离二值图的轮廓</span></span><br><span class="line">        _, contours, _ = cv.findContours(</span><br><span class="line">            distance_binary, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 7. 给二值图轮廓中的每个点进行颜色标记，从 1 开始标记</span></span><br><span class="line">        compCount = len(contours)</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(compCount):</span><br><span class="line">            cv.drawContours(distance_binary, contours, index, index+<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 8. 将标记的图转化为固定类型的标记图</span></span><br><span class="line">        markers = np.int32(distance_binary)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 9. 在标记图中将二值图黑色的区域对应的位置设置标记为轮廓数量加 1</span></span><br><span class="line">        compCount += <span class="number">1</span></span><br><span class="line">        markers[binary == <span class="number">0</span>] = compCount</span><br><span class="line">    <span class="keyword">return</span> compCount, markers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 获取需要分割的图片</span></span><br><span class="line">src = cv.imread(<span class="string">&quot;./img/coins.jpg&quot;</span>)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 转化为灰度图</span></span><br><span class="line">gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.imshow(<span class="string">&quot;gray&quot;</span>, gray)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 转化为二值图</span></span><br><span class="line">_, binary = cv.threshold(gray, <span class="number">0</span>, <span class="number">255</span>,</span><br><span class="line">                         cv.THRESH_BINARY_INV | cv.THRESH_OTSU)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, binary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 转化为距离图</span></span><br><span class="line">distance = cv.distanceTransform(binary, cv.DIST_L2, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 将距离图标准化到 0,1 之间</span></span><br><span class="line">cv.normalize(distance, distance, <span class="number">0</span>, <span class="number">1.0</span>, cv.NORM_MINMAX)</span><br><span class="line">cv.imshow(<span class="string">&quot;distance&quot;</span>, distance)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 分离距离图, 转化为二值图</span></span><br><span class="line">_, distance_binary = cv.threshold(distance, <span class="number">0.8</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">distance_binary = distance_binary.astype(np.uint8)</span><br><span class="line">cv.imshow(<span class="string">&quot;distance_binary&quot;</span>, distance_binary)</span><br><span class="line"></span><br><span class="line">compCount, markers = findMarkers(distance_binary, binary, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10. 使用分水岭算法注水</span></span><br><span class="line">cv.watershed(src, markers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11. 给注水之后的标记图上色</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, compCount+<span class="number">1</span>):</span><br><span class="line">    src[markers == index] = np.random.randint(<span class="number">0</span>, <span class="number">256</span>, size=(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">cv.imshow(<span class="string">&quot;water_later&quot;</span>, src)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    s = cv.waitKey(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">if</span> s == ord(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++ 实现"></a>C++ 实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/opencv.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findMarkers</span><span class="params">(<span class="keyword">const</span> Mat &amp;distance_binary, <span class="keyword">const</span> Mat &amp;binary, Mat &amp;markers,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> &amp;compCount, <span class="keyword">bool</span> isSystem)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isSystem) &#123;</span><br><span class="line">        <span class="comment">// 6-8 步 使用 OpenCV 提供的函数替代</span></span><br><span class="line">        compCount = connectedComponents(distance_binary, markers);</span><br><span class="line">        <span class="comment">// 9. 在标记图中将二值图黑色的区域对应的位置设置标记为轮廓数量加 1</span></span><br><span class="line">        <span class="comment">// 注: connectedComponents 函数的返回值就是轮廓数加1</span></span><br><span class="line">        markers.setTo(compCount, <span class="number">255</span> - binary);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 6. 查找距离二值图的轮廓</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line">        findContours(distance_binary, contours, RETR_EXTERNAL,</span><br><span class="line">                     CHAIN_APPROX_SIMPLE);</span><br><span class="line">        compCount = contours.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 给二值图轮廓中的每个点进行颜色标记，从 1 开始标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; compCount; i++) &#123;</span><br><span class="line">            drawContours(distance_binary, contours, i, Scalar(i + <span class="number">1</span>), <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8. 将标记的图转化为固定类型的标记图</span></span><br><span class="line">        distance_binary.convertTo(markers, CV_32S);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9. 在标记图中将二值图黑色的区域对应的位置设置标记为轮廓数量加 1</span></span><br><span class="line">        markers.setTo(++compCount, <span class="number">255</span> - binary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取需要分割的图片</span></span><br><span class="line">    Mat src = imread(<span class="string">&quot;./img/coins.jpg&quot;</span>);</span><br><span class="line">    imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 转化为灰度图</span></span><br><span class="line">    Mat gray;</span><br><span class="line">    cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">    imshow(<span class="string">&quot;gray&quot;</span>, gray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转化为二值图</span></span><br><span class="line">    Mat binary;</span><br><span class="line">    threshold(gray, binary, <span class="number">0</span>, <span class="number">255</span>, THRESH_BINARY_INV | THRESH_OTSU);</span><br><span class="line">    imshow(<span class="string">&quot;binary&quot;</span>, binary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 转化为距离图</span></span><br><span class="line">    Mat distance;</span><br><span class="line">    distanceTransform(binary, distance, DIST_L2, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 将距离图标准化到 0, 1 之间</span></span><br><span class="line">    normalize(distance, distance, <span class="number">0</span>, <span class="number">1</span>, NORM_MINMAX);</span><br><span class="line">    imshow(<span class="string">&quot;distance&quot;</span>, distance);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.分离距离图,转化为二值</span></span><br><span class="line">    Mat distance_binary;</span><br><span class="line">    threshold(distance, distance_binary, <span class="number">0.8</span>, <span class="number">255</span>, THRESH_BINARY);</span><br><span class="line">    <span class="comment">// 5.1 将distance_binary 转化到 CV_8U</span></span><br><span class="line">    Mat distance_binary2;</span><br><span class="line">    distance_binary.convertTo(distance_binary2, CV_8U);</span><br><span class="line">    imshow(<span class="string">&quot;distance_binary&quot;</span>, distance_binary2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6-9 步</span></span><br><span class="line">    Mat markers;</span><br><span class="line">    <span class="keyword">int</span> compCount;</span><br><span class="line">    findMarkers(distance_binary2, binary, markers, compCount, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10. 使用分水岭算法注水</span></span><br><span class="line">    watershed(src, markers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 11. 给注水后的标记图上色</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Vec3b&gt; colorTab;</span><br><span class="line">    RNG rng;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; compCount; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> g = rng.uniform(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">        <span class="keyword">int</span> b = rng.uniform(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">        <span class="keyword">int</span> r = rng.uniform(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">        colorTab.emplace_back(g, b, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; markers.rows; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; markers.cols; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = markers.at&lt;<span class="keyword">int</span>&gt;(i, j);</span><br><span class="line">            <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; compCount)</span><br><span class="line">                src.at&lt;Vec3b&gt;(i, j) = Vec3b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                src.at&lt;Vec3b&gt;(i, j) = colorTab[index - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    imshow(<span class="string">&quot;water_later&quot;</span>, src);</span><br><span class="line"></span><br><span class="line">    waitKey();</span><br><span class="line">    destroyAllWindows();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终显示结果"><a href="#最终显示结果" class="headerlink" title="最终显示结果"></a>最终显示结果</h2><blockquote><p>这里仅仅使用 Python 版代码的截图，C++版运行结果是一样的。</p></blockquote><p><img src="/img/OpenCV/coins_result.jpg" alt="coins_result"></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>在分水岭算法中，我们要找到分割次数，就是要找到标记点，即<code>Markers</code>。</p><p>在本例中使用距离变换算法统计出硬币的个数，即24个，使用距离变换后的二值图，可以很好的打出24个标记，标记每一个硬币。但是我们还需要将背景屏蔽掉，即将不是硬币的地方打一个标记，不然使用分水岭算法的时候水会漫出去导致未找到正确的边界。</p><hr><p>思路分析清晰，最后剩下的就是怎么打标记的问题了？</p><p>两种解决办法：</p><ol><li>查找轮廓</li><li>使用系统的<code>connectedComponents</code>的函数</li></ol><h3 id="用轮廓查找来打标记"><a href="#用轮廓查找来打标记" class="headerlink" title="用轮廓查找来打标记"></a>用轮廓查找来打标记</h3><blockquote><p>仅使用 Python 代码来分析逻辑，C++ 同理</p><p>再贴一遍代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6. 查找距离二值图的轮廓</span></span><br><span class="line">_, contours, _ = cv.findContours(</span><br><span class="line">    distance_binary, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 给二值图轮廓中的每个点进行颜色标记，从 1 开始标记</span></span><br><span class="line">compCount = len(contours)</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(compCount):</span><br><span class="line">    cv.drawContours(distance_binary, contours, index, index+<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 将标记的图转化为固定类型的标记图</span></span><br><span class="line">markers = np.int32(distance_binary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. 在标记图中将二值图黑色的区域对应的位置设置标记为轮廓数量加 1</span></span><br><span class="line">compCount += <span class="number">1</span></span><br><span class="line">markers[binary == <span class="number">0</span>] = compCount</span><br></pre></td></tr></table></figure><ol><li>因为图片已经是距离变换后的二值化的图了，所以能查找到准确的轮廓。</li><li>查找到轮廓后，给每个轮廓填充不一样的颜色即可（本质就是标记，好让分水岭算法去计算边界）</li><li>背景也要打上一个标记（这步很重要，不然会粘连起来）</li></ol><h2 id="使用connectedComponents来打标记"><a href="#使用connectedComponents来打标记" class="headerlink" title="使用connectedComponents来打标记"></a>使用<a href="https://docs.opencv.org/master/d3/dc0/group__imgproc__shape.html#gaedef8c7340499ca391d459122e51bef5"><code>connectedComponents</code></a>来打标记</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connectedComponents(image, markers)</span><br></pre></td></tr></table></figure><ol><li><code>image</code>：要标记的8位单通道的图</li><li><code>markers</code>：输出的标记图</li></ol><p>该方法在<code>C++</code>中有一个返回值，返回值的代表了标记的个数<code>N</code></p><p>该方法在<code>Python</code>中有两个返回值，第一个代表标记的个数<code>N</code>和输出的标记图<code>Markers</code></p><blockquote><p>该方法要注意的是：标签总数为[0, N-1]，0表示背景标签，即<code>image</code>为0的那部分。后面还需做特定的处理。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;官方例程：&lt;a href=&quot;https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_watershed/py_watershed.html?highlight=coins&quot;&gt;https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_watershed/py_watershed.html?highlight=coins&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简单描述&quot;&gt;&lt;a href=&quot;#简单描述&quot; class=&quot;headerlink&quot; title=&quot;简单描述&quot;&gt;&lt;/a&gt;简单描述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/OpenCV/coins.jpg&quot; alt=&quot;coins&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取需要分割的图片&lt;/li&gt;
&lt;li&gt;转化为灰度图&lt;/li&gt;
&lt;li&gt;转化为二值图&lt;/li&gt;
&lt;li&gt;转化为距离图&lt;/li&gt;
&lt;li&gt;分离距离图，转化为二值图&lt;/li&gt;
&lt;li&gt;查找距离二值图的轮廓&lt;/li&gt;
&lt;li&gt;给二值图轮廓中的每个点进行颜色标记，从&lt;code&gt;1&lt;/code&gt;开始标记&lt;/li&gt;
&lt;li&gt;将标记的图转化为固定类型的标记图（CV_32S类型）&lt;/li&gt;
&lt;li&gt;在标记图中将二值图黑色的区域对应的位置设置标记为轮廓的数量加&lt;code&gt;1&lt;/code&gt;。（非常重要，后面介绍）&lt;/li&gt;
&lt;li&gt;使用分水岭算法将标记的图和原图关联起来。&lt;/li&gt;
&lt;li&gt;给标记图中每块标记区域上色&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Coding" scheme="https://www.askeynil.com/categories/Coding/"/>
    
    <category term="OpenCV" scheme="https://www.askeynil.com/categories/Coding/OpenCV/"/>
    
    
    <category term="OpenCV" scheme="https://www.askeynil.com/tags/OpenCV/"/>
    
    <category term="C++" scheme="https://www.askeynil.com/tags/C/"/>
    
    <category term="Python" scheme="https://www.askeynil.com/tags/Python/"/>
    
    <category term="分水岭算法" scheme="https://www.askeynil.com/tags/%E5%88%86%E6%B0%B4%E5%B2%AD%E7%AE%97%E6%B3%95/"/>
    
    <category term="边缘检测" scheme="https://www.askeynil.com/tags/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/"/>
    
    <category term="轮廓提取" scheme="https://www.askeynil.com/tags/%E8%BD%AE%E5%BB%93%E6%8F%90%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 常用方法整理</title>
    <link href="https://www.askeynil.com/2019/144d9f9d.html"/>
    <id>https://www.askeynil.com/2019/144d9f9d.html</id>
    <published>2019-11-02T02:00:00.000Z</published>
    <updated>2019-11-02T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下只列举常用的方法和常用的参数，例如枚举，只会将最常用的几个列举出来，详细的请参考官方文档。</p><p>对于<code>C++</code>默认使用了<code>using namespace cv;</code></p><p>对于<code>Python</code>默认使用了<code>import cv2 as cv</code> 和 <code>import numpy as np</code></p><p>OpenCV版本：3.4.7</p></blockquote><h2 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imread(filename, flags)</span><br></pre></td></tr></table></figure><ol><li><code>filename</code>：图片路径</li><li><code>flags</code>：<ol><li><code>IMREAD_COLOR</code>：默认值，返回3通道的BGR色彩图像</li><li><code>IMREAD_GRAYSCALE</code>：返回单通道灰色图片</li><li><code>IMREAD_UNCHANGED</code>：按原样返回。</li></ol></li></ol><a id="more"></a><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat src = imread(<span class="string">&quot;1.jpg&quot;</span>, IMREAD_UNCHANGED);</span><br></pre></td></tr></table></figure><p>对于<code>C++</code>来说，<code>imread</code>的返回值为<code>Mat</code>类，该类是OpenCV的自建类</p><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src = cv.imread(<span class="string">&quot;1.jpg&quot;</span>, cv.IMREAD_UNCHANGED)</span><br></pre></td></tr></table></figure><p>对于<code>Python</code>来说，<code>imread</code>的返回值为<code>NumPy.ndarray</code></p><blockquote><p>对于图像矩阵，<code>C++</code>都是自建的<code>Mat</code>类，而<code>Python</code>则是<code>numpy.ndarray</code>。后面不在赘述这个问题。</p></blockquote><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imwrite(filename, img)</span><br></pre></td></tr></table></figure><ol><li><code>filename</code>：图片要保存的路径</li><li><code>img</code>：图像矩阵</li></ol><blockquote><p>比较简单，不做详细介绍。</p><p>该方法还有一个参数，可以参数编码，详细点击<a href="https://docs.opencv.org/master/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce">imwrite</a></p></blockquote><h2 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show(winname, src)</span><br></pre></td></tr></table></figure><ol><li><code>winname</code>：窗口的名称</li><li><code>src</code>：显示的图片矩阵</li></ol><h2 id="图片缩放"><a href="#图片缩放" class="headerlink" title="图片缩放"></a>图片缩放</h2><p>图片缩放常见算法有：</p><ol><li>最近领域插值法</li><li>双线性插值法</li><li>双三次插值法</li></ol><p>OpenCV官方提供的<code>resize()</code>的函数（默认为双线性插值法）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resize(src, dst, dsize, fx, fy, interpolation)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>要缩放的图片</li><li><code>dst</code>输出的图像</li><li><code>dsize</code>输出图像的大小<ul><li><code>C++</code>：<code>Size</code>类</li><li><code>Python</code>：元组，前面为<code>width</code>，后面为<code>height</code></li></ul></li><li><code>fx</code>：沿水平轴的比例因子<ul><li>当它等于 0 时，计算为 <code>dsize.width / src.cols</code></li></ul></li><li><code>fy</code>：沿垂直轴的比例因子<ul><li>当它等于 0 时，计算为 <code>dsize.height / src.rows</code></li></ul></li><li><code>interpolation</code>：缩放用的方法<ol><li><code>INTER_NEAREST</code>：最近邻域插值法</li><li><code>INTER_LINEAR</code>：双线性插值法</li><li><code>INTER_CUBIC</code>：双三次插值法</li></ol></li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line">resize(src, dst, Size(<span class="number">100</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.resize(src, (<span class="number">100</span>, <span class="number">100</span>), interpolation=cv.INTER_NEAREST)</span><br></pre></td></tr></table></figure><h2 id="图像操作"><a href="#图像操作" class="headerlink" title="图像操作"></a>图像操作</h2><h3 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h3><p>矩阵的缩放、旋转、位移都可以使用矩阵变换来实现</p><p>缩放矩阵：<br>$$<br>\begin{bmatrix}<br>k_x &amp; 0 &amp; 0 \<br>0 &amp; k_y &amp; 0<br>\end{bmatrix}<br>$$<br>旋转矩阵：<br>$$<br>\begin{bmatrix}<br>cos\theta &amp; -sin\theta &amp; 0 \<br>sin\theta &amp; cos\theta &amp; 0<br>\end{bmatrix}<br>$$<br>位移：<br>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; t_x \<br>0 &amp; 1 &amp; t_y<br>\end{bmatrix}<br>$$<br><a href="https://docs.opencv.org/master/da/d54/group__imgproc__transform.html#ga0203d9ee5fcd28d40dbc4a1ea4451983">仿射变换</a>的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warpAffine(src, dst, M, dsize)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：输入的图像</li><li><code>dst</code>：输出的图像</li><li><code>M</code>：（2 x 3）的转换矩阵</li><li><code>dsize</code>：输出图像的尺寸</li></ol><p><a href="https://docs.opencv.org/master/da/d54/group__imgproc__transform.html#gafbbc470ce83812914a70abfb604f4326">获取旋转矩阵的方法</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getRotationMatrix2D(center, angle, scale)</span><br></pre></td></tr></table></figure><ol><li><code>center</code>：旋转中心<ol><li><code>c++</code>：类型为<code>Point2f</code></li><li><code>Python</code>：类型为元组，两个元素，分别是<code>x，y</code>。</li></ol></li><li><code>angle</code>：旋转角度，单位为度，正值表示逆时针旋转。</li><li><code>scale</code>：缩放比例</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 平移矩阵</span></span><br><span class="line">Mat translation_matrix = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩放矩阵</span></span><br><span class="line">Mat scale_matrix = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转矩阵</span></span><br><span class="line">Mat rotated_matrix = getRotationMatrix2D(</span><br><span class="line">    Point2f(src.<span class="built_in">size</span>().<span class="built_in">width</span> / <span class="number">2</span>, src.<span class="built_in">size</span>().<span class="built_in">height</span> / <span class="number">2</span>), <span class="number">45</span>, <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对应的图形</span></span><br><span class="line">Mat dst;</span><br><span class="line"><span class="comment">// 平移</span></span><br><span class="line"><span class="comment">// warpAffine(src, dst, translation_matrix, src.size());</span></span><br><span class="line"><span class="comment">// 缩放</span></span><br><span class="line"><span class="comment">// warpAffine(src, dst, scale_matrix, src.size());</span></span><br><span class="line"><span class="comment">// 旋转</span></span><br><span class="line"><span class="comment">// warpAffine(src, dst, rotated_matrix, src.size());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// imshow(&quot;dst&quot;, dst);</span></span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取图像的高和宽</span></span><br><span class="line">height, width = src.shape[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平移矩阵</span></span><br><span class="line">translation_matrix = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                                 [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="comment"># 缩放矩阵</span></span><br><span class="line">scale_matrix = np.float32([[<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                           [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 旋转矩阵</span></span><br><span class="line">rotated_matrix = cv.getRotationMatrix2D((width/<span class="number">2</span>, height/<span class="number">2</span>), <span class="number">45</span>, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平移</span></span><br><span class="line"><span class="comment"># dst = cv.warpAffine(src, translation_matrix, src.shape[1::-1])</span></span><br><span class="line"><span class="comment"># 缩放</span></span><br><span class="line"><span class="comment"># dst = cv.warpAffine(src, scale_matrix, src.shape[1::-1])</span></span><br><span class="line"><span class="comment"># 旋转</span></span><br><span class="line"><span class="comment"># dst = cv.warpAffine(src, rotated_matrix, src.shape[1::-1])</span></span><br><span class="line"><span class="comment"># 解释一下src.shape[1::-1]</span></span><br><span class="line"><span class="comment"># 在src.shape中，第一个值代表height，第二个代表width</span></span><br><span class="line"><span class="comment"># 在 warpAffine 参数中 dsize, 第一个表示width, 第二个表示height</span></span><br><span class="line"><span class="comment"># 综上，将其反过来即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cv.imshow(&quot;dst&quot;, dst)</span></span><br></pre></td></tr></table></figure><h3 id="透视变换"><a href="#透视变换" class="headerlink" title="透视变换"></a>透视变换</h3><p>透视变换（Perspective Transformation)是指利用透视中心、像点、目标点三点共线的条件，按透视旋转定律使承影面（透视面）绕迹线（透视轴）旋转某一角度，破坏原有的投影光线束，仍能保持承影面上投影几何图形不变的变换。</p><p><img src="/img/OpenCV/1.jpg" alt="ros_topic">  </p><p><a href="https://docs.opencv.org/master/da/d54/group__imgproc__transform.html#gaf73673a7e8e18ec6963e3774e6a94b87">透视变换</a>的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warp(src, dst, M, dsize)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：输入的图像</li><li><code>dst</code>：输出的图像</li><li><code>M</code>：（3 x 3）转换矩阵</li><li><code>dsize</code>：输出图像的尺寸</li></ol><p><a href="https://docs.opencv.org/master/da/d54/group__imgproc__transform.html#gae66ba39ba2e47dd0750555c7e986ab85">获取透视变换需要的矩阵</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getPerspectiveTransform(src, dst)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：原图中四边形顶点的坐标<ol><li><code>C++</code>：类型为<code>vector&lt;Point2f&gt;</code></li><li><code>Python</code>：类型为<code>numpy.ndarray</code> ，<code>dtype</code>为<code>numpy.float32</code></li></ol></li><li><code>dst</code>：目标图像中的对应四个点的坐标，类型同上。</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里仅仅说明用法，参数根据实际情况，src_point和dst_point应该不一样才对</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Point2f&gt; src_point&#123;Point2i(<span class="number">0</span>, <span class="number">0</span>), Point2i(<span class="number">0</span>, <span class="number">1</span>), Point2i(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">                              Point2i(<span class="number">1</span>, <span class="number">1</span>)&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point2f&gt; dst_point&#123;Point2i(<span class="number">0</span>, <span class="number">0</span>), Point2i(<span class="number">0</span>, <span class="number">1</span>), Point2i(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">                          Point2i(<span class="number">1</span>, <span class="number">1</span>)&#125;;</span><br><span class="line">Mat matrix = getPerspectiveTransform(src_point, dst_point);</span><br><span class="line">Mat dst;</span><br><span class="line">warpPerspective(src, dst, matrix, src.<span class="built_in">size</span>());</span><br><span class="line">imshow(<span class="string">&quot;dst&quot;</span>, dst);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同上</span></span><br><span class="line">src_point = np.float32(((<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">dst_point = np.float32(((<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">print(type(src_point))</span><br><span class="line">matrix = cv.getPerspectiveTransform(src_point, dst_point)</span><br><span class="line">dst = cv.warpPerspective(src, matrix, src.shape[<span class="number">1</span>::<span class="number">-1</span>])</span><br><span class="line">cv.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br></pre></td></tr></table></figure><h2 id="图像金字塔（上、下采样）"><a href="#图像金字塔（上、下采样）" class="headerlink" title="图像金字塔（上、下采样）"></a>图像金字塔（上、下采样）</h2><h3 id="上采样"><a href="#上采样" class="headerlink" title="上采样"></a><a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#gada75b59bdaaca411ed6fee10085eb784">上采样</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyrUp(src, dst)</span><br></pre></td></tr></table></figure><h3 id="下采样"><a href="#下采样" class="headerlink" title="下采样"></a><a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#gaf9bba239dfca11654cb7f50f889fc2ff">下采样</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyrDown(src, dst)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：原图</li><li><code>dst</code>：采样结果图</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Mat up_dst, down_dst;</span><br><span class="line"><span class="comment">// 上采样</span></span><br><span class="line">pyrUp(src, up_dst);</span><br><span class="line"><span class="comment">// 下采样</span></span><br><span class="line">pyrDown(src, down_dst);</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">&quot;up_dst&quot;</span>, up_dst);</span><br><span class="line">imshow(<span class="string">&quot;down_dst&quot;</span>, down_dst);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上采样</span></span><br><span class="line">up_dst = cv.pyrUp(src)</span><br><span class="line"><span class="comment"># 下采样</span></span><br><span class="line">down_dst = cv.pyrDown(src)</span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">&quot;up_dst&quot;</span>, up_dst)</span><br><span class="line">cv.imshow(<span class="string">&quot;down_dst&quot;</span>, down_dst)</span><br></pre></td></tr></table></figure><h2 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a><a href="https://docs.opencv.org/master/d2/de8/group__core__array.html#gafafb2513349db3bcff51f54ee5592a19">图像融合</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addWeighted(src1, alpha, src2, beta, gamma, dst)</span><br></pre></td></tr></table></figure><ol><li><code>src1</code>：图1</li><li><code>alpha</code>：图1系数，double</li><li><code>src2</code>：图2</li><li><code>beta</code>：图2系数，double</li><li><code>gamma</code>：添加的标量</li><li><code>dst</code>：输出图像</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line">addWeighted(src, <span class="number">0.5</span>, src, <span class="number">0.5</span>, <span class="number">100</span>, dst);</span><br><span class="line">imshow(<span class="string">&quot;dst&quot;</span>, dst);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.addWeighted(src, <span class="number">0.5</span>, src, <span class="number">0.5</span>, <span class="number">100</span>)</span><br><span class="line">cv.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br></pre></td></tr></table></figure><h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><h3 id="绘制线段"><a href="#绘制线段" class="headerlink" title="绘制线段"></a><a href="https://docs.opencv.org/3.4.7/d6/d6e/group__imgproc__draw.html#ga7078a9fae8c7e7d13d24dac2520ae4a2">绘制线段</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line(src, pt1, pt2, color, thickness, lineType)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：图片</li><li><code>pt1</code>：起点<ol><li><code>C++</code>：<code>Point</code>类型</li><li><code>Python</code>：元组类型</li></ol></li><li><code>pt2</code>：终止点，类型同上</li><li><code>color</code>：颜色<ol><li><code>C++</code>：<code>Scalar</code>类型，GBR</li><li><code>Python</code>：颜色（GBR）元组</li></ol></li><li><code>thickness</code>：线宽，<code>int</code>，默认值为1</li><li><code>lineType</code>：线类型<ol><li><code>LINE_AA</code>：抗锯齿线</li><li><code>LINE_8</code>：8连线，默认值</li></ol></li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">line</span>(src, Point(<span class="number">100</span>, <span class="number">100</span>), Point(<span class="number">200</span>, <span class="number">200</span>), Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.line(src, (<span class="number">100</span>, <span class="number">100</span>), (<span class="number">200</span>, <span class="number">200</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a><a href="https://docs.opencv.org/3.4.7/d6/d6e/group__imgproc__draw.html#ga07d2f74cadcf8e305e810ce8eed13bc9">绘制矩形</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rectangle(src, pt1, pt2, color, thickness, lineType)</span><br></pre></td></tr></table></figure><p>参数同上，但是<code>pt1</code>和<code>pt2</code>一定是矩形的对角点。</p><blockquote><p><strong>注意：</strong>如果<code>thickness</code>为负数，则会使用<code>color</code>填充整个矩阵</p></blockquote><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rectangle(src, Point(<span class="number">100</span>, <span class="number">100</span>), Point(<span class="number">200</span>, <span class="number">200</span>), Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.rectangle(src, (<span class="number">100</span>, <span class="number">100</span>), (<span class="number">200</span>, <span class="number">200</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><h3 id="绘制圆"><a href="#绘制圆" class="headerlink" title="绘制圆"></a><a href="https://docs.opencv.org/3.4.7/d6/d6e/group__imgproc__draw.html#gaf10604b069374903dbd0f0488cb43670">绘制圆</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">circle(src, center, radius, color, thickness, lineType)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：图片</li><li><code>center</code>：圆的中点<ol><li><code>C++</code>：<code>Point</code>类型</li><li><code>Python</code>：元组类型，<code>(x, y)</code></li></ol></li><li><code>radius</code>：半径，<code>int</code></li><li><code>color</code>：颜色，同<code>line</code></li><li><code>thickness</code>：线宽，同<code>line</code></li><li><code>lineType</code>：线类型，同<code>line</code></li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">circle</span>(src, Point(<span class="number">100</span>, <span class="number">100</span>), <span class="number">100</span>, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.circle(src, (<span class="number">100</span>, <span class="number">100</span>), <span class="number">100</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><h3 id="绘制多边形"><a href="#绘制多边形" class="headerlink" title="绘制多边形"></a>绘制多边形</h3><blockquote><p>该方法用于绘制多条多边形曲线</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">polylines(src, pts, isClosed, color, thickness, lineType)</span><br></pre></td></tr></table></figure><p>与上相同的参数不做解释（<code>src</code>、<code>color</code>、<code>thickness</code>、<code>lineType</code>）</p><ol><li><code>pts</code>：顶点集合，二维数组，分别表示多边形数量，多边形的顶点位置</li><li><code>isClosed</code>：是否闭合。如果闭合会从最后一个顶点到第一个顶点绘制一条直线。</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; pts&#123;</span><br><span class="line">        &#123;Point(<span class="number">100</span>, <span class="number">100</span>), Point(<span class="number">200</span>, <span class="number">200</span>), Point(<span class="number">300</span>, <span class="number">400</span>), Point(<span class="number">200</span>, <span class="number">100</span>)&#125;&#125;;</span><br><span class="line">polylines(src, pts, <span class="literal">false</span>, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pts = np.array([[(<span class="number">100</span>, <span class="number">100</span>), (<span class="number">200</span>, <span class="number">200</span>), (<span class="number">300</span>, <span class="number">400</span>), (<span class="number">200</span>, <span class="number">100</span>)]])</span><br><span class="line">cv.polylines(src, pts, <span class="literal">False</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br></pre></td></tr></table></figure><h3 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putText(src, text, org, fontFace, fontScale, Color, lineType)</span><br></pre></td></tr></table></figure><p>与上相同的参数不做介绍。</p><ol><li><code>text</code>：文字文本，<code>string</code>类型</li><li><code>org</code>：文字左下角的坐标位置<ol><li><code>C++</code>：<code>Point</code>类型</li><li><code>Python</code>：元组类型，<code>(x, y)</code></li></ol></li><li><code>fontFace</code>：字体名称。具体见<a href="https://docs.opencv.org/3.4.7/d0/de1/group__core.html#ga0f9314ea6e35f99bb23f29567fc16e11">HersheyFonts</a>，<strong>注意</strong>：OpenCV默认不支持中文</li><li><code>fontScale</code>：字体的缩放大小。</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putText(src, <span class="string">&quot;I&#x27;m a text&quot;</span>, Point(<span class="number">100</span>, <span class="number">100</span>), FONT_HERSHEY_PLAIN, <span class="number">1</span>, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.putText(src, <span class="string">&quot;I&#x27;m a text&quot;</span>, (<span class="number">100</span>, <span class="number">100</span>), cv.FONT_HERSHEY_PLAIN, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br></pre></td></tr></table></figure><h2 id="转换颜色空间"><a href="#转换颜色空间" class="headerlink" title="转换颜色空间"></a>转换颜色空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cvtColor(src, dst, code)</span><br></pre></td></tr></table></figure><ol><li><code>code</code>：颜色空间转换代码</li></ol><blockquote><p>该方法我们常常用来将原图转换为灰色图和将GBR转换为HSV</p></blockquote><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line">cvtColor(src, dst, COLOR_BGR2GRAY);</span><br><span class="line">imshow(<span class="string">&quot;dst&quot;</span>, dst);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br></pre></td></tr></table></figure><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><h3 id="统计直方图"><a href="#统计直方图" class="headerlink" title="统计直方图"></a>统计直方图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calcHist(images, channels, mask,hist,histSize, ranges)</span><br></pre></td></tr></table></figure><ol><li><code>images</code>：需要处理的图片数组</li><li><code>channels</code>：计算对应图片的哪个通道</li><li><code>mask</code>：蒙版</li><li><code>hist</code>：输出的直方图数组</li><li><code>histSize</code>：输出的直方图的大小</li><li><code>ranges</code>：范围</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat hist;</span><br><span class="line">calcHist(<span class="built_in">vector</span>&lt;Mat&gt;&#123;src&#125;, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">0</span>&#125;,　Mat(), hist, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">256</span>&#125;,</span><br><span class="line">         <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&#123;<span class="number">0</span>, <span class="number">256</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里的vector后面使用的是大括号，注意vector大括号初始化和小括号初始化的差别。</p><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hist = cv.calcHist([src], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br></pre></td></tr></table></figure><p>或者使用<code>numpy</code>的方式统计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计第1个通道,其他类似</span></span><br><span class="line">hist = np.bincount(src[:,<span class="number">0</span>].ravel(), minlength=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h3><p>C++中绘制直方图比较麻烦，我们使用<code>polylines</code>取画出多边形，从而形成直方图。抽成自定义函数如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawHist</span><span class="params">(Mat &amp;hist, <span class="keyword">const</span> Scalar &amp;color = Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bin = <span class="number">4</span>, <span class="built_in">width</span> = <span class="number">256</span> * bin, <span class="built_in">height</span> = <span class="number">800</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; points;</span><br><span class="line">    <span class="function">Mat <span class="title">dst</span><span class="params">(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC3)</span></span>;</span><br><span class="line">    <span class="comment">// 标准化</span></span><br><span class="line">    Mat out;</span><br><span class="line">    normalize(hist, out, <span class="number">0</span>, <span class="built_in">height</span> - <span class="number">100</span>, NORM_MINMAX);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i; i &lt; hist.<span class="built_in">size</span>().<span class="built_in">height</span>; i++) &#123;</span><br><span class="line">        points.push_back(Point(i * bin, <span class="number">790</span> - out.at&lt;<span class="keyword">float</span>&gt;(i)));</span><br><span class="line">    &#125;</span><br><span class="line">    polylines(dst, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt;&#123;points&#125;, <span class="literal">false</span>, color, <span class="number">1</span>, LINE_AA);</span><br><span class="line">    imshow(<span class="string">&quot;hist&quot;</span>, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Python中使用Matplotlib即可，方便快捷高效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(hist)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="HSV模型"><a href="#HSV模型" class="headerlink" title="HSV模型"></a>HSV模型</h2><p>HSV(Hue, Saturation, Value)是根据颜色的直观特性由A. R. Smith在1978年创建的一种颜色空间, 也称六角锥体模型(Hexcone Model)。</p><p>这个模型中颜色的参数分别是：色调（H），饱和度（S），明度（V）</p><ol><li>当 S = 1，V=1时，H所代表的任何颜色被称为纯色</li><li>当 S = 0，即饱和度为0，颜色最浅，最浅被描述为灰色，灰色的亮度由V决定，此时H无意义</li><li>当 V = 0 时，颜色最暗，最暗被描述为黑色，因此此时H和S均无意义。</li></ol><p><strong>注意</strong>：在OpenCV中，H、S、V的取值范围是[0, 180]、[0, 255]、[0, 255]，而不是[0, 360]、[0, 1]、[0, 1]</p><p>下面列出部分的HSV空间颜色值：</p><p><img src="/img/OpenCV/2.jpg" alt="ros_topic">  </p><h2 id="图像二值化"><a href="#图像二值化" class="headerlink" title="图像二值化"></a>图像二值化</h2><h3 id="手动设置阈值"><a href="#手动设置阈值" class="headerlink" title="手动设置阈值"></a><a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#gae8a4a146d1ca78c626a53577199e9c57">手动设置阈值</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threshold(src, dst, thresh, maxval, type)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：单通道灰度图</li><li><code>thresh</code>：阈值</li><li><code>maxval</code>：最大值（一般取255）</li><li><code>type</code>：类型</li></ol><p>当前公式解析有问题，<a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#ggaa9e58d2860d4afa658ef70a9b1115576a19120b1a11d8067576cc24f4d2f03754">公式来源</a></p><table><thead><tr><th>参数名</th><th>参数解释</th></tr></thead><tbody><tr><td>THRESH_BINARY</td><td>$dst\left( x,y\right) =\begin{cases}maxval &amp; if\ src(x, y)\ &gt;\ thresh \ 0\end{cases}$</td></tr><tr><td>THRESH_BINARY_INV</td><td>$dst\left( x,y\right) =\begin{cases}0 &amp; if\ src(x, y)\ &gt;\ thresh \ maxval\end{cases}$</td></tr><tr><td>THRESH_TRUNC</td><td>$dst\left( x,y\right) =\begin{cases}threshold &amp; if\ src(x, y)\ &gt;\ thresh \ src(x,y)\end{cases}$</td></tr><tr><td>THRESH_TOZERO</td><td>$dst\left( x,y\right) =\begin{cases}src(x,y) &amp; if\ src(x, y)\ &gt;\ thresh \ 0\end{cases}$</td></tr><tr><td>THRESH_TOZERO_INV</td><td>$dst\left( x,y\right) =\begin{cases}0 &amp; if\ src(x, y)\ &gt;\ thresh \ src(x,y) \end{cases}$</td></tr></tbody></table><p>OpenCV官网使用了一张图片来描述这5个参数不同的含义，如下：</p><p><img src="/img/OpenCV/3.jpg" alt="ros_topic">  </p><p>除了上面的5个参数，还有两个自动算法标志：</p><table><thead><tr><th>参数名</th><th>参数解释</th></tr></thead><tbody><tr><td>THRESH_OTSU</td><td>大津算法</td></tr><tr><td>THRESH_TRIANGLE</td><td>三角算法（常用在图中出现大量的近视颜色的情况下）</td></tr></tbody></table><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line"><span class="comment">// 手动填写阈值</span></span><br><span class="line">threshold(src, dst, <span class="number">100</span>, <span class="number">255</span>, THRESH_BINARY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大津算法，手动输入的阈值无效，三角算法类似，正确的阈值需要通过返回值获取。</span></span><br><span class="line">threshold(src, dst, <span class="number">100</span>, <span class="number">255</span>, THRESH_BINARY | THRESH_OTSU);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># retval 实际阈值</span></span><br><span class="line">retval, dst = cv.threshold(src, <span class="number">100</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大津算法</span></span><br><span class="line">retval, dst = cv.threshold(src, <span class="number">100</span>, <span class="number">255</span>, cv.THRESH_BINARY | cv.THRESH_OTSU)</span><br></pre></td></tr></table></figure><h3 id="自适应阈值"><a href="#自适应阈值" class="headerlink" title="自适应阈值"></a><a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#ga72b913f352e4a1b1b397736707afcde3">自适应阈值</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adaptiveThreshold(src, dst, maxValue, adaptiveMethod, thresholdType, C)</span><br></pre></td></tr></table></figure><ol><li><code>adaptiveMethod</code>：自适应阈值算法<ol><li><code>ADAPTIVE_THRESH_MEAN_C</code>：附近区域减去恒定的平均C</li><li><code>ADAPTIVE_THRESH_GAUSSIAN_C</code>：领域值减去参数C的高斯加权和</li></ol></li><li><code>thresholdType</code>：阈值类型，只允许是以下两个<ol><li><code>THRESH_BINARY</code>：超过阈值是maxval，低于阈值是0</li><li><code>THRESH_BINARY_INV</code>：超过阈值是0，低于阈值是maxval</li></ol></li><li><code>blockSize</code>：邻域大小，必须是奇数。</li><li><code>C</code>：参数C</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adaptiveThreshold(src, dst, <span class="number">255</span>, ADAPTIVE_THRESH_GAUSSIAN_C, THRESH_BINARY, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.adaptiveThreshold(src, <span class="number">255</span>, </span><br><span class="line">                           cv.ADAPTIVE_THRESH_GAUSSIAN_C, </span><br><span class="line">                           cv.THRESH_BINARY, </span><br><span class="line">                           <span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="图片卷积"><a href="#图片卷积" class="headerlink" title="图片卷积"></a>图片卷积</h2><h3 id="自定义卷积核"><a href="#自定义卷积核" class="headerlink" title="自定义卷积核"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga27c049795ce870216ddfb366086b5a04">自定义卷积核</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter2D(src, dst, ddepth, kernel)</span><br></pre></td></tr></table></figure><ol><li><code>ddepth</code>：目标图像的深度</li><li><code>kernel</code>：卷积核</li></ol><p>官网给出的计算的公式：<br>$$<br>\texttt{dst} (x,y) = \sum _{ \stackrel{0\leq x’ &lt; \texttt{kernel.cols},}{0\leq y’ &lt; \texttt{kernel.rows}} } \texttt{kernel} (x’,y’)* \texttt{src} (x+x’- \texttt{anchor.x} ,y+y’- \texttt{anchor.y} )<br>$$<br><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line"><span class="comment">// 1. 均值滤波</span></span><br><span class="line">Mat means_kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>) / <span class="number">9</span>;</span><br><span class="line"><span class="comment">// 2. 高斯模糊</span></span><br><span class="line">Mat gaussian_kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>) / <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 3. Sobel 算子</span></span><br><span class="line"><span class="comment">// 3.1 水平梯度</span></span><br><span class="line">Mat sobel_h_kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 3.2 垂直梯度</span></span><br><span class="line">Mat sobel_v_kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 4. 拉普拉斯算子</span></span><br><span class="line"><span class="comment">// 4.1 普通型</span></span><br><span class="line">Mat laplacian_normal_kernel =</span><br><span class="line">    (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 4.2 增强型</span></span><br><span class="line">Mat laplacian_strong_kernel =</span><br><span class="line">    (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 5. 锐化滤波</span></span><br><span class="line">Mat sharpen_kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">9</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以均值滤波为例，其他都是一样的使用方式</span></span><br><span class="line">filter2D(src, dst, <span class="number">-1</span>, means_kernel);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 均值滤波</span></span><br><span class="line">means_kernel = np.float32(((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                           (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                           (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))) / <span class="number">9</span></span><br><span class="line"><span class="comment"># 2. 高斯模糊</span></span><br><span class="line">gaussian_kernel = np.float32(((<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">                              (<span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>),</span><br><span class="line">                              (<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>))) / <span class="number">16</span></span><br><span class="line"><span class="comment"># 3. Sobel 算子</span></span><br><span class="line"><span class="comment"># 3.1 水平梯度</span></span><br><span class="line">sobel_h_kernel = np.float32(((<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">                             (<span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">                             (<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="comment"># 3.2 垂直梯度</span></span><br><span class="line">sobel_v_kernel = np.float32(((<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>),</span><br><span class="line">                             (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">                             (<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="comment"># 4. 拉普拉斯算子</span></span><br><span class="line"><span class="comment"># 4.1 普通型</span></span><br><span class="line">laplacian_normal_kernel = np.float32(((<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">                                      (<span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>),</span><br><span class="line">                                      (<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)))</span><br><span class="line"><span class="comment"># 4.2 增强型</span></span><br><span class="line">laplacian_strong_kernel = np.float32(((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                                      (<span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>),</span><br><span class="line">                                      (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="comment"># 5. 锐化滤波</span></span><br><span class="line">sharpen_kernel = np.float32(((<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>),</span><br><span class="line">                             (<span class="number">-1</span>, <span class="number">9</span>, <span class="number">-1</span>),</span><br><span class="line">                             (<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以均值滤波为例，其他都是一样的使用方式</span></span><br><span class="line">dst = cv.filter2D(src, <span class="number">-1</span>, means_kernel)</span><br></pre></td></tr></table></figure><blockquote><p>自定义卷积核比较灵活，只要定好卷积核，就可以使用该方法进行卷积。</p></blockquote><h3 id="均值滤波"><a href="#均值滤波" class="headerlink" title="均值滤波"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga8c45db9afe636703801b0b2e440fce37">均值滤波</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blur(src, dst, ksize)</span><br></pre></td></tr></table></figure><ol><li><code>ksize</code>：卷积核尺寸<ol><li><code>C++</code>：<code>Size</code>类型</li><li><code>Python</code>：元组类型</li></ol></li></ol><p><strong>C++</strong></p><h3 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1">高斯模糊</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GaussianBlur(src, dst, ksize, sigmaX, sigmaY)</span><br></pre></td></tr></table></figure><ol><li><code>sigmaX</code>：x轴上的高斯标准差</li><li><code>sigmaY</code>：y轴上的高斯标准差，如果为0，设置为等于<code>sigmaY</code></li></ol><p>**C++**：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mat dst;</span><br><span class="line">GaussianBlur(src, dst, Size(<span class="number">3</span>, <span class="number">3</span>), <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.GaussianBlur(src, (<span class="number">3</span>, <span class="number">3</span>), <span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga564869aa33e58769b4469101aac458f9">中值滤波</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medianBlur(src, dst, ksize)</span><br></pre></td></tr></table></figure><blockquote><p>注意此处的 ksize 为int类型</p></blockquote><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medianBlur(src, dst, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><h3 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d">Sobel算子</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sobel(src, dst, ddepth, dx, dy, ksize&#x3D;3)</span><br></pre></td></tr></table></figure><ol><li><code>dx</code>：沿x轴的阶数</li><li><code>dy</code>：沿y轴的阶数</li></ol><p><strong>C++</strong></p><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 沿 x 轴计算一阶sobel</span></span><br><span class="line">dst = cv.Sobel(src, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿 y 轴计算一阶sobel</span></span><br><span class="line">dst = cv.Sobel(src, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Scharr滤波器"><a href="#Scharr滤波器" class="headerlink" title="Scharr滤波器"></a>Scharr滤波器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scharr(src, dst, ddepth, dx, dy)</span><br></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 沿 x 轴计算一阶 Scharr</span></span><br><span class="line">Scharr(src, dst, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 沿 y 轴计算一阶 Scharr</span></span><br><span class="line">Scharr(src, dst, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 沿 x 轴计算一阶 Scharr</span></span><br><span class="line">dst = cv.Scharr(src, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿 y 轴计算一阶 Scharr</span></span><br><span class="line">dst = cv.Scharr(src, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="拉普拉斯算子"><a href="#拉普拉斯算子" class="headerlink" title="拉普拉斯算子"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gad78703e4c8fe703d479c1860d76429e6">拉普拉斯算子</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Laplacian(src, dst, ddepth, ksize&#x3D;1)</span><br></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Laplacian(src, dst, <span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.Laplacian(src, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h3 id="canny边缘检测算法"><a href="#canny边缘检测算法" class="headerlink" title="canny边缘检测算法"></a><a href="https://docs.opencv.org/3.4.7/dd/d1a/group__imgproc__feature.html#ga04723e007ed888ddf11d9ba04e2232de">canny边缘检测算法</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Canny(src, edges, threshold1, threshold2)</span><br></pre></td></tr></table></figure><ol><li><code>edges</code>：边缘图，单通道8位。</li><li><code>threshold1</code>：第一个阈值</li><li><code>threshold2</code>：第二个阈值</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Canny(src, dst, <span class="number">50</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.Canny(src, <span class="number">50</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="双边滤波"><a href="#双边滤波" class="headerlink" title="双边滤波"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga9d7064d478c95d60003cf839430737ed">双边滤波</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bilateralFilter(src, dst, d, sigmaColor, sigmaSpace)</span><br></pre></td></tr></table></figure><ol><li><code>d</code>：滤波期间使用的每个像素邻域的直径。</li><li><code>sigmaColor</code>：在色彩空间中过滤的标准差</li><li><code>sigmaSpace</code>：在坐标空间中过滤的标准差</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bilateralFilter(src, dst, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv.bilateralFilter(src, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="霍夫变换"><a href="#霍夫变换" class="headerlink" title="霍夫变换"></a>霍夫变换</h2><h3 id="霍夫圆"><a href="#霍夫圆" class="headerlink" title="霍夫圆"></a><a href="https://docs.opencv.org/3.4.7/dd/d1a/group__imgproc__feature.html#ga47849c3be0d0406ad3ca45db65a25d2d">霍夫圆</a></h3><p>使用霍夫变换在灰度图中查找圆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HoughCircles(src, circles, method, dp, minDist, </span><br><span class="line">             param1&#x3D;100, param2&#x3D;100, minRadius&#x3D;0, maxRadius&#x3D;0)</span><br></pre></td></tr></table></figure><ol><li><code>circles</code>：找到的圆的输出向量</li><li><code>method</code>：检测方法<ol><li>当前唯一实现的方法是<code>HOUGH_GRADIENT</code></li></ol></li><li><code>dp</code>：分辨率，累加器分辨率和图像分辨率的反比。</li><li><code>minDist</code>：检测到圆心的最小距离</li><li><code>param1</code>：传递给Canny边缘检测器的两个阈值中的更高的那个，更低的是它的一半</li><li><code>param2</code>：它是检测圆心的累加器阈值，越小，假圆可能越多。</li><li><code>minRadius</code>：最小圆半径</li><li><code>maxRadius</code>：最大圆半径</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mat circles;</span><br><span class="line">HoughCircles(src, circles, HOUGH_GRADIENT, <span class="number">1</span>, <span class="number">100</span>, <span class="number">160</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// circles 中是检测到的圆的圆心(x, y)和半径</span></span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">circles = cv.HoughCircles(src, HOUGH_GRADIENT, <span class="number">1</span>, <span class="number">100</span>, <span class="number">160</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="霍夫直线变换–找直线"><a href="#霍夫直线变换–找直线" class="headerlink" title="霍夫直线变换–找直线"></a><a href="https://docs.opencv.org/3.4.7/dd/d1a/group__imgproc__feature.html#ga46b4e588934f6c8dfd509cc6e0e4545a">霍夫直线变换–找直线</a></h3><blockquote><p>使用标准霍夫变换或者标准多尺度霍夫变换查找直线</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HoughLines(src, lines, rho, theta, threshold, </span><br><span class="line">           srn&#x3D;0, stn&#x3D;0, min_theta&#x3D;0, max_theta&#x3D;CV_PI)</span><br></pre></td></tr></table></figure><ol><li><code>lines</code>：检测出来的直线（里面的参数是rho和theta）</li><li><code>rho</code>：距离分辨率（以像素为单位）</li><li><code>theta</code>：角度分辨率（以弧度为单位）</li><li><code>threshold</code>：累加器阈值</li><li><code>srn</code>：它是距离分辨率rho的除数</li><li><code>stn</code>：它是角度分辨率theta的除数，如果两个都等于0，则使用标准霍夫变换。否则使用多尺度霍夫变换</li><li><code>min_theta</code>：最小角度：介于<code>0</code>和<code>max_theta</code>之间</li><li><code>max_theta</code>：最大角度：介于<code>min_theta</code>和<code>CV_PI</code>之间</li></ol><blockquote><p>注意：输入图必须是二值图</p></blockquote><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 src 转化为二值图</span></span><br><span class="line">Mat binary;</span><br><span class="line">adaptiveThreshold(src, binary, <span class="number">255</span>, ADAPTIVE_THRESH_MEAN_C,</span><br><span class="line">                  THRESH_BINARY_INV, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Mat lines;</span><br><span class="line">HoughLines(binary, lines, <span class="number">1</span>, CV_PI / <span class="number">180</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 src 转化为二值图</span></span><br><span class="line">binary = cv.adaptiveThreshold(</span><br><span class="line">    src, <span class="number">255</span>, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY_INV, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">lines = cv.HoughLines(binary, <span class="number">1</span>, np.pi / <span class="number">180</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意 lines 的参数分别对应的是一条直线的 rho 和 theta</p></blockquote><h3 id="霍夫直线变换–找线段"><a href="#霍夫直线变换–找线段" class="headerlink" title="霍夫直线变换–找线段"></a><a href="https://docs.opencv.org/3.4.7/dd/d1a/group__imgproc__feature.html#ga8618180a5948286384e3b7ca02f6feeb">霍夫直线变换–找线段</a></h3><blockquote><p>使用概率霍夫变换在二进制图像中查找线段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HoughLinesP(src, lines, rho, theta, theshold, minLineLength&#x3D;0, maxLineGap&#x3D;0)</span><br></pre></td></tr></table></figure><ol><li><code>minLineLength</code>：线段的最小长度。</li><li><code>maxLineGap</code>：连接该线上的点之间的最大允许间隙。</li></ol><blockquote><p>注意：输入图必须是二值图</p></blockquote><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Mat binary, gray;</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">adaptiveThreshold(gray, binary, <span class="number">255</span>, ADAPTIVE_THRESH_MEAN_C,</span><br><span class="line">                  THRESH_BINARY_INV, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">imshow(<span class="string">&quot;binary&quot;</span>, binary);</span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4i&gt; lines;</span><br><span class="line">HoughLinesP(binary, lines, <span class="number">1</span>, CV_PI / <span class="number">180</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> <span class="built_in">line</span> : lines) &#123;</span><br><span class="line">    cv::<span class="built_in">line</span>(src, Point(<span class="built_in">line</span>[<span class="number">0</span>], <span class="built_in">line</span>[<span class="number">1</span>]), Point(<span class="built_in">line</span>[<span class="number">2</span>], <span class="built_in">line</span>[<span class="number">3</span>]),</span><br><span class="line">             Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line">binary = cv.adaptiveThreshold(</span><br><span class="line">    gray, <span class="number">255</span>, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY_INV, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">lines = cv.HoughLinesP(binary, <span class="number">1</span>, np.pi / <span class="number">180</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    x1, y1, x2, y2 = line[<span class="number">0</span>]</span><br><span class="line">    cv.line(src, (x1, y1), (x2, y2), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, binary)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br></pre></td></tr></table></figure><blockquote><p>注意：实际使用中，C++的<code>HoughLineP</code> 和Python的<code>HoughLineP</code>最终的结果有差异，原因未知。</p></blockquote><h2 id="查找轮廓和绘制轮廓"><a href="#查找轮廓和绘制轮廓" class="headerlink" title="查找轮廓和绘制轮廓"></a>查找轮廓和绘制轮廓</h2><p><a href="https://docs.opencv.org/3.4.7/d3/dc0/group__imgproc__shape.html#ga17ed9f5d79ae97bd4c7cf18403e1689a">查找轮廓</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findContours(image, contours, hierachy, mode, method)</span><br></pre></td></tr></table></figure><p>参数描述：</p><ol><li><code>image</code>：二值图</li><li><code>contours</code>：查找到的所有轮廓</li><li><code>hierachy</code>：层级关系（目前很少用到）</li><li><code>mode</code>：<a href="https://docs.opencv.org/3.4.7/d3/dc0/group__imgproc__shape.html#ga17ed9f5d79ae97bd4c7cf18403e1689a">轮廓的检索模式</a><ol><li><code>RETR_EXTERNAL</code>：仅检索外部轮廓。</li><li><code>RETR_LIST</code>：不建立索引关系的情况下，检索所有轮廓。</li><li><code>RETR_CCOMP</code>：检索所有轮廓，分为两级层次结构。</li><li><code>RETR_TREE</code>：检索所有轮廓，重建嵌套的完整结构。</li></ol></li><li><code>method</code>：<a href="https://docs.opencv.org/3.4.7/d3/dc0/group__imgproc__shape.html#ga4303f45752694956374734a03c54d5ff">轮廓近似方法</a><ol><li><code>CHAIN_APPROX_NONE</code>：绝对存储所有轮廓点</li><li><code>CHAIN_APPROX_SIMPLE</code>：压缩水平，垂直和对角线段，仅保留其端点。</li></ol></li></ol><p><a href="https://docs.opencv.org/3.4.7/d6/d6e/group__imgproc__draw.html#ga746c0625f1781f1ffc9056259103edbc">绘制轮廓</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawContours(image, contours, contourIdx, color, thickness, lineType)</span><br></pre></td></tr></table></figure><ol><li><code>contours</code>：上面方法找到的所有轮廓点</li><li><code>countourIdx</code>：要绘制的索引，-1代表所有</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Mat gray, binary;</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">adaptiveThreshold(gray, binary, <span class="number">255</span>, ADAPTIVE_THRESH_GAUSSIAN_C,</span><br><span class="line">                  THRESH_BINARY_INV, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line">findContours(binary, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</span><br><span class="line">drawContours(src, contours, <span class="number">-1</span>, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">binary = cv.adaptiveThreshold(</span><br><span class="line">    gray, <span class="number">255</span>, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY_INV, <span class="number">255</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">_, contours, hierarchy = cv.findContours(</span><br><span class="line">    binary, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)</span><br><span class="line">cv.drawContours(src, contours, <span class="number">-1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, binary)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>findContours</code>会返回三个值，分别是，图像，轮廓，层级。</p></blockquote><h2 id="膨胀和腐蚀"><a href="#膨胀和腐蚀" class="headerlink" title="膨胀和腐蚀"></a>膨胀和腐蚀</h2><p>形态学变化是基于图像形状的一些简单操作。操作对象一般是二值图像，需要两个输入，一个是我们的原图，另一个是<strong>3x3的结构元素</strong>(内核)，决定了膨胀操作的本质。常见的操作是图像的膨胀和腐蚀。以及他们的进阶操作注入Opening、Closing、Gradient等等。</p><h3 id="获取结构元素"><a href="#获取结构元素" class="headerlink" title="获取结构元素"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gac342a1bb6eabf6f55c803b09268e36dc">获取结构元素</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getStructuringElement(shape, ksize)</span><br></pre></td></tr></table></figure><ol><li><code>shape</code>： <a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gac2db39b56866583a95a5680313c314ad">结构元素的形状</a><ol><li><code>MORPH_RECT</code>：矩形结构元素</li><li><code>MORPH_CROSS</code>：十字形结构元素</li><li><code>MORPH_ELLIPSE</code>：椭圆形结构元素</li></ol></li></ol><blockquote><p>用法在下面</p></blockquote><h3 id="膨胀"><a href="#膨胀" class="headerlink" title="膨胀"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga4ff0f3318642c4f469d0e11f242f3b6c">膨胀</a></h3><p>用大值填充小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dilate(src, dst, kernel)</span><br></pre></td></tr></table></figure><ol><li><code>kernel</code>：结构元素</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mat dilate_later;</span><br><span class="line">Mat kernel = getStructuringElement(MORPH_RECT, Size(<span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">dilate(src, dilate_later, kernel);</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line">imshow(<span class="string">&quot;binary&quot;</span>, dilate_later);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kernel = cv.getStructuringElement(cv.MORPH_RECT, (<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">dilate_later = cv.dilate(src, kernel)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, dilate_later)</span><br></pre></td></tr></table></figure><h3 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#gaeb1e0c1033e3f6b891a25d0511362aeb">腐蚀</a></h3><p>用小值填充大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erode(src, dst, kernel)</span><br></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mat erode_later;</span><br><span class="line">Mat kernel = getStructuringElement(MORPH_RECT, Size(<span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">erode(src, erode_later, kernel);</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line">imshow(<span class="string">&quot;binary&quot;</span>, erode_later);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kernel = cv.getStructuringElement(cv.MORPH_RECT, (<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">erode_later = cv.erode(src, kernel)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, erode_later)</span><br></pre></td></tr></table></figure><h3 id="高级形态转化"><a href="#高级形态转化" class="headerlink" title="高级形态转化"></a><a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga67493776e3ad1a3df63883829375201f">高级形态转化</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">morphologyEx(src, dst, op, kernel)</span><br></pre></td></tr></table></figure><ol><li><code>op</code>：<a href="https://docs.opencv.org/3.4.7/d4/d86/group__imgproc__filter.html#ga7be549266bad7b2e6a04db49827f9f32">形态转化方式</a><ol><li><code>MORPH_ERODE</code>：腐蚀</li><li><code>MORPH_DILATE</code>：膨胀</li><li><code>MORPH_OPEN</code>：开操作，先腐蚀后膨胀</li><li><code>MORPH_CLOSE</code>：闭操作，先膨胀后腐蚀</li><li>…</li></ol></li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mat src_later;</span><br><span class="line">Mat kernel = getStructuringElement(MORPH_RECT, Size(<span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// 开操作，其他操作将 op 的值进行更换即可</span></span><br><span class="line">morphologyEx(src, src_later, MORPH_OPEN, kernel);</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line">imshow(<span class="string">&quot;binary&quot;</span>, src_later);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kernel = getStructuringElement(cv.MORPH_RECT, Size(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 开操作，其他操作将 op 的值进行更换即可</span></span><br><span class="line">src_later = cv.morphologyEx(src, cv.MORPH_OPEN, kernel)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, src_later)</span><br></pre></td></tr></table></figure><h2 id="泛洪填充（漫水填充）"><a href="#泛洪填充（漫水填充）" class="headerlink" title="泛洪填充（漫水填充）"></a><a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#gaf1f55a048f8a45bc3383586e80b1f0d0">泛洪填充（漫水填充）</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">floodFill(image, mask，seedPoint, newVal, rect, loDiff&#x3D;Scalar(), upDiff&#x3D;Scalar(), flags)</span><br></pre></td></tr></table></figure><ol><li><code>seedPoint</code>：起始点</li><li><code>newVal</code>：新值</li><li><code>rect</code>：最小边界矩形，一般使用默认</li><li><code>loDiff</code>：最大较低色差</li><li><code>upDiff</code>：最大较高色差</li><li><code>flags</code>：操作标志<ol><li><code>FLOODFILL_FIXED_RANGE</code></li></ol></li></ol><p>$$<br>\texttt{src} (x’,y’)- \texttt{loDiff} \leq \texttt{src} (x,y) \leq \texttt{src} (x’,y’)+ \texttt{upDiff}<br>$$</p><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;5, 5&#125; 是一种简写方式，会自动生成 Point，&#123;0, 0, 255&#125;同理，会自动生成 Scalar</span></span><br><span class="line">floodFill(src, &#123;<span class="number">5</span>, <span class="number">5</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>&#125;);</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv.floodFill(src, (<span class="number">5</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src);</span><br></pre></td></tr></table></figure><h2 id="图像分水岭"><a href="#图像分水岭" class="headerlink" title="图像分水岭"></a><a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#ga3267243e4d3f95165d55a618c65ac6e1">图像分水岭</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watershed(image, markers)</span><br></pre></td></tr></table></figure><ol><li><code>markders</code>：标记，类型必须是CV_32S</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Mat <span class="title">markers</span><span class="params">(src.<span class="built_in">size</span>(), CV_32S)</span></span>;</span><br><span class="line"><span class="built_in">circle</span>(markers, &#123;src.<span class="built_in">size</span>().<span class="built_in">width</span> / <span class="number">2</span>, src.<span class="built_in">size</span>().<span class="built_in">height</span> / <span class="number">2</span>&#125;, <span class="number">2</span>, &#123;<span class="number">255</span>&#125;,</span><br><span class="line">       <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">circle</span>(markers, &#123;<span class="number">10</span>, <span class="number">10</span>&#125;, <span class="number">2</span>, &#123;<span class="number">1</span>&#125;, <span class="number">-1</span>);</span><br><span class="line">watershed(src, markers);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; markers &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">Mat result;</span><br><span class="line">markers.convertTo(result, CV_8UC3);</span><br><span class="line">imshow(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line">imshow(<span class="string">&quot;result&quot;</span>, result);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">height, width = src.shape[:<span class="number">2</span>]</span><br><span class="line">markers = np.zeros(src.shape[:<span class="number">2</span>], np.int32)</span><br><span class="line">cv.circle(markers, (width // <span class="number">2</span>, height//<span class="number">2</span>), <span class="number">2</span>, (<span class="number">255</span>), <span class="number">-1</span>)</span><br><span class="line">cv.circle(markers, (<span class="number">10</span>, <span class="number">10</span>), <span class="number">2</span>, (<span class="number">1</span>), <span class="number">-1</span>)</span><br><span class="line">cv.watershed(src, markers)</span><br><span class="line">markers = markers.astype(np.uint8)</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, markers)</span><br></pre></td></tr></table></figure><blockquote><p>注意：标定点一般需要我们实际取获取。这里仅仅是使用固定点举例子罢了。</p></blockquote><h2 id="距离变换"><a href="#距离变换" class="headerlink" title="距离变换"></a><a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#ga25c259e7e2fa2ac70de4606ea800f12f">距离变换</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distanceTransform(src, dst, distanceType, maskSize, dstType&#x3D;CV_32F)</span><br></pre></td></tr></table></figure><ol><li><code>src</code>：8位单通道二进制图</li><li><code>dst</code>：输出具有计算出的距离图像。它是大小与<code>src</code>相同的8位或32位浮点单通道图像。</li><li><code>distanceType</code>：<a href="https://docs.opencv.org/3.4.7/d7/d1b/group__imgproc__misc.html#gaa2bfbebbc5c320526897996aafa1d8eb">距离类型</a>，一般采用欧式距离就好了<ol><li><code>DIST_L1</code>：distance = |x1-x2| + |y1-y2|</li><li><code>DIST_L2</code>：简单的欧式距离</li><li><code>DIST_C</code>：distance = max(|x1-x2|,|y1-y2|)</li><li><code>DIST_L12</code>：L1-L2 metric: distance = 2(sqrt(1+x*x/2) - 1))</li><li><code>DIST_FAIR</code>：distance = c^2(|x|/c-log(1+|x|/c)), c = 1.3998</li><li><code>DIST_WELSCH</code>：distance = c^2/2(1-exp(-(x/c)^2)), c = 2.9846</li><li><code>DIST_HUBER</code>：distance = |x|&lt;c ? x^2/2 : c(|x|-c/2), c=1.345</li></ol></li><li><code>maskSize</code>：距离变换蒙版大小，一般用3或5</li><li><code>dstType</code>：输出类型，一般采用默认值</li></ol><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Mat gray, binary, dst;</span><br><span class="line">cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">adaptiveThreshold(gray, binary, <span class="number">255</span>, ADAPTIVE_THRESH_GAUSSIAN_C,</span><br><span class="line">                  THRESH_BINARY_INV, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">distanceTransform(binary, dst, DIST_L2, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 将数据归一化到0-1之间，显示效果比较好</span></span><br><span class="line">normalize(dst, dst, <span class="number">0</span>, <span class="number">1</span>, NORM_MINMAX);</span><br><span class="line">imshow(<span class="string">&quot;dst&quot;</span>, dst);</span><br><span class="line">imshow(<span class="string">&quot;binary&quot;</span>, binary);</span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line">binary = cv.adaptiveThreshold(</span><br><span class="line">    gray, <span class="number">255</span>, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY_INV, <span class="number">255</span>, <span class="number">1</span>)</span><br><span class="line">dst = cv.distanceTransform(binary, cv.DIST_L2, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 将数据归一化到0-1之间，显示效果比较好</span></span><br><span class="line">cv.normalize(dst, dst, <span class="number">0</span>, <span class="number">1</span>, cv.NORM_MINMAX)</span><br><span class="line">cv.imshow(<span class="string">&quot;binary&quot;</span>, binary)</span><br><span class="line">cv.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;以下只列举常用的方法和常用的参数，例如枚举，只会将最常用的几个列举出来，详细的请参考官方文档。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;C++&lt;/code&gt;默认使用了&lt;code&gt;using namespace cv;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;Python&lt;/code&gt;默认使用了&lt;code&gt;import cv2 as cv&lt;/code&gt; 和 &lt;code&gt;import numpy as np&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;OpenCV版本：3.4.7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;读取图片&quot;&gt;&lt;a href=&quot;#读取图片&quot; class=&quot;headerlink&quot; title=&quot;读取图片&quot;&gt;&lt;/a&gt;读取图片&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;imread(filename, flags)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;filename&lt;/code&gt;：图片路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flags&lt;/code&gt;：&lt;ol&gt;
&lt;li&gt;&lt;code&gt;IMREAD_COLOR&lt;/code&gt;：默认值，返回3通道的BGR色彩图像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IMREAD_GRAYSCALE&lt;/code&gt;：返回单通道灰色图片&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IMREAD_UNCHANGED&lt;/code&gt;：按原样返回。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Coding" scheme="https://www.askeynil.com/categories/Coding/"/>
    
    <category term="OpenCV" scheme="https://www.askeynil.com/categories/Coding/OpenCV/"/>
    
    
    <category term="OpenCV" scheme="https://www.askeynil.com/tags/OpenCV/"/>
    
    <category term="C++" scheme="https://www.askeynil.com/tags/C/"/>
    
    <category term="Python" scheme="https://www.askeynil.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 入门</title>
    <link href="https://www.askeynil.com/2019/e181f182.html"/>
    <id>https://www.askeynil.com/2019/e181f182.html</id>
    <published>2019-10-23T12:00:00.000Z</published>
    <updated>2019-10-23T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像的读写与显示"><a href="#图像的读写与显示" class="headerlink" title="图像的读写与显示"></a>图像的读写与显示</h2><h3 id="读取图像"><a href="#读取图像" class="headerlink" title="读取图像"></a>读取图像</h3><p>使用函数 <code>cv.imread()</code> 来读取图像，该函数共两个参数</p><ol><li>图像的路径</li><li>图像的读取方式<ol><li><code>cv.IMREAD_COLOR</code> 加载彩色图像，图像的任何透明度都将被忽略。这是默认标志</li><li><code>cv.IMREAD_GRAYSCALE</code> 以灰度模式加载图像</li><li><code>cv.IMREAD_UNCHANGED</code> 加载图像，包括 <code>alpha</code> 通道</li></ol></li></ol><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;1.jpg&quot;</span>, cv.IMREAD_COLOR)</span><br></pre></td></tr></table></figure><p><strong>警告</strong>：如果图像路径错误，它将不会引发任何错误，但是会返回一个空值</p><a id="more"></a><h3 id="显示图像"><a href="#显示图像" class="headerlink" title="显示图像"></a>显示图像</h3><p>使用函数 <code>cv.imshow()</code> 在窗口显示图像，窗口自动适合图像尺寸。该函数共两个参数。</p><ol><li>窗口名称</li><li>要显示的图像</li></ol><p>可以根据需求创建任意多个窗口，但需要使用不同的窗口名称</p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cv.imshow(<span class="string">&#x27;image&#x27;</span>, img)</span><br><span class="line">cv.waitkey()</span><br><span class="line">cv.destoryAllWindows()</span><br></pre></td></tr></table></figure><p><code>cv.waitkey()</code>等待按键按下功能，其参数是时间（以毫秒为单位），默认为0，即永远等待。</p><p><code>cv.destoryAllWindows()</code> 用来回收我们创建的所有窗口。</p><h3 id="保存图像"><a href="#保存图像" class="headerlink" title="保存图像"></a>保存图像</h3><p>使用函数<code>cv.imwrite()</code>来保存图像，该函数共两个参数。</p><ol><li>文件名</li><li>需要保存的图像</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.imwrite(<span class="string">&#x27;2.jpg&#x27;</span>, img)</span><br></pre></td></tr></table></figure><h2 id="图像的基本操作"><a href="#图像的基本操作" class="headerlink" title="图像的基本操作"></a>图像的基本操作</h2><blockquote><p>来源：<a href="https://docs.opencv.org/4.1.2/d3/df2/tutorial_py_basic_ops.html">https://docs.opencv.org/4.1.2/d3/df2/tutorial_py_basic_ops.html</a></p></blockquote><p>本节中的大部分操作都与<code>numpy</code>相关，因为要操作图像数据，而图像数据就是一个<code>np.ndarray</code>的数组。</p><p><strong>注意</strong>：在OpenCV中图像都处于GBR模式，使用这种方式的是因为历史遗留问题，在早年大部分的照相机制造商和软件供应商中流行的就是BGR模式， OpenCV为了迎合当时开发者的习惯就是用了BGR模式，然而在当今这个时代RGB又流行了起来，OpenCV已经无法在兼容RGB模式了，所以只能这样将就着使用GBR模式了</p><h3 id="访问和修改像素值"><a href="#访问和修改像素值" class="headerlink" title="访问和修改像素值"></a>访问和修改像素值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&#x27;1.jpg&#x27;</span>)</span><br><span class="line">px = img[<span class="number">100</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># [2 6 26]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以仅接收 rgb的任意一个值</span></span><br><span class="line">blue = img[<span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">blue, green, red = img[<span class="number">100</span>, <span class="number">100</span>] <span class="comment"># 不想接收的可以用 _ 代替</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改像素值</span></span><br><span class="line">img[<span class="number">100</span>, <span class="number">100</span>] = <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span></span><br></pre></td></tr></table></figure><p><strong>警告</strong>：Numpy是用于快速数组计算的优化库。因此，简单的访问每个元素并对其进行修改是非常缓慢的，不建议这样使用。</p><p>更好的访问像素值和修改像素值的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问 RED 的值</span></span><br><span class="line">img.item(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 RED 的值</span></span><br><span class="line">img.itemset((<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>), <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="访问图像属性"><a href="#访问图像属性" class="headerlink" title="访问图像属性"></a>访问图像属性</h3><p>图像的属性包括：行、列、通道数、图像的数据类型、像素数等等</p><p>图像的形状可以通过<code>img.shape</code>访问。它返回行，列和通道数的元组（如果是彩色的图像）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(img.shape)</span><br><span class="line"><span class="comment"># (1227 690 3)</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果图像是灰度的，则返回的元组只会包含行和列，因此这是检测加载的图像是灰度还是彩色的好方法。</p><p>像素总数可以通过<code>img.size</code>进行获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(img.size)</span><br><span class="line"><span class="comment"># 846630</span></span><br></pre></td></tr></table></figure><p>图像数据类型可以通过<code>img.dtype</code>进行获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(img.dtype)</span><br><span class="line"><span class="comment"># uint8</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>： <code>img.dtype</code>在调试的时候非常重要，因为OpenCV-Python代码中大部分的错误可能都是因为无效数据类型引起的。</p><h3 id="图像ROI（Region-Of-Internest）"><a href="#图像ROI（Region-Of-Internest）" class="headerlink" title="图像ROI（Region Of Internest）"></a>图像ROI（<em>Region Of Internest</em>）</h3><p>有时候我们需要使用图像的某个区域，这是可以通过NumPy索引的方式获取ROI</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取图像第220行到500行，250行到620行的图像</span></span><br><span class="line">img[<span class="number">220</span>:<span class="number">500</span>, <span class="number">250</span>:<span class="number">620</span>]</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>如果对裁剪区域内容进行修改，这个值也会反馈裁剪之前的图像数组，因为在NumPy中默认使用的是引用拷贝的方式，所以在需要对特定的区域修改的时候，我们可以将其裁剪出来，然后在更小的区域做处理，这样可以提高我们修改的速度和准确性。</p><h3 id="分割和合并图像通道"><a href="#分割和合并图像通道" class="headerlink" title="分割和合并图像通道"></a>分割和合并图像通道</h3><p>有的时候需要分别处理图像的G、B、R通道。可以使用以下方法做到这一点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拆分</span></span><br><span class="line">b, g, r = cv.split(img)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">b = img[:, :, <span class="number">0</span>]</span><br><span class="line">g = img[:, :, <span class="number">1</span>]</span><br><span class="line">r = img[:, :, <span class="number">2</span>]</span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line">img = cv.merge((b, g, r))</span><br></pre></td></tr></table></figure><p><strong>警告</strong>：<code>cv.split()</code>是一项非常耗时的操作，相比于numpy的索引而言，实测速度大约相差百倍，数据量大的情况下可以到几百倍。</p><h3 id="为图像设置边框（填充）"><a href="#为图像设置边框（填充）" class="headerlink" title="为图像设置边框（填充）"></a>为图像设置边框（填充）</h3><p>如果要在图像周围创建边框，则可以使用 <code>cv.copyMakeBorder()</code>。但是它在卷积运算，零填充等方便有更多的运用。该函数共7个参数：</p><ol><li><code>src</code> 输入的图像</li><li><code>top</code> 上边界宽度</li><li><code>bottom</code> 下边界宽度</li><li><code>left</code> 左边界宽度</li><li><code>right</code> 右边界宽度</li><li><code>borderType</code> 边界类型<ol><li><code>cv.BORDER_CONSTANT</code> 添加恒定的色彩边框</li><li><code>cv.BORDER_REFLECT</code> 边框是边框元素的镜像，例如：fedcba | abcdefgh |hgfedcb</li><li><code>cv.BORDER_REFLECT_101 </code>或 <code>cv.BORDER_DEFAULT</code> ，与上述基本相同，但是略有变化。例如：gfedcb | abcdefgh | gfedcba</li><li><code>cv.BORDER_REPLICATE</code> 最后一个元素被复制，例如：aaaaaa | abcdefg | gggggg</li><li><code>cv.BORDER_WRAP</code> 例如：cdefgh | abcdefgh | abcdefg</li></ol></li><li><code>value</code> 颜色值，类型为<code>cv.BORDER_CONSTANT</code>有效</li></ol><h2 id="图像上的算术运算"><a href="#图像上的算术运算" class="headerlink" title="图像上的算术运算"></a>图像上的算术运算</h2><blockquote><p>来源：<a href="https://docs.opencv.org/4.1.2/d0/d86/tutorial_py_image_arithmetics.html">https://docs.opencv.org/4.1.2/d0/d86/tutorial_py_image_arithmetics.html</a></p></blockquote><h3 id="图像加法"><a href="#图像加法" class="headerlink" title="图像加法"></a>图像加法</h3><p>图像的加法可以通过OpenCV函数<code>cv.add()</code>或仅通过NumPy操作（res = img1 + img2）。两个图像应该具有相同的深度和类型，或者第二个图像可以只有一个标量。</p><p><strong>注意</strong>：OpenCV的加法是饱和运算，而NumPy的加法是模运算，简单的讲就是，当相加的结果超过255的时候，OpenCV的相加的值为255，而NumPy相加的值为其取模的值</p><h3 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h3><p>这也类似于图像的加法，但是对图像赋予的权重不同，以使其具有融合或者透明的感觉。根据以下等式添加图像：<br>$$<br>g(x)=(1-\alpha)f_{0}(x)+(\alpha)f_{1}(x)<br>$$<br>在 OpenCV 中，我们可以使用<code>cv.addWeighted()</code>函数来达到图像融合的效果，该函数有7个参数：</p><ol><li><code>src1</code>：第一个输入的数组</li><li><code>alpha</code>：第一个数组元素的权重</li><li><code>src2</code>：第二个输入的数组</li><li><code>beta</code>：第二个数组元素的权重</li><li><code>gamma</code>：标量，加到每个元素中。</li><li><code>dst</code>：输出数组</li><li><code>dtype</code>：输出的数据类型</li></ol><p>大致可以表示为如下方程式：<br>$$<br>dst = \alpha \cdot img_{1} + \beta \cdot img_{2} + \gamma<br>$$</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;图像的读写与显示&quot;&gt;&lt;a href=&quot;#图像的读写与显示&quot; class=&quot;headerlink&quot; title=&quot;图像的读写与显示&quot;&gt;&lt;/a&gt;图像的读写与显示&lt;/h2&gt;&lt;h3 id=&quot;读取图像&quot;&gt;&lt;a href=&quot;#读取图像&quot; class=&quot;headerlink&quot; title=&quot;读取图像&quot;&gt;&lt;/a&gt;读取图像&lt;/h3&gt;&lt;p&gt;使用函数 &lt;code&gt;cv.imread()&lt;/code&gt; 来读取图像，该函数共两个参数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图像的路径&lt;/li&gt;
&lt;li&gt;图像的读取方式&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cv.IMREAD_COLOR&lt;/code&gt; 加载彩色图像，图像的任何透明度都将被忽略。这是默认标志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cv.IMREAD_GRAYSCALE&lt;/code&gt; 以灰度模式加载图像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cv.IMREAD_UNCHANGED&lt;/code&gt; 加载图像，包括 &lt;code&gt;alpha&lt;/code&gt; 通道&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cv2 &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; cv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img = cv.imread(&lt;span class=&quot;string&quot;&gt;&amp;quot;1.jpg&amp;quot;&lt;/span&gt;, cv.IMREAD_COLOR)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;警告&lt;/strong&gt;：如果图像路径错误，它将不会引发任何错误，但是会返回一个空值&lt;/p&gt;</summary>
    
    
    
    <category term="Coding" scheme="https://www.askeynil.com/categories/Coding/"/>
    
    <category term="OpenCV" scheme="https://www.askeynil.com/categories/Coding/OpenCV/"/>
    
    
    <category term="OpenCV" scheme="https://www.askeynil.com/tags/OpenCV/"/>
    
    <category term="Python" scheme="https://www.askeynil.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Service 通讯</title>
    <link href="https://www.askeynil.com/2019/a2babe33.html"/>
    <id>https://www.askeynil.com/2019/a2babe33.html</id>
    <published>2019-10-21T07:00:00.000Z</published>
    <updated>2019-10-21T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Service通讯机制"><a href="#Service通讯机制" class="headerlink" title="Service通讯机制"></a>Service通讯机制</h2><p>Service通讯分为<code>client端</code>和<code>server端</code>。</p><ul><li><code>client端</code>负责发送请求(Request)给<code>server端</code>。</li><li><code>server端</code>负责接收<code>client端</code>发送的请求数据。</li><li><code>server端</code>收到数据后，根据请求数据和当前的业务需求，产生数据，将数据(Response)返回给<code>client端</code>。</li></ul><p>Service通讯的特点：</p><ul><li>同步数据访问</li><li>具有响应反馈机制</li><li>一个server多个client</li><li>注重业务逻辑处理</li></ul><a id="more"></a><p>Service通讯的关键点：</p><ul><li><code>service</code>的地址名称</li><li><code>client端</code>访问<code>server端</code>的数据格式</li><li><code>server端</code>响应<code>client端</code>的数据格式</li></ul><p>Service通讯架构如下图：</p><p><img src="/img/ros/ros_service.png" alt="ros_service"></p><blockquote><p>文本使用服务端接收数据端数据，并进行简单的加法运算后返回给客户端</p><p>首先在<code>ws</code>的<code>src</code>的目录下，使用<code>catkin_create_pkg demo_service roscpp rospy rosmsg</code> 创建 <code>demo_service</code> package</p></blockquote><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><h3 id="C-版本"><a href="#C-版本" class="headerlink" title="C++ 版本"></a>C++ 版本</h3><ol><li>在<code>src</code>目录下创建一个<code>server.cc</code>文件，将以下代码粘贴到到该文件中</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;cpp_server&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// todo 处理业务逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_server</span><br><span class="line">  src/server.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  demo_server</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Server</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;roscpp_tutorials/TwoInts.h&quot;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 service 名称</span></span><br><span class="line"><span class="keyword">char</span> service_name[] = <span class="string">&quot;demo_service&quot;</span>;</span><br><span class="line"><span class="comment">// 创建一个 server</span></span><br><span class="line"><span class="keyword">const</span> ros::ServiceServer &amp;server =</span><br><span class="line">    node.advertiseService(service_name, serviceCallback);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建 <code>serviceCallback</code> 回调函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">serviceCallback</span><span class="params">(roscpp_tutorials::TwoInts::Request &amp;request,</span></span></span><br><span class="line"><span class="function"><span class="params">                     roscpp_tutorials::TwoInts::Response &amp;response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  返回值 bool：true代表成功响应，false代表拒绝响应</span></span><br><span class="line">    <span class="comment">//  可根据业务实际情况返回相应数据，本例就不做false处理了</span></span><br><span class="line">    response.sum = request.a + request.b;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>server.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;py_server&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 处理业务逻辑</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Server</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rospy_tutorials.srv <span class="keyword">import</span> AddTwoInts, AddTwoIntsRequest, AddTwoIntsResponse</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 Service 名称</span></span><br><span class="line">service_name = <span class="string">&quot;demo_service&quot;</span></span><br><span class="line"><span class="comment"># 创建 server</span></span><br><span class="line">server = rospy.Service(service_name, AddTwoInts, serviceCallback)</span><br></pre></td></tr></table></figure><ol start="3"><li>创建 <code>serviceCallback</code> 回调函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serviceCallback</span>(<span class="params">request=AddTwoIntsRequest(<span class="params"></span>)</span>):</span></span><br><span class="line">    response = AddTwoIntsResponse()</span><br><span class="line">    response.sum = request.a + request.b</span><br><span class="line">    <span class="comment"># 返回一个对应类型的 response 代表成功响应</span></span><br><span class="line">    <span class="comment"># 返回空值，代表拒绝响应</span></span><br><span class="line">    <span class="comment"># 在 Python 中可以更加灵活的使用返回数据，此例返回 a+b 也可以达到效果</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></li><li><p>给 server.py 赋予可执行权限</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_service/scripts/server.py</span><br></pre></td></tr></table></figure><h3 id="使用rosservice调试"><a href="#使用rosservice调试" class="headerlink" title="使用rosservice调试"></a>使用rosservice调试</h3><ol><li>将当前工作空间的环境变量添加到<code>bash</code>或<code>zsh</code>中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据使用不同的 shell 使用不同的环境变量，两者选其一</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment"># 使用 bash</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.zsh  <span class="comment"># 使用 zsh</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>运行 server 程序</p><ol><li>c++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_service demo_server</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_service server.py</span><br></pre></td></tr></table></figure></li><li><p>使用<code>rosservice call /demo_service &quot;a: 2 b: 1&quot;</code></p><ul><li>响应数据  sum: 3</li></ul></li></ol><h3 id="使用-rqt-service-caller-调试"><a href="#使用-rqt-service-caller-调试" class="headerlink" title="使用 rqt_service_caller 调试"></a>使用 rqt_service_caller 调试</h3><p>前两步与上面相同，然后使用<code>rosrun rqt_service_caller rqt_service_caller</code></p><ol><li>选择对应的<code>service</code>，本例为<code>demo_service</code></li><li>填充数据后按右上角的<code>call</code>发送</li><li>示意图如下所示</li></ol><p><img src="/img/ros/rqt_service_caller.jpg" alt="rqt_service_caller"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>使用第三方的srv与msg类似，这里就不做赘述，配置方法与msg一样，<a href="/2019/10/18/ros/%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E8%80%85/">详情可见</a></li><li>在回调函数的使用中，Python 与 C++ 的参数不一样，C++通过返回bool值判断是否成功响应，Python通过是否返回空值判断是否成功响应。</li><li>C++使用<code>node.advertiseService</code>创建<code>server</code></li><li>Python使用<code>rospy.Service</code>创建<code>server</code></li></ol><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><h3 id="C-版本-1"><a href="#C-版本-1" class="headerlink" title="C++ 版本"></a>C++ 版本</h3><ol><li>在<code>src</code>目录下创建一个<code>client.cc</code>文件，将以下代码粘贴到到该文件中</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;cpp_client&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// todo 处理业务逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_client</span><br><span class="line">  src/client.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  demo_client</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Client</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;roscpp_tutorials/TwoInts.h&quot;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 创建 service 名称</span></span><br><span class="line">   <span class="keyword">char</span> service_name[] = <span class="string">&quot;demo_service&quot;</span>;</span><br><span class="line">   <span class="comment">// 创建 Client</span></span><br><span class="line">   ros::ServiceClient client =</span><br><span class="line">       node.serviceClient&lt;roscpp_tutorials::TwoInts&gt;(service_name);</span><br><span class="line">   <span class="comment">// 创建一个Request 和 Response</span></span><br><span class="line">roscpp_tutorials::TwoInts::Request request;</span><br><span class="line">   roscpp_tutorials::TwoInts::Response response;</span><br><span class="line">request.a = <span class="number">1</span>, request.b = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">if</span> (client.call(request, response)) &#123; <span class="comment">// 判断是否响应</span></span><br><span class="line">       <span class="comment">// 获取到响应的数据</span></span><br><span class="line">       <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; response.sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;服务器 拒绝&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="Python-版本-1"><a href="#Python-版本-1" class="headerlink" title="Python 版本"></a>Python 版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>client.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;py_client&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 处理业务逻辑</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Client</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rospy_tutorials.srv <span class="keyword">import</span> AddTwoInts, AddTwoIntsRequest, AddTwoIntsResponse</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 Service 名称</span></span><br><span class="line">service_name = <span class="string">&quot;demo_service&quot;</span></span><br><span class="line"><span class="comment"># 创建 server</span></span><br><span class="line">client = rospy.ServiceProxy(service_name, AddTwoInts)</span><br><span class="line"><span class="comment"># 创建 Request</span></span><br><span class="line">request = AddTwoIntsRequest()</span><br><span class="line">request.a, request.b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = client.call(request)</span><br><span class="line">    print(response.sum)</span><br><span class="line"><span class="keyword">except</span> rospy.ServiceException <span class="keyword">as</span> error:     <span class="comment"># 服务器拒绝响应的错误</span></span><br><span class="line">    print(<span class="string">&quot;服务器拒绝响应&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>给 client.py 赋予可执行权限</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_service/scripts/client.py</span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>运行之前写好的 Server 端，分别 <code>C++</code> 程序和 <code>Python</code> 程序，即可。</p><ol><li>C++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_service demo_client</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_service client.py</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li>C++ 创建 Client 的方法为<code>node.serviceClient&lt;srv_type&gt;(srv_name)</code></li><li>Python 创建的 Client 的方法为<code>rospy.ServiceProxy(srv_name, srv_type)</code></li><li>C++ 以call的返回值的Yes，No来判断服务器是否响应</li><li>Python 使用 <code>try...except</code>判断是是否是<code>rospy.ServiceException</code>类型来判断服务器是否成功响应</li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_server&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_server&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;// todo 填写 service 的类型&quot;,</span><br><span class="line">            &quot;#include \&quot;$&#123;1:service_class&#125;\&quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;// todo 填写 service 的类型&quot;,</span><br><span class="line">            &quot;bool serviceCallback($&#123;2:service_class&#125;::Request &amp;request,&quot;,</span><br><span class="line">            &quot;                     $&#123;2:service_class&#125;::Response &amp;response) &#123;&quot;,</span><br><span class="line">            &quot;    //  TODO 服务端需要处理的业务逻辑&quot;,</span><br><span class="line">            &quot;    //  返回值 bool：true代表成功响应，false代表拒绝响应&quot;,</span><br><span class="line">            &quot;    return true;&quot;,</span><br><span class="line">            &quot;&#125;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;// 创建 service 名称&quot;,</span><br><span class="line">            &quot;// todo 填写 service_name&quot;,</span><br><span class="line">            &quot;char service_name[] = \&quot;$&#123;3:service_name&#125;\&quot;;&quot;,</span><br><span class="line">            &quot;// 创建一个 server&quot;,</span><br><span class="line">            &quot;const ros::ServiceServer &amp;server =&quot;,</span><br><span class="line">            &quot;    node.advertiseService(service_name, serviceCallback);&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_client&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_client&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;// todo 填写 service 的类型&quot;,</span><br><span class="line">            &quot;#include \&quot;$&#123;1:service_class&#125;\&quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;// todo 填写 service_name&quot;,</span><br><span class="line">            &quot;char service_name[] = \&quot;$&#123;2:service_name&#125;\&quot;;&quot;,</span><br><span class="line">            &quot;// 创建 Client&quot;,</span><br><span class="line">            &quot;ros::ServiceClient client =&quot;,</span><br><span class="line">            &quot;    node.serviceClient&lt;$&#123;3:service_class&#125;&gt;(service_name);&quot;,</span><br><span class="line">            &quot;// 创建一个Request 和 Response&quot;,</span><br><span class="line">            &quot;$&#123;3:service_class&#125;::Request request;&quot;,</span><br><span class="line">            &quot;$&#123;3:service_class&#125;::Response response;&quot;,</span><br><span class="line">            &quot;if (client.call(request, response)) &#123; // 判断是否响应&quot;,</span><br><span class="line">            &quot;    // 获取到响应的数据&quot;,</span><br><span class="line">            &quot;    // todo 进行获取到数据之后的业务逻辑处理&quot;,</span><br><span class="line">            &quot;&#125; else &#123;&quot;,</span><br><span class="line">            &quot;    std::cout &lt;&lt; \&quot;服务器 拒绝\&quot; &lt;&lt; std::endl;&quot;,</span><br><span class="line">            &quot;&#125;&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_server&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_server&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;# todo 填写 service 的类型&quot;,</span><br><span class="line">            &quot;from $&#123;1&#125;.srv import $&#123;2&#125;, $&#123;2&#125;Request, $&#123;2&#125;Response&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;def serviceCallback(request=$&#123;2&#125;Request()):&quot;,</span><br><span class="line">            &quot;    response = $&#123;2&#125;Response()&quot;,</span><br><span class="line">            &quot;    # 返回一个对应类型的 response 代表成功响应&quot;,</span><br><span class="line">            &quot;    # 返回空值，代表拒绝响应&quot;,</span><br><span class="line">            &quot;    return response&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;# 创建 Service 名称&quot;,</span><br><span class="line">            &quot;# todo 填写一个 service 的名称&quot;,</span><br><span class="line">            &quot;service_name = \&quot;$&#123;3:service_name&#125;\&quot;&quot;,</span><br><span class="line">            &quot;# 创建 server&quot;,</span><br><span class="line">            &quot;server = rospy.Service(service_name, $&#123;2&#125;, serviceCallback)&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_client&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_client&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;# todo 填写 service 的类型&quot;,</span><br><span class="line">            &quot;from $&#123;1&#125;.srv import $&#123;2&#125;, $&#123;2&#125;Request, $&#123;2&#125;Response&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;# 创建 Service 名称&quot;,</span><br><span class="line">            &quot;service_name = \&quot;$&#123;3&#125;\&quot;&quot;,</span><br><span class="line">            &quot;# 创建 Server&quot;,</span><br><span class="line">            &quot;client = rospy.ServiceProxy(service_name, $&#123;2&#125;)&quot;,</span><br><span class="line">            &quot;# 创建 Request&quot;,</span><br><span class="line">            &quot;request = $&#123;2&#125;Request()&quot;,</span><br><span class="line">            &quot;request.a, request.b = 1, 2&quot;,</span><br><span class="line">            &quot;try:&quot;,</span><br><span class="line">            &quot;    response = client.call(request)&quot;,</span><br><span class="line">            &quot;    print(response.sum)&quot;,</span><br><span class="line">            &quot;except rospy.ServiceException as error:     # 服务器拒绝响应的错误&quot;,</span><br><span class="line">            &quot;    print(\&quot;服务器拒绝响应\&quot;)&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;roscpp_tutorials/TwoInts.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">serviceCallback</span><span class="params">(roscpp_tutorials::TwoInts::Request &amp;request,</span></span></span><br><span class="line"><span class="function"><span class="params">                     roscpp_tutorials::TwoInts::Response &amp;response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  返回值 bool：true代表成功响应，false代表拒绝响应</span></span><br><span class="line">    <span class="comment">//  可根据业务实际情况返回相应数据，本例就不做false处理了</span></span><br><span class="line">    response.sum = request.a + request.b;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;cpp_server&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// 创建 service 名称</span></span><br><span class="line">    <span class="keyword">char</span> service_name[] = <span class="string">&quot;demo_service&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建一个 server</span></span><br><span class="line">    <span class="keyword">const</span> ros::ServiceServer &amp;server =</span><br><span class="line">        node.advertiseService(service_name, serviceCallback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> rospy_tutorials.srv <span class="keyword">import</span> AddTwoInts, AddTwoIntsRequest, AddTwoIntsResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serviceCallback</span>(<span class="params">request=AddTwoIntsRequest(<span class="params"></span>)</span>):</span></span><br><span class="line">    response = AddTwoIntsResponse()</span><br><span class="line">    response.sum = request.a + request.b</span><br><span class="line">    <span class="comment"># 返回一个对应类型的 response 代表成功响应</span></span><br><span class="line">    <span class="comment"># 返回空值，代表拒绝响应</span></span><br><span class="line">    <span class="comment"># 在 Python 中可以更加灵活的使用返回数据，此例返回 a+b 也可以达到效果</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;py_server&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建 Service 名称</span></span><br><span class="line">    service_name = <span class="string">&quot;demo_service&quot;</span></span><br><span class="line">    <span class="comment"># 创建 server</span></span><br><span class="line">    server = rospy.Service(service_name, AddTwoInts, serviceCallback)</span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><h3 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h3><h4 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;roscpp_tutorials/TwoInts.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;cpp_client&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 service 名称</span></span><br><span class="line">    <span class="keyword">char</span> service_name[] = <span class="string">&quot;demo_service&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建 Client</span></span><br><span class="line">    ros::ServiceClient client =</span><br><span class="line">        node.serviceClient&lt;roscpp_tutorials::TwoInts&gt;(service_name);</span><br><span class="line">    <span class="comment">// 创建一个Request 和 Response</span></span><br><span class="line">    roscpp_tutorials::TwoInts::Request request;</span><br><span class="line">    roscpp_tutorials::TwoInts::Response response;</span><br><span class="line">    request.a = <span class="number">1</span>, request.b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (client.call(request, response)) &#123; <span class="comment">// 判断是否响应</span></span><br><span class="line">        <span class="comment">// 获取到响应的数据</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; response.sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;服务器 拒绝&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> rospy_tutorials.srv <span class="keyword">import</span> AddTwoInts, AddTwoIntsRequest, AddTwoIntsResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;py_client&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建 Service 名称</span></span><br><span class="line">    service_name = <span class="string">&quot;demo_service&quot;</span></span><br><span class="line">    <span class="comment"># 创建 server</span></span><br><span class="line">    client = rospy.ServiceProxy(service_name, AddTwoInts)</span><br><span class="line">    <span class="comment"># 创建 Request</span></span><br><span class="line">    request = AddTwoIntsRequest()</span><br><span class="line">    request.a, request.b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = client.call(request)</span><br><span class="line">        print(response.sum)</span><br><span class="line">    <span class="keyword">except</span> rospy.ServiceException <span class="keyword">as</span> error:     <span class="comment"># 服务器拒绝响应的错误</span></span><br><span class="line">        print(<span class="string">&quot;服务器拒绝响应&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Service通讯机制&quot;&gt;&lt;a href=&quot;#Service通讯机制&quot; class=&quot;headerlink&quot; title=&quot;Service通讯机制&quot;&gt;&lt;/a&gt;Service通讯机制&lt;/h2&gt;&lt;p&gt;Service通讯分为&lt;code&gt;client端&lt;/code&gt;和&lt;code&gt;server端&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;client端&lt;/code&gt;负责发送请求(Request)给&lt;code&gt;server端&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;server端&lt;/code&gt;负责接收&lt;code&gt;client端&lt;/code&gt;发送的请求数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;server端&lt;/code&gt;收到数据后，根据请求数据和当前的业务需求，产生数据，将数据(Response)返回给&lt;code&gt;client端&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service通讯的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步数据访问&lt;/li&gt;
&lt;li&gt;具有响应反馈机制&lt;/li&gt;
&lt;li&gt;一个server多个client&lt;/li&gt;
&lt;li&gt;注重业务逻辑处理&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="ROS" scheme="https://www.askeynil.com/categories/ROS/"/>
    
    <category term="Kinetic" scheme="https://www.askeynil.com/categories/ROS/Kinetic/"/>
    
    
    <category term="ROS" scheme="https://www.askeynil.com/tags/ROS/"/>
    
    <category term="ROS Service" scheme="https://www.askeynil.com/tags/ROS-Service/"/>
    
  </entry>
  
  <entry>
    <title>消息的发布者（Publisher）</title>
    <link href="https://www.askeynil.com/2019/c8e84d4d.html"/>
    <id>https://www.askeynil.com/2019/c8e84d4d.html</id>
    <published>2019-10-18T04:00:00.000Z</published>
    <updated>2020-11-04T10:55:07.309Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>环境说明</p><p>ROS版本：ROS Kinetic Kame </p><p>Ubuntu版本：Ubuntu 16.04.6 LTS，（<code>lsb_release -a</code>）</p><p>Python版本：Python 2.7.12</p><p>CMake 版本：3.5.1</p></blockquote><p>前文已经讲过</p><ol><li><a href="/2019/ros-ws-pkg.html" title="ROS 工作空间和包">ROS 工作空间和包</a></li><li><a href="/2019/ros-msg-srv.html" title="ROS 消息（msg）和服务（srv）">ROS 消息（msg）和服务（srv）</a></li><li><a href="/2019/ROS-Overview.html" title="ROS 概述">ROS 概述</a></li></ol><blockquote><p>以上是这篇文章的基础</p><p>以下所有文件都创建在 ws 的工作空间下</p></blockquote><a id="more"></a><h2 id="topic通讯机制"><a href="#topic通讯机制" class="headerlink" title="topic通讯机制"></a>topic通讯机制</h2><p>ROS 中节点间通信，其中一方为消息的发布者，定义为<code>Publisher</code>，另一方为消息的订阅者，定义为<code>Subscriber</code>。考虑到消息需要广泛传播，ROS在设计中没有将该中设计为点对点的单一传递，而是有发布者发布数据到<code>Topic</code>中，想要获得消息的任何一方都可以在 <code>topic</code> 中去获取数据，类似于udp的广播机制，大致的通讯原理如下图：</p><p><img src="/img/ros/ros_topic.png" alt="ros_topic"></p><blockquote><p>使用命令<code>catkin_create_pkg demo_topic roscpp rospy rosmsg</code> 创建一个名为<code>demo_topic</code>的包</p></blockquote><h2 id="创建只发布std消息的节点"><a href="#创建只发布std消息的节点" class="headerlink" title="创建只发布std消息的节点"></a>创建只发布std消息的节点</h2><h3 id="c-版本"><a href="#c-版本" class="headerlink" title="c++版本"></a>c++版本</h3><ol><li>在<code>src</code>目录下创建一个 <code>publisher.cc</code> 文件，将以下代码添加到该文件中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_publisher&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// TODO 将业务逻辑写在此处</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环  </span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_publisher</span><br><span class="line">  src/publisher.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  demo_publisher</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Publisher</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先使用 std 库中的简易消息</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line"><span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line"><span class="comment">// 获取一个 publisher 的对象</span></span><br><span class="line"><span class="keyword">const</span> ros::Publisher &amp;pub =</span><br><span class="line">node.advertise&lt;std_msgs::String&gt;(topic_name, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 创建一个要发送的消息对象</span></span><br><span class="line">std_msgs::String str;</span><br><span class="line"><span class="comment">// 填充要发送的数据</span></span><br><span class="line">str.data = <span class="string">&quot;I send a message&quot;</span>;</span><br><span class="line"><span class="comment">// 使用 publisher 发送该消息</span></span><br><span class="line"><span class="keyword">while</span> (ros::ok()) &#123;</span><br><span class="line">    pub.publish(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>publisher.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_publisher&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 将业务逻辑写在此处</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Publisher</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先使用 std 库中的简易消息</span></span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line"><span class="comment"># 创建一个发布者</span></span><br><span class="line">pub = rospy.Publisher(topic_name, String, queue_size=<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 创建一个要发布的消息</span></span><br><span class="line">string = String()</span><br><span class="line"><span class="comment"># 填充要发布的消息</span></span><br><span class="line">string.data = <span class="string">&quot;I send a message&quot;</span></span><br><span class="line"><span class="comment"># 使用 publisher 发送该消息</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">    pub.publish(string)</span><br></pre></td></tr></table></figure></li><li><p>给 publisher.py 赋予可执行权限</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_topic/scripts/publisher.py</span><br></pre></td></tr></table></figure><h3 id="使用-rqt-topic-工具调试"><a href="#使用-rqt-topic-工具调试" class="headerlink" title="使用 rqt_topic 工具调试"></a>使用 rqt_topic 工具调试</h3><ol><li>将当前工作空间的环境变量添加到<code>bash</code>或<code>zsh</code>中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据使用不同的 shell 使用不同的环境变量，两者选其一</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment"># 使用 bash</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.zsh  <span class="comment"># 使用 zsh</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>运行 demo_publisher</p><ol><li>c++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic demo_publisher</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic publisher.py</span><br></pre></td></tr></table></figure></li><li><p>打开 rqt_topic 工具</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_topic rqt_topic</span><br></pre></td></tr></table></figure><ol start="4"><li>勾选 demo_topic，结果如下</li></ol><p><img src="/img/ros/rqt_topic1.jpg" alt="rqt_topic1"></p><h2 id="创建发布自定义消息的节点"><a href="#创建发布自定义消息的节点" class="headerlink" title="创建发布自定义消息的节点"></a>创建发布自定义消息的节点</h2><p>我们使用在<a href="(/2019/10/15/ros/ROS%20%E6%B6%88%E6%81%AF(msg)%E5%92%8C%E6%9C%8D%E5%8A%A1(srv)/">ros消息</a>讲过的<code>demo_msgs</code>包中的<code>Team.msg</code>来传输数据</p><h3 id="c-版本-1"><a href="#c-版本-1" class="headerlink" title="c++版本"></a>c++版本</h3><ol><li>在<code>src</code>目录下创建一个 <code>publisher1.cc</code> 文件，将以下代码添加到该文件中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_publisher&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// TODO 将业务逻辑写在此处</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环  </span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_publisher1</span><br><span class="line">  src/publisher1.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  demo_publisher1</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>CMakeLists.txt</code>文件的<code>find_package</code>中添加<code>demo_msgs</code>的依赖   </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rosmsg</span><br><span class="line">  rospy</span><br><span class="line">  demo_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li><p>创建 <code>Publisher</code> 对象</p><ol><li><p>导入要发送的消息的头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;demo_msgs/Team.h&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p>创建对象，并发送消息</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line"><span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line"><span class="comment">// 获取一个 publisher 的对象</span></span><br><span class="line"><span class="keyword">const</span> ros::Publisher &amp;pub =</span><br><span class="line">    node.advertise&lt;demo_msgs::Team&gt;(topic_name, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 创建一个要发送的消息对象</span></span><br><span class="line">demo_msgs::Team team;</span><br><span class="line"><span class="comment">// 填充要发送的数据</span></span><br><span class="line">team.name = <span class="string">&quot;I&#x27;m a team&quot;</span>;</span><br><span class="line">team.leader.name = <span class="string">&quot;AskeyNil&quot;</span>;</span><br><span class="line">team.leader.age = <span class="number">18</span>;</span><br><span class="line">team.location.angular.x = <span class="number">1</span>;</span><br><span class="line">team.location.linear.z = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 使用 publisher 发送该消息</span></span><br><span class="line"><span class="keyword">while</span> (ros::ok()) &#123;</span><br><span class="line"> pub.publish(team);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>publisher1.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_publisher&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 将业务逻辑写在此处</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Publisher</code> 对象</p><ol><li>导入要发送的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> demo_msgs.msg <span class="keyword">import</span> Team</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并发送消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line"><span class="comment"># 创建一个发布者</span></span><br><span class="line">pub = rospy.Publisher(topic_name, Team, queue_size=<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 创建一个要发布的消息</span></span><br><span class="line">team = Team()</span><br><span class="line"><span class="comment"># 填充要发布的消息</span></span><br><span class="line">team.name = <span class="string">&quot;I&#x27;m a team&quot;</span></span><br><span class="line">team.leader.name = <span class="string">&quot;AskeyNil&quot;</span></span><br><span class="line">team.leader.age = <span class="number">18</span></span><br><span class="line">team.location.angular.x = <span class="number">1</span></span><br><span class="line">team.location.linear.z = <span class="number">2</span></span><br><span class="line"><span class="comment"># 使用 publisher 发送该消息</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">    pub.publish(team)</span><br></pre></td></tr></table></figure></li><li><p>给 publisher.py 赋予可执行权限</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_topic/scripts/publisher.py</span><br></pre></td></tr></table></figure><h3 id="使用-rqt-topic-工具调试-1"><a href="#使用-rqt-topic-工具调试-1" class="headerlink" title="使用 rqt_topic 工具调试"></a>使用 rqt_topic 工具调试</h3><ol><li>将当前工作空间的环境变量添加到<code>bash</code>或<code>zsh</code>中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据使用不同的 shell 使用不同的环境变量，两者选其一</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment"># 使用 bash</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.zsh  <span class="comment"># 使用 zsh</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>运行 demo_publisher</p><ol><li>c++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic demo_publisher1</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic publisher1.py</span><br></pre></td></tr></table></figure></li><li><p>打开 rqt_topic 工具</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_topic rqt_topic</span><br></pre></td></tr></table></figure><ol start="4"><li>勾选 demo_topic，结果如下</li></ol><p><img src="/img/ros/rqt_topic2.jpg" alt="rqt_topic1"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>如果调用别的<code>package</code>中的消息，需要将对应<code>package</code>添加到<code>CMakeLists.txt</code>中即可使用</li><li>Python 文件在调用之前一定要给对应的程序可执行的权限</li><li>创建简单ros程序的时候有大致的固定格式，可以使用代码块将其包装起来，下文记录我在<code>vscode</code>中记录的代码块</li><li><strong>注意</strong>：<code>node_name</code>是一个base name，其中不能包含 <code>/</code> 。</li><li><strong>注意</strong>：如果发送频率太高，缓冲区中的消息大于我们设定的值，本文设置的是1000，则会默认丢弃掉最先发布的消息。</li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><h4 id="ros-main"><a href="#ros-main" class="headerlink" title="ros_main"></a>ros_main</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_main&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_main&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;// 导入 ros 头文件&quot;,</span><br><span class="line">            &quot;#include &lt;ros/ros.h&gt;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;int main(int argc, char **argv) &#123;&quot;,</span><br><span class="line">            &quot;    // 创建 ros 的节点名称&quot;,</span><br><span class="line">            &quot;    // todo 填写节点名称&quot;,</span><br><span class="line">            &quot;    char node_name[] = \&quot;$&#123;1:node_name&#125;\&quot;;&quot;,</span><br><span class="line">            &quot;    // 初始化 ros 节点&quot;,</span><br><span class="line">            &quot;    ros::init(argc, argv, node_name);&quot;,</span><br><span class="line">            &quot;    // 创建一个节点对象&quot;,</span><br><span class="line">            &quot;    ros::NodeHandle node;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;    // todo 处理业务逻辑&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;    // 进入一个简单的事件循环&quot;,</span><br><span class="line">            &quot;    ros::spin();&quot;,</span><br><span class="line">            &quot;    return 0;&quot;,</span><br><span class="line">            &quot;&#125;&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="ros-create-publisher"><a href="#ros-create-publisher" class="headerlink" title="ros_create_publisher"></a>ros_create_publisher</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_publisher&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_publisher&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;// 创建一个 topic 的名称&quot;,</span><br><span class="line">            &quot;// todo 填写 topic 名称&quot;,</span><br><span class="line">            &quot;char topic_name[] = \&quot;$&#123;1:topic_name&#125;\&quot;;&quot;,</span><br><span class="line">            &quot;// 获取一个 publisher 的对象&quot;,</span><br><span class="line">            &quot;// todo 添加 topic 类型&quot;,</span><br><span class="line">            &quot;const ros::Publisher &amp;pub =&quot;,</span><br><span class="line">            &quot;    node.advertise&lt;$&#123;2:topic_class&#125;&gt;(topic_name, 1000);&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="ros-main-1"><a href="#ros-main-1" class="headerlink" title="ros_main"></a>ros_main</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_main&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_main&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;#!/usr/bin/env python&quot;,</span><br><span class="line">            &quot;# coding: utf-8&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;# 导入 rospy 依赖&quot;,</span><br><span class="line">            &quot;import rospy&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;if __name__ == \&quot;__main__\&quot;:&quot;,</span><br><span class="line">            &quot;    # 节点名称&quot;,</span><br><span class="line">            &quot;    # todo 填写节点名称&quot;,</span><br><span class="line">            &quot;    node_name = \&quot;$&#123;1:node_name&#125;\&quot;&quot;,</span><br><span class="line">            &quot;    # 初始化 ros 节点&quot;,</span><br><span class="line">            &quot;    rospy.init_node(node_name)&quot;,</span><br><span class="line">            &quot;    # todo 处理业务逻辑&quot;,</span><br><span class="line">            &quot;    # 开启 ros 运行时循环&quot;,</span><br><span class="line">            &quot;    rospy.spin()&quot;,</span><br><span class="line">            <span class="string">&quot;&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="ros-create-publisher-1"><a href="#ros-create-publisher-1" class="headerlink" title="ros_create_publisher"></a>ros_create_publisher</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_publisher&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_publisher&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;# 创建一个 topic 名称&quot;,</span><br><span class="line">            &quot;# todo 填写 topic 的名称&quot;,</span><br><span class="line">            &quot;topic_name = \&quot;$&#123;1:topic_name&#125;\&quot;&quot;,</span><br><span class="line">            &quot;# 创建一个发布者&quot;,</span><br><span class="line">            &quot;# todo 填写 topic 的类型&quot;,</span><br><span class="line">            &quot;pub = rospy.Publisher(topic_name, $&#123;2:topic_class&#125;, queue_size=1000)&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="创建只发布std消息的节点的完整代码"><a href="#创建只发布std消息的节点的完整代码" class="headerlink" title="创建只发布std消息的节点的完整代码"></a>创建只发布std消息的节点的完整代码</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_publisher&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line">    <span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取一个 publisher 的对象</span></span><br><span class="line">    <span class="keyword">const</span> ros::Publisher &amp;pub =</span><br><span class="line">        node.advertise&lt;std_msgs::String&gt;(topic_name, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 创建一个要发送的消息对象</span></span><br><span class="line">    std_msgs::String str;</span><br><span class="line">    str.data = <span class="string">&quot;I send a message&quot;</span>;</span><br><span class="line">    <span class="comment">// 使用 publisher 发送该消息</span></span><br><span class="line">    <span class="keyword">while</span> (ros::ok()) &#123;</span><br><span class="line">        pub.publish(str);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_publisher&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">    topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个发布者</span></span><br><span class="line">    pub = rospy.Publisher(topic_name, String, queue_size=<span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 创建一个要发布的消息</span></span><br><span class="line">    string = String()</span><br><span class="line">    <span class="comment"># 填充要发布的消息</span></span><br><span class="line">    string.data = <span class="string">&quot;I send a message&quot;</span></span><br><span class="line">    <span class="comment"># 使用 publisher 发送该消息</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        pub.publish(string)</span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><h3 id="创建发布自定义消息的节点-1"><a href="#创建发布自定义消息的节点-1" class="headerlink" title="创建发布自定义消息的节点"></a>创建发布自定义消息的节点</h3><h4 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;demo_msgs/Team.h&quot;</span></span></span><br><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_publisher&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line">    <span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取一个 publisher 的对象</span></span><br><span class="line">    <span class="keyword">const</span> ros::Publisher &amp;pub =</span><br><span class="line">        node.advertise&lt;demo_msgs::Team&gt;(topic_name, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 创建一个要发送的消息对象</span></span><br><span class="line">    demo_msgs::Team team;</span><br><span class="line">    <span class="comment">// 填充要发送的数据</span></span><br><span class="line">    team.name = <span class="string">&quot;I&#x27;m a team&quot;</span>;</span><br><span class="line">    team.leader.name = <span class="string">&quot;AskeyNil&quot;</span>;</span><br><span class="line">    team.leader.age = <span class="number">18</span>;</span><br><span class="line">    team.location.angular.x = <span class="number">1</span>;</span><br><span class="line">    team.location.linear.z = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 使用 publisher 发送该消息</span></span><br><span class="line">    <span class="keyword">while</span> (ros::ok()) &#123;</span><br><span class="line">        pub.publish(team);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> demo_msgs.msg <span class="keyword">import</span> Team</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_publisher&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">    topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个发布者</span></span><br><span class="line">    pub = rospy.Publisher(topic_name, Team, queue_size=<span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 创建一个要发布的消息</span></span><br><span class="line">    team = Team()</span><br><span class="line">    <span class="comment"># 填充要发布的消息</span></span><br><span class="line">    team.name = <span class="string">&quot;I&#x27;m a team&quot;</span></span><br><span class="line">    team.leader.name = <span class="string">&quot;AskeyNil&quot;</span></span><br><span class="line">    team.leader.age = <span class="number">18</span></span><br><span class="line">    team.location.angular.x = <span class="number">1</span></span><br><span class="line">    team.location.linear.z = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 使用 publisher 发送该消息</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        pub.publish(team)</span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;环境说明&lt;/p&gt;
&lt;p&gt;ROS版本：ROS Kinetic Kame &lt;/p&gt;
&lt;p&gt;Ubuntu版本：Ubuntu 16.04.6 LTS，（&lt;code&gt;lsb_release -a&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;Python版本：Python 2.7.12&lt;/p&gt;
&lt;p&gt;CMake 版本：3.5.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前文已经讲过&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2019/ros-ws-pkg.html&quot; title=&quot;ROS 工作空间和包&quot;&gt;ROS 工作空间和包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2019/ros-msg-srv.html&quot; title=&quot;ROS 消息（msg）和服务（srv）&quot;&gt;ROS 消息（msg）和服务（srv）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2019/ROS-Overview.html&quot; title=&quot;ROS 概述&quot;&gt;ROS 概述&lt;/a&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;以上是这篇文章的基础&lt;/p&gt;
&lt;p&gt;以下所有文件都创建在 ws 的工作空间下&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="ROS" scheme="https://www.askeynil.com/categories/ROS/"/>
    
    <category term="Kinetic" scheme="https://www.askeynil.com/categories/ROS/Kinetic/"/>
    
    
    <category term="ROS" scheme="https://www.askeynil.com/tags/ROS/"/>
    
    <category term="ROS Topic" scheme="https://www.askeynil.com/tags/ROS-Topic/"/>
    
  </entry>
  
  <entry>
    <title>消息订阅者（Subscriber）</title>
    <link href="https://www.askeynil.com/2019/b013f674.html"/>
    <id>https://www.askeynil.com/2019/b013f674.html</id>
    <published>2019-10-18T04:00:00.000Z</published>
    <updated>2020-11-04T10:55:07.310Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>环境说明</p><p>ROS版本：ROS Kinetic Kame </p><p>Ubuntu版本：Ubuntu 16.04.6 LTS，（<code>lsb_release -a</code>）</p><p>Python版本：Python 2.7.12</p><p>CMake 版本：3.5.1</p></blockquote><p>前文已经讲过</p><ol><li><a href="/2019/ros-ws-pkg.html" title="ROS 工作空间和包">ROS 工作空间和包</a></li><li><a href="/2019/ros-msg-srv.html" title="ROS 消息（msg）和服务（srv）">ROS 消息（msg）和服务（srv）</a></li><li><a href="/2019/ROS-Overview.html" title="ROS 概述">ROS 概述</a></li><li><a href="/2019/c8e84d4d.html" title="消息的发布者（Publisher）">消息的发布者（Publisher）</a></li></ol><blockquote><p>以上是这篇文章的基础</p><p>以下所有文件都创建在 ws 的工作空间下</p></blockquote><a id="more"></a><h2 id="创建只订阅std消息的节点"><a href="#创建只订阅std消息的节点" class="headerlink" title="创建只订阅std消息的节点"></a>创建只订阅std消息的节点</h2><h3 id="c-版本"><a href="#c-版本" class="headerlink" title="c++版本"></a>c++版本</h3><ol><li>在<code>src</code>目录下创建一个 <code>subscriber.cc</code> 文件，将以下代码添加到该文件中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_subscriber&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// TODO 将业务逻辑写在此处</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环  </span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_subscriber</span><br><span class="line">  src/subscriber.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  subscriber</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Subscriber</code> 对象</p><ol><li>导入要订阅的消息的头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先使用 std 库中的简易消息</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并订阅消息</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line"><span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line"><span class="comment">// 创建一个 Subscriber 对象</span></span><br><span class="line">    <span class="keyword">const</span> ros::Subscriber &amp;sub = node.subscribe(topic_name, <span class="number">1000</span>, subCallback);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建回调函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subCallback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr &amp;msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    ROS_INFO_STREAM(msg-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>subscriber.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_subscriber&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 将业务逻辑写在此处</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Subscriber</code> 对象</p><ol><li>导入要订阅的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先使用 std 库中的简易消息</span></span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并订阅消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line"><span class="comment"># 创建一个 Subscriber 对象</span></span><br><span class="line">sub = rospy.Subscriber(topic_name, String, subCallback)</span><br></pre></td></tr></table></figure><ol start="3"><li>创建回调函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这个赋默认值是为了使后面有代码提示，实际过程中，msg 被传入的，所以不影响结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCallback</span>(<span class="params">msg=String(<span class="params"></span>)</span>):</span> </span><br><span class="line">    <span class="comment"># 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    <span class="keyword">print</span> (msg.data)</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>给 subscriber.py 赋予可执行权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_topic/scripts/subscriber.py</span><br></pre></td></tr></table></figure><h3 id="使用-rqt-publisher-工具调试"><a href="#使用-rqt-publisher-工具调试" class="headerlink" title="使用 rqt_publisher 工具调试"></a>使用 rqt_publisher 工具调试</h3><ol><li>将当前工作空间的环境变量添加到<code>bash</code>或<code>zsh</code>中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据使用不同的 shell 使用不同的环境变量，两者选其一</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment"># 使用 bash</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.zsh  <span class="comment"># 使用 zsh</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>运行 demo_publisher</p><ol><li>c++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic demo_subscriber</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic subscriber.py</span><br></pre></td></tr></table></figure></li><li><p>打开 rqt_publisher 工具</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_publisher rqt_publisher</span><br></pre></td></tr></table></figure><ol start="4"><li>选择我们对应的<code>Topic</code>：<code>demo_topic</code>，<code>Type</code>选择<code>std_msgs/String</code></li><li>勾选就会一直发送数据，或者右键点击<code>Publisher Selected Once</code> 可以发送一次数据</li></ol><h2 id="创建订阅自定义消息的节点"><a href="#创建订阅自定义消息的节点" class="headerlink" title="创建订阅自定义消息的节点"></a>创建订阅自定义消息的节点</h2><p>我们使用在<a href="(/2019/10/15/ros/ROS%20%E6%B6%88%E6%81%AF(msg)%E5%92%8C%E6%9C%8D%E5%8A%A1(srv)/">ros消息</a>讲过的<code>demo_msgs</code>包中的<code>Team.msg</code>来传输数据</p><h3 id="c-版本-1"><a href="#c-版本-1" class="headerlink" title="c++版本"></a>c++版本</h3><ol><li>在<code>src</code>目录下创建一个 <code>subscriber1.cc</code> 文件，将以下代码添加到该文件中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_subscriber&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// TODO 将业务逻辑写在此处</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环  </span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>CMakeLists.txt</code> 中添加 <code>add_executable</code> 和 <code>target_link_libraries</code> </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(</span><br><span class="line">  demo_subscriber1</span><br><span class="line">  src/subscriber1.cc</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 添加该可执行程序的依赖库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  demo_subscriber1</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>CMakeLists.txt</code>文件的<code>find_package</code>中添加<code>demo_msgs</code>的依赖   </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rosmsg</span><br><span class="line">  rospy</span><br><span class="line">  demo_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li><p>创建 <code>Publisher</code> 对象</p><ol><li><p>导入要发送的消息的头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;demo_msgs/Team.h&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p>创建对象，并发送消息</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line"><span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line"><span class="comment">// 创建一个 Subscriber 对象</span></span><br><span class="line"><span class="keyword">const</span> ros::Subscriber &amp;sub = node.subscribe(topic_name, <span class="number">1000</span>, subCallback);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建回调函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subCallback</span><span class="params">(<span class="keyword">const</span> demo_msgs::Team::ConstPtr &amp;msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    ROS_INFO_STREAM(msg-&gt;name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该节点，在工作空间目录下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="python版本-1"><a href="#python版本-1" class="headerlink" title="python版本"></a>python版本</h3><ol><li>在 <code>package</code> 目录下创建一个名为 <code>scripts</code> 的文件夹</li><li>创建一个名为 <code>subscriber1.py</code> 的文件，将以下代码添加到该文件中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_subscriber&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># todo 将业务逻辑写在此处</span></span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建 <code>Subscriber</code> 对象</p><ol><li>导入要订阅的消息的头文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> demo_msgs.msg <span class="keyword">import</span> Team</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象，并订阅消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line"><span class="comment"># 创建一个 Subscriber 对象</span></span><br><span class="line">sub = rospy.Subscriber(topic_name, Team, subCallback)</span><br></pre></td></tr></table></figure><ol start="3"><li>创建回调函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这个赋默认值是为了使后面有代码提示，实际过程中，msg 被传入的，所以不影响结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCallback</span>(<span class="params">msg=Team(<span class="params"></span>)</span>):</span> </span><br><span class="line">    <span class="comment"># 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    <span class="keyword">print</span> (msg.name)</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>给 subscriber.py 赋予可执行权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x src/demo_topic/scripts/subscriber1.py</span><br></pre></td></tr></table></figure><h3 id="使用-rqt-publisher-工具调试-1"><a href="#使用-rqt-publisher-工具调试-1" class="headerlink" title="使用 rqt_publisher 工具调试"></a>使用 rqt_publisher 工具调试</h3><ol><li>将当前工作空间的环境变量添加到<code>bash</code>或<code>zsh</code>中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据使用不同的 shell 使用不同的环境变量，两者选其一</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash <span class="comment"># 使用 bash</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.zsh  <span class="comment"># 使用 zsh</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>运行 demo_publisher</p><ol><li>c++ 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic demo_subscriber</span><br></pre></td></tr></table></figure><ol start="2"><li>python 程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun demo_topic subscriber.py</span><br></pre></td></tr></table></figure></li><li><p>打开 rqt_publisher 工具</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_publisher rqt_publisher</span><br></pre></td></tr></table></figure><ol start="4"><li>选择我们对应的<code>Topic</code>：<code>demo_topic</code>，<code>Type</code>选择<code>demo_msgs/Team</code></li><li>勾选就会一直发送数据，或者右键点击<code>Publisher Selected Once</code> 可以发送一次数据</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>两种订阅消息几乎是一样的，因为在我们创建包的时候已经将<code>std_msgs</code>的依赖导入了，所以导致我们就不需要添加依赖。</li><li>使用对应消息的时候要添加对应消息的依赖。</li><li>回调函数默认在主线程中进行，即<code>ros::spin()</code>或<code>rospy.spin()</code>会卡死主线程，进入ros的运行时</li><li>如果有别的运行时，如 qt(以后会详细介绍qt中的用法)，则需要使用异步接收ros的运行时消息，或者在 qt 中使用<code>spinOnce()</code>(仅在c++中需要)</li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><h4 id="ros-create-subscriber"><a href="#ros-create-subscriber" class="headerlink" title="ros_create_subscriber"></a>ros_create_subscriber</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_subscriber&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_subscriber&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;#include \&quot;$&#123;1: topic_class&#125;\&quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;void callback(const $&#123;2: topic_class&#125;::ConstPtr &amp;msg) &#123;&quot;,</span><br><span class="line">            &quot;    // 一般写业务逻辑，此处打印接收到的数据&quot;,</span><br><span class="line">            &quot;    ROS_INFO_STREAM(msg);&quot;,</span><br><span class="line">            &quot;&#125;&quot;,</span><br><span class="line">            &quot;// 创建一个 topic 的名称&quot;,</span><br><span class="line">            &quot;// todo 填写 topic 名称&quot;,</span><br><span class="line">            &quot;char topic_name[] = \&quot;$&#123;3&#125;\&quot;;&quot;,</span><br><span class="line">            &quot;// 创建一个 Subscriber 对象&quot;,</span><br><span class="line">            &quot;const ros::Subscriber &amp;sub = node.subscribe(topic_name, 1000, callback);&quot;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="ros-create-subscriber-1"><a href="#ros-create-subscriber-1" class="headerlink" title="ros_create_subscriber"></a>ros_create_subscriber</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&quot;ros_create_subscriber&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;ros_create_subscriber&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;# todo 填写 msg 的类型&quot;,</span><br><span class="line">            &quot;from $&#123;1: msg_class&#125;.msg import $&#123;2: msg_type&#125;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;def subCallback(msg=$&#123;2:msg_type&#125;()):&quot;,</span><br><span class="line">            &quot;    # 一般写业务逻辑，此处打印接收到的数据&quot;,</span><br><span class="line">            &quot;    print (msg)&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;# 创建一个 topic 名称&quot;,</span><br><span class="line">            &quot;# todo 填写 topic 名称&quot;,</span><br><span class="line">            &quot;topic_name = \&quot;$&#123;3: topic_name&#125;\&quot;&quot;,</span><br><span class="line">            &quot;# 创建一个 Subscriber 对象&quot;,</span><br><span class="line">            &quot;sub = rospy.Subscriber(topic_name, $&#123;2: msg_type&#125;, subCallback)&quot;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="创建只发布std消息的节点的完整代码"><a href="#创建只发布std消息的节点的完整代码" class="headerlink" title="创建只发布std消息的节点的完整代码"></a>创建只发布std消息的节点的完整代码</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subCallback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr &amp;msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    ROS_INFO_STREAM(msg-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_subscriber&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line">    <span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建一个 Subscriber 对象</span></span><br><span class="line">    <span class="keyword">const</span> ros::Subscriber &amp;sub = node.subscribe(topic_name, <span class="number">1000</span>, subCallback);</span><br><span class="line">    <span class="comment">// 进入一个简单的事件循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCallback</span>(<span class="params">msg=String(<span class="params"></span>)</span>):</span></span><br><span class="line">    <span class="comment"># 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    <span class="keyword">print</span> (msg.data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_subscriber&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">    topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个 Subscriber 对象</span></span><br><span class="line">    sub = rospy.Subscriber(topic_name, String, subCallback)</span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建发布自定义消息的节点"><a href="#创建发布自定义消息的节点" class="headerlink" title="创建发布自定义消息的节点"></a>创建发布自定义消息的节点</h3><h4 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;demo_msgs/Team.h&quot;</span></span></span><br><span class="line"><span class="comment">// 导入 ros 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subCallback</span><span class="params">(<span class="keyword">const</span> demo_msgs::Team::ConstPtr &amp;msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    ROS_INFO_STREAM(msg-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ros 的节点名称</span></span><br><span class="line">    <span class="keyword">char</span> node_name[] = <span class="string">&quot;demo_subscriber&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化 ros 节点</span></span><br><span class="line">    ros::init(argc, argv, node_name);</span><br><span class="line">    <span class="comment">// 创建一个节点对象</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    <span class="comment">// 创建一个 topic 的名称</span></span><br><span class="line">    <span class="keyword">char</span> topic_name[] = <span class="string">&quot;demo_topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建一个 Subscriber 对象</span></span><br><span class="line">    <span class="keyword">const</span> ros::Subscriber &amp;sub = node.subscribe(topic_name, <span class="number">1000</span>, subCallback);</span><br><span class="line">    <span class="comment">// 开启 ros 的运行时循环</span></span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 rospy 依赖</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> demo_msgs.msg <span class="keyword">import</span> Team</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCallback</span>(<span class="params">msg=Team(<span class="params"></span>)</span>):</span></span><br><span class="line">    <span class="comment"># 一般写业务逻辑，此处打印接收到的数据</span></span><br><span class="line">    <span class="keyword">print</span> (msg.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 节点名称</span></span><br><span class="line">    node_name = <span class="string">&quot;demo_subscriber&quot;</span></span><br><span class="line">    <span class="comment"># 初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(node_name)</span><br><span class="line">    <span class="comment"># 创建一个 topic 名称</span></span><br><span class="line">    topic_name = <span class="string">&quot;demo_topic&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个 Subscriber 对象</span></span><br><span class="line">    sub = rospy.Subscriber(topic_name, Team, subCallback)</span><br><span class="line">    <span class="comment"># 开启 ros 运行时循环</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;环境说明&lt;/p&gt;
&lt;p&gt;ROS版本：ROS Kinetic Kame &lt;/p&gt;
&lt;p&gt;Ubuntu版本：Ubuntu 16.04.6 LTS，（&lt;code&gt;lsb_release -a&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;Python版本：Python 2.7.12&lt;/p&gt;
&lt;p&gt;CMake 版本：3.5.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前文已经讲过&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2019/ros-ws-pkg.html&quot; title=&quot;ROS 工作空间和包&quot;&gt;ROS 工作空间和包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2019/ros-msg-srv.html&quot; title=&quot;ROS 消息（msg）和服务（srv）&quot;&gt;ROS 消息（msg）和服务（srv）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2019/ROS-Overview.html&quot; title=&quot;ROS 概述&quot;&gt;ROS 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2019/c8e84d4d.html&quot; title=&quot;消息的发布者（Publisher）&quot;&gt;消息的发布者（Publisher）&lt;/a&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;以上是这篇文章的基础&lt;/p&gt;
&lt;p&gt;以下所有文件都创建在 ws 的工作空间下&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="ROS" scheme="https://www.askeynil.com/categories/ROS/"/>
    
    <category term="Kinetic" scheme="https://www.askeynil.com/categories/ROS/Kinetic/"/>
    
    
    <category term="ROS" scheme="https://www.askeynil.com/tags/ROS/"/>
    
    <category term="ROS Topic" scheme="https://www.askeynil.com/tags/ROS-Topic/"/>
    
  </entry>
  
  <entry>
    <title>ROS 命令行工具介绍</title>
    <link href="https://www.askeynil.com/2019/412acdc0.html"/>
    <id>https://www.askeynil.com/2019/412acdc0.html</id>
    <published>2019-10-18T02:00:00.000Z</published>
    <updated>2020-11-04T10:55:07.304Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>roscore</td><td>用来开启ros master</td></tr><tr><td><a href="/2019/ROS-Overview.html#%E4%BD%BF%E7%94%A8-rosnode">rosnode</a></td><td>用来打印节点信息</td></tr><tr><td><a href="/2019/ROS-Overview.html#%E4%BD%BF%E7%94%A8-rosrun">rosrun</a></td><td>用来运行节点</td></tr><tr><td><a href="/2019/ros-msg-srv.html#rosmsg">rosmsg</a></td><td>用来显示 msg 数据</td></tr><tr><td><a href="/2019/ros-msg-srv.html#rossrv">rossrv</a></td><td>用来显示 srv 数据</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;roscore&lt;/td&gt;
&lt;td&gt;用来开启ros master&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/20</summary>
      
    
    
    
    <category term="ROS" scheme="https://www.askeynil.com/categories/ROS/"/>
    
    <category term="Kinetic" scheme="https://www.askeynil.com/categories/ROS/Kinetic/"/>
    
    
    <category term="ROS" scheme="https://www.askeynil.com/tags/ROS/"/>
    
    <category term="Shell" scheme="https://www.askeynil.com/tags/Shell/"/>
    
    <category term="ROS command" scheme="https://www.askeynil.com/tags/ROS-command/"/>
    
  </entry>
  
  <entry>
    <title>ROS 概述</title>
    <link href="https://www.askeynil.com/2019/ROS-Overview.html"/>
    <id>https://www.askeynil.com/2019/ROS-Overview.html</id>
    <published>2019-10-18T02:00:00.000Z</published>
    <updated>2019-10-18T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ros的基础架构"><a href="#ros的基础架构" class="headerlink" title="ros的基础架构"></a>ros的基础架构</h2><p><img src="/img/ros/ros_struct.png"></p><p>ROS 项目在部署运行的过程中，大致分为4个部分：</p><ul><li>环境<ul><li>软件环境</li><li>硬件环境</li></ul></li><li>执行器<ul><li>给操作系统发送一些指令，以此来控制硬件执行相应操作</li></ul></li><li>传感器<ul><li>传感器接收外部环境给的输出，反馈给相应的软件</li></ul></li><li>软件结构<ul><li>ros 一个可执行程序，就是一个节点</li><li>ros master用来管理各个节点</li></ul></li></ul><a id="more"></a><h3 id="软件结构的组成"><a href="#软件结构的组成" class="headerlink" title="软件结构的组成"></a>软件结构的组成</h3><p><img src="/img/ros/ros_master.png"></p><h4 id="ROS-Master"><a href="#ROS-Master" class="headerlink" title="ROS Master"></a>ROS Master</h4><ul><li>管理每个节点间的通信</li><li>每个节点都需要到 <code>ROS Master</code> 中进行注册</li></ul><p>通过<code>roscore</code>命令启动<code>ROS Master</code>，而且在节点开始前必须启动<code>ROS Master</code></p><h4 id="ROS-Node"><a href="#ROS-Node" class="headerlink" title="ROS Node"></a>ROS Node</h4><ul><li>具备单一的功能的可执行程序</li><li>可以单独编译，可执行，可管理</li><li>存放在<code>package</code>中</li><li>一个节点就是一个可执行程序</li></ul><h2 id="ros客户端库"><a href="#ros客户端库" class="headerlink" title="ros客户端库"></a>ros客户端库</h2><p>ROS 客户端允许使用不同的编程语言编写的节点之间相互通信</p><ul><li>rospy = python 客户端库</li><li>roscpp = c++ 客户端库</li></ul><h2 id="使用-rosnode"><a href="#使用-rosnode" class="headerlink" title="使用 rosnode"></a>使用 rosnode</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rosnode -h</span></span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> rosnode 是一个用来打印 ROS 节点信息的命令行工具</span></span><br><span class="line">rosnode is a command-line tool for printing information about ROS Nodes.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">                    # 测试是否能连接到节点</span><br><span class="line">    rosnode ping    test connectivity to node</span><br><span class="line">                    # 激活的节点列表</span><br><span class="line">    rosnode list    list active nodes</span><br><span class="line">                    # 打印节点信息</span><br><span class="line">    rosnode info    print information about node</span><br><span class="line">                    # 列出在特定计算机上运行的节点</span><br><span class="line">    rosnode machine    list nodes running on a particular machine or list machines</span><br><span class="line">                    # 杀死正在运行的节点</span><br><span class="line">    rosnode kill    kill a running node</span><br><span class="line">                    # 清除不可达的的节点的注册信息（ping不通，就是程序死掉了，信息没删掉）</span><br><span class="line">    rosnode cleanup    purge registration information of unreachable nodes</span><br><span class="line"><span class="meta">#</span><span class="bash">输入 rosnode &lt;<span class="built_in">command</span>&gt; -h 以获得更多使用说明，例如 rosnode ping -h</span></span><br><span class="line">Type rosnode &lt;command&gt; -h for more detailed usage, e.g. &#x27;rosnode ping -h&#x27;`</span><br></pre></td></tr></table></figure><blockquote><p>通过 -h 可以快速查询对应的命令和用法，这里只提取常用的</p></blockquote><p>常用方法</p><ol><li><code>runnode list</code> 查看当前开启的节点</li><li><code>rosnode info [node]</code> 查看节点的信息</li><li><code>rosnode cleanup</code> 清除无用的节点信息</li></ol><h2 id="使用-rosrun"><a href="#使用-rosrun" class="headerlink" title="使用 rosrun"></a>使用 rosrun</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rosrun -h</span></span><br><span class="line">---</span><br><span class="line">Usage: rosrun [--prefix cmd] [--debug] PACKAGE EXECUTABLE [ARGS]</span><br><span class="line">  rosrun will locate PACKAGE and try to find</span><br><span class="line">  an executable named EXECUTABLE in the PACKAGE tree.</span><br><span class="line">  If it finds it, it will run it with ARGS.</span><br><span class="line"><span class="meta">#</span><span class="bash"> rosrun 试图找到 PACKAGE 和 PACKAGE 下的名为 EXECUTABLE 的可执行程序。如果找到，将参数args传入并运行它</span></span><br></pre></td></tr></table></figure><blockquote><p>一般该命令在输入 package 和 executable 的时候使用 tab 键都会有提示，如果没有提示，尝试<code>source</code> 当前工作空间下 <code>devel/setup.bash</code> 或 <code>devel/setup.zsh</code>(如果你用zsh的话)</p></blockquote><p>注意：如果写<code>python</code>程序，需要给 <code>python</code> 的入口<code>python</code>文件一个可执行的权限，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x main.py</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ros的基础架构&quot;&gt;&lt;a href=&quot;#ros的基础架构&quot; class=&quot;headerlink&quot; title=&quot;ros的基础架构&quot;&gt;&lt;/a&gt;ros的基础架构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/ros/ros_struct.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;ROS 项目在部署运行的过程中，大致分为4个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境&lt;ul&gt;
&lt;li&gt;软件环境&lt;/li&gt;
&lt;li&gt;硬件环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行器&lt;ul&gt;
&lt;li&gt;给操作系统发送一些指令，以此来控制硬件执行相应操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传感器&lt;ul&gt;
&lt;li&gt;传感器接收外部环境给的输出，反馈给相应的软件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件结构&lt;ul&gt;
&lt;li&gt;ros 一个可执行程序，就是一个节点&lt;/li&gt;
&lt;li&gt;ros master用来管理各个节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="ROS" scheme="https://www.askeynil.com/categories/ROS/"/>
    
    <category term="Kinetic" scheme="https://www.askeynil.com/categories/ROS/Kinetic/"/>
    
    
    <category term="ROS" scheme="https://www.askeynil.com/tags/ROS/"/>
    
    <category term="Shell" scheme="https://www.askeynil.com/tags/Shell/"/>
    
    <category term="ROS command" scheme="https://www.askeynil.com/tags/ROS-command/"/>
    
  </entry>
  
</feed>
